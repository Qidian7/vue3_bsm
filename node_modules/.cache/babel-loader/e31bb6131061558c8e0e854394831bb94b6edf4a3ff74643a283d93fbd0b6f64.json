{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar zrUtil = require(\"zrender/lib/core/util\");\nvar linkList = require(\"./helper/linkList\");\nvar List = require(\"./List\");\nvar createDimensions = require(\"./helper/createDimensions\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Tree data structure\n *\n * @module echarts/data/Tree\n */\n\n/**\n * @constructor module:echarts/data/Tree~TreeNode\n * @param {string} name\n * @param {module:echarts/data/Tree} hostTree\n */\nvar TreeNode = function (name, hostTree) {\n  /**\n   * @type {string}\n   */\n  this.name = name || '';\n  /**\n   * Depth of node\n   *\n   * @type {number}\n   * @readOnly\n   */\n\n  this.depth = 0;\n  /**\n   * Height of the subtree rooted at this node.\n   * @type {number}\n   * @readOnly\n   */\n\n  this.height = 0;\n  /**\n   * @type {module:echarts/data/Tree~TreeNode}\n   * @readOnly\n   */\n\n  this.parentNode = null;\n  /**\n   * Reference to list item.\n   * Do not persistent dataIndex outside,\n   * besause it may be changed by list.\n   * If dataIndex -1,\n   * this node is logical deleted (filtered) in list.\n   *\n   * @type {Object}\n   * @readOnly\n   */\n\n  this.dataIndex = -1;\n  /**\n   * @type {Array.<module:echarts/data/Tree~TreeNode>}\n   * @readOnly\n   */\n\n  this.children = [];\n  /**\n   * @type {Array.<module:echarts/data/Tree~TreeNode>}\n   * @pubilc\n   */\n\n  this.viewChildren = [];\n  /**\n   * @type {moduel:echarts/data/Tree}\n   * @readOnly\n   */\n\n  this.hostTree = hostTree;\n};\nTreeNode.prototype = {\n  constructor: TreeNode,\n  /**\n   * The node is removed.\n   * @return {boolean} is removed.\n   */\n  isRemoved: function () {\n    return this.dataIndex < 0;\n  },\n  /**\n   * Travel this subtree (include this node).\n   * Usage:\n   *    node.eachNode(function () { ... }); // preorder\n   *    node.eachNode('preorder', function () { ... }); // preorder\n   *    node.eachNode('postorder', function () { ... }); // postorder\n   *    node.eachNode(\n   *        {order: 'postorder', attr: 'viewChildren'},\n   *        function () { ... }\n   *    ); // postorder\n   *\n   * @param {(Object|string)} options If string, means order.\n   * @param {string=} options.order 'preorder' or 'postorder'\n   * @param {string=} options.attr 'children' or 'viewChildren'\n   * @param {Function} cb If in preorder and return false,\n   *                      its subtree will not be visited.\n   * @param {Object} [context]\n   */\n  eachNode: function (options, cb, context) {\n    if (typeof options === 'function') {\n      context = cb;\n      cb = options;\n      options = null;\n    }\n    options = options || {};\n    if (zrUtil.isString(options)) {\n      options = {\n        order: options\n      };\n    }\n    var order = options.order || 'preorder';\n    var children = this[options.attr || 'children'];\n    var suppressVisitSub;\n    order === 'preorder' && (suppressVisitSub = cb.call(context, this));\n    for (var i = 0; !suppressVisitSub && i < children.length; i++) {\n      children[i].eachNode(options, cb, context);\n    }\n    order === 'postorder' && cb.call(context, this);\n  },\n  /**\n   * Update depth and height of this subtree.\n   *\n   * @param  {number} depth\n   */\n  updateDepthAndHeight: function (depth) {\n    var height = 0;\n    this.depth = depth;\n    for (var i = 0; i < this.children.length; i++) {\n      var child = this.children[i];\n      child.updateDepthAndHeight(depth + 1);\n      if (child.height > height) {\n        height = child.height;\n      }\n    }\n    this.height = height + 1;\n  },\n  /**\n   * @param  {string} id\n   * @return {module:echarts/data/Tree~TreeNode}\n   */\n  getNodeById: function (id) {\n    if (this.getId() === id) {\n      return this;\n    }\n    for (var i = 0, children = this.children, len = children.length; i < len; i++) {\n      var res = children[i].getNodeById(id);\n      if (res) {\n        return res;\n      }\n    }\n  },\n  /**\n   * @param {module:echarts/data/Tree~TreeNode} node\n   * @return {boolean}\n   */\n  contains: function (node) {\n    if (node === this) {\n      return true;\n    }\n    for (var i = 0, children = this.children, len = children.length; i < len; i++) {\n      var res = children[i].contains(node);\n      if (res) {\n        return res;\n      }\n    }\n  },\n  /**\n   * @param {boolean} includeSelf Default false.\n   * @return {Array.<module:echarts/data/Tree~TreeNode>} order: [root, child, grandchild, ...]\n   */\n  getAncestors: function (includeSelf) {\n    var ancestors = [];\n    var node = includeSelf ? this : this.parentNode;\n    while (node) {\n      ancestors.push(node);\n      node = node.parentNode;\n    }\n    ancestors.reverse();\n    return ancestors;\n  },\n  /**\n   * @param {string|Array=} [dimension='value'] Default 'value'. can be 0, 1, 2, 3\n   * @return {number} Value.\n   */\n  getValue: function (dimension) {\n    var data = this.hostTree.data;\n    return data.get(data.getDimension(dimension || 'value'), this.dataIndex);\n  },\n  /**\n   * @param {Object} layout\n   * @param {boolean=} [merge=false]\n   */\n  setLayout: function (layout, merge) {\n    this.dataIndex >= 0 && this.hostTree.data.setItemLayout(this.dataIndex, layout, merge);\n  },\n  /**\n   * @return {Object} layout\n   */\n  getLayout: function () {\n    return this.hostTree.data.getItemLayout(this.dataIndex);\n  },\n  /**\n   * @param {string} [path]\n   * @return {module:echarts/model/Model}\n   */\n  getModel: function (path) {\n    if (this.dataIndex < 0) {\n      return;\n    }\n    var hostTree = this.hostTree;\n    var itemModel = hostTree.data.getItemModel(this.dataIndex);\n    return itemModel.getModel(path);\n  },\n  /**\n   * @example\n   *  setItemVisual('color', color);\n   *  setItemVisual({\n   *      'color': color\n   *  });\n   */\n  setVisual: function (key, value) {\n    this.dataIndex >= 0 && this.hostTree.data.setItemVisual(this.dataIndex, key, value);\n  },\n  /**\n   * Get item visual\n   */\n  getVisual: function (key, ignoreParent) {\n    return this.hostTree.data.getItemVisual(this.dataIndex, key, ignoreParent);\n  },\n  /**\n   * @public\n   * @return {number}\n   */\n  getRawIndex: function () {\n    return this.hostTree.data.getRawIndex(this.dataIndex);\n  },\n  /**\n   * @public\n   * @return {string}\n   */\n  getId: function () {\n    return this.hostTree.data.getId(this.dataIndex);\n  },\n  /**\n   * if this is an ancestor of another node\n   *\n   * @public\n   * @param {TreeNode} node another node\n   * @return {boolean} if is ancestor\n   */\n  isAncestorOf: function (node) {\n    var parent = node.parentNode;\n    while (parent) {\n      if (parent === this) {\n        return true;\n      }\n      parent = parent.parentNode;\n    }\n    return false;\n  },\n  /**\n   * if this is an descendant of another node\n   *\n   * @public\n   * @param {TreeNode} node another node\n   * @return {boolean} if is descendant\n   */\n  isDescendantOf: function (node) {\n    return node !== this && node.isAncestorOf(this);\n  }\n};\n/**\n * @constructor\n * @alias module:echarts/data/Tree\n * @param {module:echarts/model/Model} hostModel\n */\n\nfunction Tree(hostModel) {\n  /**\n   * @type {module:echarts/data/Tree~TreeNode}\n   * @readOnly\n   */\n  this.root;\n  /**\n   * @type {module:echarts/data/List}\n   * @readOnly\n   */\n\n  this.data;\n  /**\n   * Index of each item is the same as the raw index of coresponding list item.\n   * @private\n   * @type {Array.<module:echarts/data/Tree~TreeNode}\n   */\n\n  this._nodes = [];\n  /**\n   * @private\n   * @readOnly\n   * @type {module:echarts/model/Model}\n   */\n\n  this.hostModel = hostModel;\n}\nTree.prototype = {\n  constructor: Tree,\n  type: 'tree',\n  /**\n   * Travel this subtree (include this node).\n   * Usage:\n   *    node.eachNode(function () { ... }); // preorder\n   *    node.eachNode('preorder', function () { ... }); // preorder\n   *    node.eachNode('postorder', function () { ... }); // postorder\n   *    node.eachNode(\n   *        {order: 'postorder', attr: 'viewChildren'},\n   *        function () { ... }\n   *    ); // postorder\n   *\n   * @param {(Object|string)} options If string, means order.\n   * @param {string=} options.order 'preorder' or 'postorder'\n   * @param {string=} options.attr 'children' or 'viewChildren'\n   * @param {Function} cb\n   * @param {Object}   [context]\n   */\n  eachNode: function (options, cb, context) {\n    this.root.eachNode(options, cb, context);\n  },\n  /**\n   * @param {number} dataIndex\n   * @return {module:echarts/data/Tree~TreeNode}\n   */\n  getNodeByDataIndex: function (dataIndex) {\n    var rawIndex = this.data.getRawIndex(dataIndex);\n    return this._nodes[rawIndex];\n  },\n  /**\n   * @param {string} name\n   * @return {module:echarts/data/Tree~TreeNode}\n   */\n  getNodeByName: function (name) {\n    return this.root.getNodeByName(name);\n  },\n  /**\n   * Update item available by list,\n   * when list has been performed options like 'filterSelf' or 'map'.\n   */\n  update: function () {\n    var data = this.data;\n    var nodes = this._nodes;\n    for (var i = 0, len = nodes.length; i < len; i++) {\n      nodes[i].dataIndex = -1;\n    }\n    for (var i = 0, len = data.count(); i < len; i++) {\n      nodes[data.getRawIndex(i)].dataIndex = i;\n    }\n  },\n  /**\n   * Clear all layouts\n   */\n  clearLayouts: function () {\n    this.data.clearItemLayouts();\n  }\n};\n/**\n * data node format:\n * {\n *     name: ...\n *     value: ...\n *     children: [\n *         {\n *             name: ...\n *             value: ...\n *             children: ...\n *         },\n *         ...\n *     ]\n * }\n *\n * @static\n * @param {Object} dataRoot Root node.\n * @param {module:echarts/model/Model} hostModel\n * @return module:echarts/data/Tree\n */\n\nTree.createTree = function (dataRoot, hostModel, beforeLink) {\n  var tree = new Tree(hostModel);\n  var listData = [];\n  var dimMax = 1;\n  buildHierarchy(dataRoot);\n  function buildHierarchy(dataNode, parentNode) {\n    var value = dataNode.value;\n    dimMax = Math.max(dimMax, zrUtil.isArray(value) ? value.length : 1);\n    listData.push(dataNode);\n    var node = new TreeNode(dataNode.name, tree);\n    parentNode ? addChild(node, parentNode) : tree.root = node;\n    tree._nodes.push(node);\n    var children = dataNode.children;\n    if (children) {\n      for (var i = 0; i < children.length; i++) {\n        buildHierarchy(children[i], node);\n      }\n    }\n  }\n  tree.root.updateDepthAndHeight(0);\n  var dimensionsInfo = createDimensions(listData, {\n    coordDimensions: ['value'],\n    dimensionsCount: dimMax\n  });\n  var list = new List(dimensionsInfo, hostModel);\n  list.initData(listData);\n  beforeLink && beforeLink(list);\n  linkList({\n    mainData: list,\n    struct: tree,\n    structAttr: 'tree'\n  });\n  tree.update();\n  return tree;\n};\n/**\n * It is needed to consider the mess of 'list', 'hostModel' when creating a TreeNote,\n * so this function is not ready and not necessary to be public.\n *\n * @param {(module:echarts/data/Tree~TreeNode|Object)} child\n */\n\nfunction addChild(child, node) {\n  var children = node.children;\n  if (child.parentNode === node) {\n    return;\n  }\n  children.push(child);\n  child.parentNode = node;\n}\nvar _default = Tree;\nmodule.exports = _default;","map":{"version":3,"names":["zrUtil","require","linkList","List","createDimensions","TreeNode","name","hostTree","depth","height","parentNode","dataIndex","children","viewChildren","prototype","constructor","isRemoved","eachNode","options","cb","context","isString","order","attr","suppressVisitSub","call","i","length","updateDepthAndHeight","child","getNodeById","id","getId","len","res","contains","node","getAncestors","includeSelf","ancestors","push","reverse","getValue","dimension","data","get","getDimension","setLayout","layout","merge","setItemLayout","getLayout","getItemLayout","getModel","path","itemModel","getItemModel","setVisual","key","value","setItemVisual","getVisual","ignoreParent","getItemVisual","getRawIndex","isAncestorOf","parent","isDescendantOf","Tree","hostModel","root","_nodes","type","getNodeByDataIndex","rawIndex","getNodeByName","update","nodes","count","clearLayouts","clearItemLayouts","createTree","dataRoot","beforeLink","tree","listData","dimMax","buildHierarchy","dataNode","Math","max","isArray","addChild","dimensionsInfo","coordDimensions","dimensionsCount","list","initData","mainData","struct","structAttr","_default","module","exports"],"sources":["/Users/mac/Desktop/vue_bsm/vue3_bsm/node_modules/echarts/lib/data/Tree.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar linkList = require(\"./helper/linkList\");\n\nvar List = require(\"./List\");\n\nvar createDimensions = require(\"./helper/createDimensions\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Tree data structure\n *\n * @module echarts/data/Tree\n */\n\n/**\n * @constructor module:echarts/data/Tree~TreeNode\n * @param {string} name\n * @param {module:echarts/data/Tree} hostTree\n */\nvar TreeNode = function (name, hostTree) {\n  /**\n   * @type {string}\n   */\n  this.name = name || '';\n  /**\n   * Depth of node\n   *\n   * @type {number}\n   * @readOnly\n   */\n\n  this.depth = 0;\n  /**\n   * Height of the subtree rooted at this node.\n   * @type {number}\n   * @readOnly\n   */\n\n  this.height = 0;\n  /**\n   * @type {module:echarts/data/Tree~TreeNode}\n   * @readOnly\n   */\n\n  this.parentNode = null;\n  /**\n   * Reference to list item.\n   * Do not persistent dataIndex outside,\n   * besause it may be changed by list.\n   * If dataIndex -1,\n   * this node is logical deleted (filtered) in list.\n   *\n   * @type {Object}\n   * @readOnly\n   */\n\n  this.dataIndex = -1;\n  /**\n   * @type {Array.<module:echarts/data/Tree~TreeNode>}\n   * @readOnly\n   */\n\n  this.children = [];\n  /**\n   * @type {Array.<module:echarts/data/Tree~TreeNode>}\n   * @pubilc\n   */\n\n  this.viewChildren = [];\n  /**\n   * @type {moduel:echarts/data/Tree}\n   * @readOnly\n   */\n\n  this.hostTree = hostTree;\n};\n\nTreeNode.prototype = {\n  constructor: TreeNode,\n\n  /**\n   * The node is removed.\n   * @return {boolean} is removed.\n   */\n  isRemoved: function () {\n    return this.dataIndex < 0;\n  },\n\n  /**\n   * Travel this subtree (include this node).\n   * Usage:\n   *    node.eachNode(function () { ... }); // preorder\n   *    node.eachNode('preorder', function () { ... }); // preorder\n   *    node.eachNode('postorder', function () { ... }); // postorder\n   *    node.eachNode(\n   *        {order: 'postorder', attr: 'viewChildren'},\n   *        function () { ... }\n   *    ); // postorder\n   *\n   * @param {(Object|string)} options If string, means order.\n   * @param {string=} options.order 'preorder' or 'postorder'\n   * @param {string=} options.attr 'children' or 'viewChildren'\n   * @param {Function} cb If in preorder and return false,\n   *                      its subtree will not be visited.\n   * @param {Object} [context]\n   */\n  eachNode: function (options, cb, context) {\n    if (typeof options === 'function') {\n      context = cb;\n      cb = options;\n      options = null;\n    }\n\n    options = options || {};\n\n    if (zrUtil.isString(options)) {\n      options = {\n        order: options\n      };\n    }\n\n    var order = options.order || 'preorder';\n    var children = this[options.attr || 'children'];\n    var suppressVisitSub;\n    order === 'preorder' && (suppressVisitSub = cb.call(context, this));\n\n    for (var i = 0; !suppressVisitSub && i < children.length; i++) {\n      children[i].eachNode(options, cb, context);\n    }\n\n    order === 'postorder' && cb.call(context, this);\n  },\n\n  /**\n   * Update depth and height of this subtree.\n   *\n   * @param  {number} depth\n   */\n  updateDepthAndHeight: function (depth) {\n    var height = 0;\n    this.depth = depth;\n\n    for (var i = 0; i < this.children.length; i++) {\n      var child = this.children[i];\n      child.updateDepthAndHeight(depth + 1);\n\n      if (child.height > height) {\n        height = child.height;\n      }\n    }\n\n    this.height = height + 1;\n  },\n\n  /**\n   * @param  {string} id\n   * @return {module:echarts/data/Tree~TreeNode}\n   */\n  getNodeById: function (id) {\n    if (this.getId() === id) {\n      return this;\n    }\n\n    for (var i = 0, children = this.children, len = children.length; i < len; i++) {\n      var res = children[i].getNodeById(id);\n\n      if (res) {\n        return res;\n      }\n    }\n  },\n\n  /**\n   * @param {module:echarts/data/Tree~TreeNode} node\n   * @return {boolean}\n   */\n  contains: function (node) {\n    if (node === this) {\n      return true;\n    }\n\n    for (var i = 0, children = this.children, len = children.length; i < len; i++) {\n      var res = children[i].contains(node);\n\n      if (res) {\n        return res;\n      }\n    }\n  },\n\n  /**\n   * @param {boolean} includeSelf Default false.\n   * @return {Array.<module:echarts/data/Tree~TreeNode>} order: [root, child, grandchild, ...]\n   */\n  getAncestors: function (includeSelf) {\n    var ancestors = [];\n    var node = includeSelf ? this : this.parentNode;\n\n    while (node) {\n      ancestors.push(node);\n      node = node.parentNode;\n    }\n\n    ancestors.reverse();\n    return ancestors;\n  },\n\n  /**\n   * @param {string|Array=} [dimension='value'] Default 'value'. can be 0, 1, 2, 3\n   * @return {number} Value.\n   */\n  getValue: function (dimension) {\n    var data = this.hostTree.data;\n    return data.get(data.getDimension(dimension || 'value'), this.dataIndex);\n  },\n\n  /**\n   * @param {Object} layout\n   * @param {boolean=} [merge=false]\n   */\n  setLayout: function (layout, merge) {\n    this.dataIndex >= 0 && this.hostTree.data.setItemLayout(this.dataIndex, layout, merge);\n  },\n\n  /**\n   * @return {Object} layout\n   */\n  getLayout: function () {\n    return this.hostTree.data.getItemLayout(this.dataIndex);\n  },\n\n  /**\n   * @param {string} [path]\n   * @return {module:echarts/model/Model}\n   */\n  getModel: function (path) {\n    if (this.dataIndex < 0) {\n      return;\n    }\n\n    var hostTree = this.hostTree;\n    var itemModel = hostTree.data.getItemModel(this.dataIndex);\n    return itemModel.getModel(path);\n  },\n\n  /**\n   * @example\n   *  setItemVisual('color', color);\n   *  setItemVisual({\n   *      'color': color\n   *  });\n   */\n  setVisual: function (key, value) {\n    this.dataIndex >= 0 && this.hostTree.data.setItemVisual(this.dataIndex, key, value);\n  },\n\n  /**\n   * Get item visual\n   */\n  getVisual: function (key, ignoreParent) {\n    return this.hostTree.data.getItemVisual(this.dataIndex, key, ignoreParent);\n  },\n\n  /**\n   * @public\n   * @return {number}\n   */\n  getRawIndex: function () {\n    return this.hostTree.data.getRawIndex(this.dataIndex);\n  },\n\n  /**\n   * @public\n   * @return {string}\n   */\n  getId: function () {\n    return this.hostTree.data.getId(this.dataIndex);\n  },\n\n  /**\n   * if this is an ancestor of another node\n   *\n   * @public\n   * @param {TreeNode} node another node\n   * @return {boolean} if is ancestor\n   */\n  isAncestorOf: function (node) {\n    var parent = node.parentNode;\n\n    while (parent) {\n      if (parent === this) {\n        return true;\n      }\n\n      parent = parent.parentNode;\n    }\n\n    return false;\n  },\n\n  /**\n   * if this is an descendant of another node\n   *\n   * @public\n   * @param {TreeNode} node another node\n   * @return {boolean} if is descendant\n   */\n  isDescendantOf: function (node) {\n    return node !== this && node.isAncestorOf(this);\n  }\n};\n/**\n * @constructor\n * @alias module:echarts/data/Tree\n * @param {module:echarts/model/Model} hostModel\n */\n\nfunction Tree(hostModel) {\n  /**\n   * @type {module:echarts/data/Tree~TreeNode}\n   * @readOnly\n   */\n  this.root;\n  /**\n   * @type {module:echarts/data/List}\n   * @readOnly\n   */\n\n  this.data;\n  /**\n   * Index of each item is the same as the raw index of coresponding list item.\n   * @private\n   * @type {Array.<module:echarts/data/Tree~TreeNode}\n   */\n\n  this._nodes = [];\n  /**\n   * @private\n   * @readOnly\n   * @type {module:echarts/model/Model}\n   */\n\n  this.hostModel = hostModel;\n}\n\nTree.prototype = {\n  constructor: Tree,\n  type: 'tree',\n\n  /**\n   * Travel this subtree (include this node).\n   * Usage:\n   *    node.eachNode(function () { ... }); // preorder\n   *    node.eachNode('preorder', function () { ... }); // preorder\n   *    node.eachNode('postorder', function () { ... }); // postorder\n   *    node.eachNode(\n   *        {order: 'postorder', attr: 'viewChildren'},\n   *        function () { ... }\n   *    ); // postorder\n   *\n   * @param {(Object|string)} options If string, means order.\n   * @param {string=} options.order 'preorder' or 'postorder'\n   * @param {string=} options.attr 'children' or 'viewChildren'\n   * @param {Function} cb\n   * @param {Object}   [context]\n   */\n  eachNode: function (options, cb, context) {\n    this.root.eachNode(options, cb, context);\n  },\n\n  /**\n   * @param {number} dataIndex\n   * @return {module:echarts/data/Tree~TreeNode}\n   */\n  getNodeByDataIndex: function (dataIndex) {\n    var rawIndex = this.data.getRawIndex(dataIndex);\n    return this._nodes[rawIndex];\n  },\n\n  /**\n   * @param {string} name\n   * @return {module:echarts/data/Tree~TreeNode}\n   */\n  getNodeByName: function (name) {\n    return this.root.getNodeByName(name);\n  },\n\n  /**\n   * Update item available by list,\n   * when list has been performed options like 'filterSelf' or 'map'.\n   */\n  update: function () {\n    var data = this.data;\n    var nodes = this._nodes;\n\n    for (var i = 0, len = nodes.length; i < len; i++) {\n      nodes[i].dataIndex = -1;\n    }\n\n    for (var i = 0, len = data.count(); i < len; i++) {\n      nodes[data.getRawIndex(i)].dataIndex = i;\n    }\n  },\n\n  /**\n   * Clear all layouts\n   */\n  clearLayouts: function () {\n    this.data.clearItemLayouts();\n  }\n};\n/**\n * data node format:\n * {\n *     name: ...\n *     value: ...\n *     children: [\n *         {\n *             name: ...\n *             value: ...\n *             children: ...\n *         },\n *         ...\n *     ]\n * }\n *\n * @static\n * @param {Object} dataRoot Root node.\n * @param {module:echarts/model/Model} hostModel\n * @return module:echarts/data/Tree\n */\n\nTree.createTree = function (dataRoot, hostModel, beforeLink) {\n  var tree = new Tree(hostModel);\n  var listData = [];\n  var dimMax = 1;\n  buildHierarchy(dataRoot);\n\n  function buildHierarchy(dataNode, parentNode) {\n    var value = dataNode.value;\n    dimMax = Math.max(dimMax, zrUtil.isArray(value) ? value.length : 1);\n    listData.push(dataNode);\n    var node = new TreeNode(dataNode.name, tree);\n    parentNode ? addChild(node, parentNode) : tree.root = node;\n\n    tree._nodes.push(node);\n\n    var children = dataNode.children;\n\n    if (children) {\n      for (var i = 0; i < children.length; i++) {\n        buildHierarchy(children[i], node);\n      }\n    }\n  }\n\n  tree.root.updateDepthAndHeight(0);\n  var dimensionsInfo = createDimensions(listData, {\n    coordDimensions: ['value'],\n    dimensionsCount: dimMax\n  });\n  var list = new List(dimensionsInfo, hostModel);\n  list.initData(listData);\n  beforeLink && beforeLink(list);\n  linkList({\n    mainData: list,\n    struct: tree,\n    structAttr: 'tree'\n  });\n  tree.update();\n  return tree;\n};\n/**\n * It is needed to consider the mess of 'list', 'hostModel' when creating a TreeNote,\n * so this function is not ready and not necessary to be public.\n *\n * @param {(module:echarts/data/Tree~TreeNode|Object)} child\n */\n\n\nfunction addChild(child, node) {\n  var children = node.children;\n\n  if (child.parentNode === node) {\n    return;\n  }\n\n  children.push(child);\n  child.parentNode = node;\n}\n\nvar _default = Tree;\nmodule.exports = _default;"],"mappings":";AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AAE7C,IAAIC,QAAQ,GAAGD,OAAO,CAAC,mBAAmB,CAAC;AAE3C,IAAIE,IAAI,GAAGF,OAAO,CAAC,QAAQ,CAAC;AAE5B,IAAIG,gBAAgB,GAAGH,OAAO,CAAC,2BAA2B,CAAC;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAII,QAAQ,GAAG,SAAAA,CAAUC,IAAI,EAAEC,QAAQ,EAAE;EACvC;AACF;AACA;EACE,IAAI,CAACD,IAAI,GAAGA,IAAI,IAAI,EAAE;EACtB;AACF;AACA;AACA;AACA;AACA;;EAEE,IAAI,CAACE,KAAK,GAAG,CAAC;EACd;AACF;AACA;AACA;AACA;;EAEE,IAAI,CAACC,MAAM,GAAG,CAAC;EACf;AACF;AACA;AACA;;EAEE,IAAI,CAACC,UAAU,GAAG,IAAI;EACtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE,IAAI,CAACC,SAAS,GAAG,CAAC,CAAC;EACnB;AACF;AACA;AACA;;EAEE,IAAI,CAACC,QAAQ,GAAG,EAAE;EAClB;AACF;AACA;AACA;;EAEE,IAAI,CAACC,YAAY,GAAG,EAAE;EACtB;AACF;AACA;AACA;;EAEE,IAAI,CAACN,QAAQ,GAAGA,QAAQ;AAC1B,CAAC;AAEDF,QAAQ,CAACS,SAAS,GAAG;EACnBC,WAAW,EAAEV,QAAQ;EAErB;AACF;AACA;AACA;EACEW,SAAS,EAAE,SAAAA,CAAA,EAAY;IACrB,OAAO,IAAI,CAACL,SAAS,GAAG,CAAC;EAC3B,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;E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"},"metadata":{},"sourceType":"script","externalDependencies":[]}