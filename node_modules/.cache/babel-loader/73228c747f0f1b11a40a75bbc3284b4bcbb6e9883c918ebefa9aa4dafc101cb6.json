{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar layout = require(\"../../util/layout\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/*\n* A third-party license is embeded for some of the code in this file:\n* The tree layoutHelper implementation was originally copied from\n* \"d3.js\"(https://github.com/d3/d3-hierarchy) with\n* some modifications made for this project.\n* (see more details in the comment of the specific method below.)\n* The use of the source code of this file is also subject to the terms\n* and consitions of the licence of \"d3.js\" (BSD-3Clause, see\n* </licenses/LICENSE-d3>).\n*/\n\n/**\n * @file The layout algorithm of node-link tree diagrams. Here we using Reingold-Tilford algorithm to drawing\n *       the tree.\n */\n\n/**\n * Initialize all computational message for following algorithm.\n *\n * @param  {module:echarts/data/Tree~TreeNode} root   The virtual root of the tree.\n */\nfunction init(root) {\n  root.hierNode = {\n    defaultAncestor: null,\n    ancestor: root,\n    prelim: 0,\n    modifier: 0,\n    change: 0,\n    shift: 0,\n    i: 0,\n    thread: null\n  };\n  var nodes = [root];\n  var node;\n  var children;\n  while (node = nodes.pop()) {\n    // jshint ignore:line\n    children = node.children;\n    if (node.isExpand && children.length) {\n      var n = children.length;\n      for (var i = n - 1; i >= 0; i--) {\n        var child = children[i];\n        child.hierNode = {\n          defaultAncestor: null,\n          ancestor: child,\n          prelim: 0,\n          modifier: 0,\n          change: 0,\n          shift: 0,\n          i: i,\n          thread: null\n        };\n        nodes.push(child);\n      }\n    }\n  }\n}\n/**\n * The implementation of this function was originally copied from \"d3.js\"\n * <https://github.com/d3/d3-hierarchy/blob/4c1f038f2725d6eae2e49b61d01456400694bac4/src/tree.js>\n * with some modifications made for this program.\n * See the license statement at the head of this file.\n *\n * Computes a preliminary x coordinate for node. Before that, this function is\n * applied recursively to the children of node, as well as the function\n * apportion(). After spacing out the children by calling executeShifts(), the\n * node is placed to the midpoint of its outermost children.\n *\n * @param  {module:echarts/data/Tree~TreeNode} node\n * @param {Function} separation\n */\n\nfunction firstWalk(node, separation) {\n  var children = node.isExpand ? node.children : [];\n  var siblings = node.parentNode.children;\n  var subtreeW = node.hierNode.i ? siblings[node.hierNode.i - 1] : null;\n  if (children.length) {\n    executeShifts(node);\n    var midPoint = (children[0].hierNode.prelim + children[children.length - 1].hierNode.prelim) / 2;\n    if (subtreeW) {\n      node.hierNode.prelim = subtreeW.hierNode.prelim + separation(node, subtreeW);\n      node.hierNode.modifier = node.hierNode.prelim - midPoint;\n    } else {\n      node.hierNode.prelim = midPoint;\n    }\n  } else if (subtreeW) {\n    node.hierNode.prelim = subtreeW.hierNode.prelim + separation(node, subtreeW);\n  }\n  node.parentNode.hierNode.defaultAncestor = apportion(node, subtreeW, node.parentNode.hierNode.defaultAncestor || siblings[0], separation);\n}\n/**\n * The implementation of this function was originally copied from \"d3.js\"\n * <https://github.com/d3/d3-hierarchy/blob/4c1f038f2725d6eae2e49b61d01456400694bac4/src/tree.js>\n * with some modifications made for this program.\n * See the license statement at the head of this file.\n *\n * Computes all real x-coordinates by summing up the modifiers recursively.\n *\n * @param  {module:echarts/data/Tree~TreeNode} node\n */\n\nfunction secondWalk(node) {\n  var nodeX = node.hierNode.prelim + node.parentNode.hierNode.modifier;\n  node.setLayout({\n    x: nodeX\n  }, true);\n  node.hierNode.modifier += node.parentNode.hierNode.modifier;\n}\nfunction separation(cb) {\n  return arguments.length ? cb : defaultSeparation;\n}\n/**\n * Transform the common coordinate to radial coordinate.\n *\n * @param  {number} x\n * @param  {number} y\n * @return {Object}\n */\n\nfunction radialCoordinate(x, y) {\n  var radialCoor = {};\n  x -= Math.PI / 2;\n  radialCoor.x = y * Math.cos(x);\n  radialCoor.y = y * Math.sin(x);\n  return radialCoor;\n}\n/**\n * Get the layout position of the whole view.\n *\n * @param {module:echarts/model/Series} seriesModel  the model object of sankey series\n * @param {module:echarts/ExtensionAPI} api  provide the API list that the developer can call\n * @return {module:zrender/core/BoundingRect}  size of rect to draw the sankey view\n */\n\nfunction getViewRect(seriesModel, api) {\n  return layout.getLayoutRect(seriesModel.getBoxLayoutParams(), {\n    width: api.getWidth(),\n    height: api.getHeight()\n  });\n}\n/**\n * All other shifts, applied to the smaller subtrees between w- and w+, are\n * performed by this function.\n *\n * The implementation of this function was originally copied from \"d3.js\"\n * <https://github.com/d3/d3-hierarchy/blob/4c1f038f2725d6eae2e49b61d01456400694bac4/src/tree.js>\n * with some modifications made for this program.\n * See the license statement at the head of this file.\n *\n * @param  {module:echarts/data/Tree~TreeNode} node\n */\n\nfunction executeShifts(node) {\n  var children = node.children;\n  var n = children.length;\n  var shift = 0;\n  var change = 0;\n  while (--n >= 0) {\n    var child = children[n];\n    child.hierNode.prelim += shift;\n    child.hierNode.modifier += shift;\n    change += child.hierNode.change;\n    shift += child.hierNode.shift + change;\n  }\n}\n/**\n * The implementation of this function was originally copied from \"d3.js\"\n * <https://github.com/d3/d3-hierarchy/blob/4c1f038f2725d6eae2e49b61d01456400694bac4/src/tree.js>\n * with some modifications made for this program.\n * See the license statement at the head of this file.\n *\n * The core of the algorithm. Here, a new subtree is combined with the\n * previous subtrees. Threads are used to traverse the inside and outside\n * contours of the left and right subtree up to the highest common level.\n * Whenever two nodes of the inside contours conflict, we compute the left\n * one of the greatest uncommon ancestors using the function nextAncestor()\n * and call moveSubtree() to shift the subtree and prepare the shifts of\n * smaller subtrees. Finally, we add a new thread (if necessary).\n *\n * @param  {module:echarts/data/Tree~TreeNode} subtreeV\n * @param  {module:echarts/data/Tree~TreeNode} subtreeW\n * @param  {module:echarts/data/Tree~TreeNode} ancestor\n * @param  {Function} separation\n * @return {module:echarts/data/Tree~TreeNode}\n */\n\nfunction apportion(subtreeV, subtreeW, ancestor, separation) {\n  if (subtreeW) {\n    var nodeOutRight = subtreeV;\n    var nodeInRight = subtreeV;\n    var nodeOutLeft = nodeInRight.parentNode.children[0];\n    var nodeInLeft = subtreeW;\n    var sumOutRight = nodeOutRight.hierNode.modifier;\n    var sumInRight = nodeInRight.hierNode.modifier;\n    var sumOutLeft = nodeOutLeft.hierNode.modifier;\n    var sumInLeft = nodeInLeft.hierNode.modifier;\n    while (nodeInLeft = nextRight(nodeInLeft), nodeInRight = nextLeft(nodeInRight), nodeInLeft && nodeInRight) {\n      nodeOutRight = nextRight(nodeOutRight);\n      nodeOutLeft = nextLeft(nodeOutLeft);\n      nodeOutRight.hierNode.ancestor = subtreeV;\n      var shift = nodeInLeft.hierNode.prelim + sumInLeft - nodeInRight.hierNode.prelim - sumInRight + separation(nodeInLeft, nodeInRight);\n      if (shift > 0) {\n        moveSubtree(nextAncestor(nodeInLeft, subtreeV, ancestor), subtreeV, shift);\n        sumInRight += shift;\n        sumOutRight += shift;\n      }\n      sumInLeft += nodeInLeft.hierNode.modifier;\n      sumInRight += nodeInRight.hierNode.modifier;\n      sumOutRight += nodeOutRight.hierNode.modifier;\n      sumOutLeft += nodeOutLeft.hierNode.modifier;\n    }\n    if (nodeInLeft && !nextRight(nodeOutRight)) {\n      nodeOutRight.hierNode.thread = nodeInLeft;\n      nodeOutRight.hierNode.modifier += sumInLeft - sumOutRight;\n    }\n    if (nodeInRight && !nextLeft(nodeOutLeft)) {\n      nodeOutLeft.hierNode.thread = nodeInRight;\n      nodeOutLeft.hierNode.modifier += sumInRight - sumOutLeft;\n      ancestor = subtreeV;\n    }\n  }\n  return ancestor;\n}\n/**\n * This function is used to traverse the right contour of a subtree.\n * It returns the rightmost child of node or the thread of node. The function\n * returns null if and only if node is on the highest depth of its subtree.\n *\n * @param  {module:echarts/data/Tree~TreeNode} node\n * @return {module:echarts/data/Tree~TreeNode}\n */\n\nfunction nextRight(node) {\n  var children = node.children;\n  return children.length && node.isExpand ? children[children.length - 1] : node.hierNode.thread;\n}\n/**\n * This function is used to traverse the left contour of a subtree (or a subforest).\n * It returns the leftmost child of node or the thread of node. The function\n * returns null if and only if node is on the highest depth of its subtree.\n *\n * @param  {module:echarts/data/Tree~TreeNode} node\n * @return {module:echarts/data/Tree~TreeNode}\n */\n\nfunction nextLeft(node) {\n  var children = node.children;\n  return children.length && node.isExpand ? children[0] : node.hierNode.thread;\n}\n/**\n * If nodeInLeft’s ancestor is a sibling of node, returns nodeInLeft’s ancestor.\n * Otherwise, returns the specified ancestor.\n *\n * @param  {module:echarts/data/Tree~TreeNode} nodeInLeft\n * @param  {module:echarts/data/Tree~TreeNode} node\n * @param  {module:echarts/data/Tree~TreeNode} ancestor\n * @return {module:echarts/data/Tree~TreeNode}\n */\n\nfunction nextAncestor(nodeInLeft, node, ancestor) {\n  return nodeInLeft.hierNode.ancestor.parentNode === node.parentNode ? nodeInLeft.hierNode.ancestor : ancestor;\n}\n/**\n * The implementation of this function was originally copied from \"d3.js\"\n * <https://github.com/d3/d3-hierarchy/blob/4c1f038f2725d6eae2e49b61d01456400694bac4/src/tree.js>\n * with some modifications made for this program.\n * See the license statement at the head of this file.\n *\n * Shifts the current subtree rooted at wr.\n * This is done by increasing prelim(w+) and modifier(w+) by shift.\n *\n * @param  {module:echarts/data/Tree~TreeNode} wl\n * @param  {module:echarts/data/Tree~TreeNode} wr\n * @param  {number} shift [description]\n */\n\nfunction moveSubtree(wl, wr, shift) {\n  var change = shift / (wr.hierNode.i - wl.hierNode.i);\n  wr.hierNode.change -= change;\n  wr.hierNode.shift += shift;\n  wr.hierNode.modifier += shift;\n  wr.hierNode.prelim += shift;\n  wl.hierNode.change += change;\n}\n/**\n * The implementation of this function was originally copied from \"d3.js\"\n * <https://github.com/d3/d3-hierarchy/blob/4c1f038f2725d6eae2e49b61d01456400694bac4/src/tree.js>\n * with some modifications made for this program.\n * See the license statement at the head of this file.\n */\n\nfunction defaultSeparation(node1, node2) {\n  return node1.parentNode === node2.parentNode ? 1 : 2;\n}\nexports.init = init;\nexports.firstWalk = firstWalk;\nexports.secondWalk = secondWalk;\nexports.separation = separation;\nexports.radialCoordinate = radialCoordinate;\nexports.getViewRect = getViewRect;","map":{"version":3,"names":["layout","require","init","root","hierNode","defaultAncestor","ancestor","prelim","modifier","change","shift","i","thread","nodes","node","children","pop","isExpand","length","n","child","push","firstWalk","separation","siblings","parentNode","subtreeW","executeShifts","midPoint","apportion","secondWalk","nodeX","setLayout","x","cb","arguments","defaultSeparation","radialCoordinate","y","radialCoor","Math","PI","cos","sin","getViewRect","seriesModel","api","getLayoutRect","getBoxLayoutParams","width","getWidth","height","getHeight","subtreeV","nodeOutRight","nodeInRight","nodeOutLeft","nodeInLeft","sumOutRight","sumInRight","sumOutLeft","sumInLeft","nextRight","nextLeft","moveSubtree","nextAncestor","wl","wr","node1","node2","exports"],"sources":["/Users/mac/Desktop/vue_bsm/vue3_bsm/node_modules/echarts/lib/chart/tree/layoutHelper.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar layout = require(\"../../util/layout\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/*\n* A third-party license is embeded for some of the code in this file:\n* The tree layoutHelper implementation was originally copied from\n* \"d3.js\"(https://github.com/d3/d3-hierarchy) with\n* some modifications made for this project.\n* (see more details in the comment of the specific method below.)\n* The use of the source code of this file is also subject to the terms\n* and consitions of the licence of \"d3.js\" (BSD-3Clause, see\n* </licenses/LICENSE-d3>).\n*/\n\n/**\n * @file The layout algorithm of node-link tree diagrams. Here we using Reingold-Tilford algorithm to drawing\n *       the tree.\n */\n\n/**\n * Initialize all computational message for following algorithm.\n *\n * @param  {module:echarts/data/Tree~TreeNode} root   The virtual root of the tree.\n */\nfunction init(root) {\n  root.hierNode = {\n    defaultAncestor: null,\n    ancestor: root,\n    prelim: 0,\n    modifier: 0,\n    change: 0,\n    shift: 0,\n    i: 0,\n    thread: null\n  };\n  var nodes = [root];\n  var node;\n  var children;\n\n  while (node = nodes.pop()) {\n    // jshint ignore:line\n    children = node.children;\n\n    if (node.isExpand && children.length) {\n      var n = children.length;\n\n      for (var i = n - 1; i >= 0; i--) {\n        var child = children[i];\n        child.hierNode = {\n          defaultAncestor: null,\n          ancestor: child,\n          prelim: 0,\n          modifier: 0,\n          change: 0,\n          shift: 0,\n          i: i,\n          thread: null\n        };\n        nodes.push(child);\n      }\n    }\n  }\n}\n/**\n * The implementation of this function was originally copied from \"d3.js\"\n * <https://github.com/d3/d3-hierarchy/blob/4c1f038f2725d6eae2e49b61d01456400694bac4/src/tree.js>\n * with some modifications made for this program.\n * See the license statement at the head of this file.\n *\n * Computes a preliminary x coordinate for node. Before that, this function is\n * applied recursively to the children of node, as well as the function\n * apportion(). After spacing out the children by calling executeShifts(), the\n * node is placed to the midpoint of its outermost children.\n *\n * @param  {module:echarts/data/Tree~TreeNode} node\n * @param {Function} separation\n */\n\n\nfunction firstWalk(node, separation) {\n  var children = node.isExpand ? node.children : [];\n  var siblings = node.parentNode.children;\n  var subtreeW = node.hierNode.i ? siblings[node.hierNode.i - 1] : null;\n\n  if (children.length) {\n    executeShifts(node);\n    var midPoint = (children[0].hierNode.prelim + children[children.length - 1].hierNode.prelim) / 2;\n\n    if (subtreeW) {\n      node.hierNode.prelim = subtreeW.hierNode.prelim + separation(node, subtreeW);\n      node.hierNode.modifier = node.hierNode.prelim - midPoint;\n    } else {\n      node.hierNode.prelim = midPoint;\n    }\n  } else if (subtreeW) {\n    node.hierNode.prelim = subtreeW.hierNode.prelim + separation(node, subtreeW);\n  }\n\n  node.parentNode.hierNode.defaultAncestor = apportion(node, subtreeW, node.parentNode.hierNode.defaultAncestor || siblings[0], separation);\n}\n/**\n * The implementation of this function was originally copied from \"d3.js\"\n * <https://github.com/d3/d3-hierarchy/blob/4c1f038f2725d6eae2e49b61d01456400694bac4/src/tree.js>\n * with some modifications made for this program.\n * See the license statement at the head of this file.\n *\n * Computes all real x-coordinates by summing up the modifiers recursively.\n *\n * @param  {module:echarts/data/Tree~TreeNode} node\n */\n\n\nfunction secondWalk(node) {\n  var nodeX = node.hierNode.prelim + node.parentNode.hierNode.modifier;\n  node.setLayout({\n    x: nodeX\n  }, true);\n  node.hierNode.modifier += node.parentNode.hierNode.modifier;\n}\n\nfunction separation(cb) {\n  return arguments.length ? cb : defaultSeparation;\n}\n/**\n * Transform the common coordinate to radial coordinate.\n *\n * @param  {number} x\n * @param  {number} y\n * @return {Object}\n */\n\n\nfunction radialCoordinate(x, y) {\n  var radialCoor = {};\n  x -= Math.PI / 2;\n  radialCoor.x = y * Math.cos(x);\n  radialCoor.y = y * Math.sin(x);\n  return radialCoor;\n}\n/**\n * Get the layout position of the whole view.\n *\n * @param {module:echarts/model/Series} seriesModel  the model object of sankey series\n * @param {module:echarts/ExtensionAPI} api  provide the API list that the developer can call\n * @return {module:zrender/core/BoundingRect}  size of rect to draw the sankey view\n */\n\n\nfunction getViewRect(seriesModel, api) {\n  return layout.getLayoutRect(seriesModel.getBoxLayoutParams(), {\n    width: api.getWidth(),\n    height: api.getHeight()\n  });\n}\n/**\n * All other shifts, applied to the smaller subtrees between w- and w+, are\n * performed by this function.\n *\n * The implementation of this function was originally copied from \"d3.js\"\n * <https://github.com/d3/d3-hierarchy/blob/4c1f038f2725d6eae2e49b61d01456400694bac4/src/tree.js>\n * with some modifications made for this program.\n * See the license statement at the head of this file.\n *\n * @param  {module:echarts/data/Tree~TreeNode} node\n */\n\n\nfunction executeShifts(node) {\n  var children = node.children;\n  var n = children.length;\n  var shift = 0;\n  var change = 0;\n\n  while (--n >= 0) {\n    var child = children[n];\n    child.hierNode.prelim += shift;\n    child.hierNode.modifier += shift;\n    change += child.hierNode.change;\n    shift += child.hierNode.shift + change;\n  }\n}\n/**\n * The implementation of this function was originally copied from \"d3.js\"\n * <https://github.com/d3/d3-hierarchy/blob/4c1f038f2725d6eae2e49b61d01456400694bac4/src/tree.js>\n * with some modifications made for this program.\n * See the license statement at the head of this file.\n *\n * The core of the algorithm. Here, a new subtree is combined with the\n * previous subtrees. Threads are used to traverse the inside and outside\n * contours of the left and right subtree up to the highest common level.\n * Whenever two nodes of the inside contours conflict, we compute the left\n * one of the greatest uncommon ancestors using the function nextAncestor()\n * and call moveSubtree() to shift the subtree and prepare the shifts of\n * smaller subtrees. Finally, we add a new thread (if necessary).\n *\n * @param  {module:echarts/data/Tree~TreeNode} subtreeV\n * @param  {module:echarts/data/Tree~TreeNode} subtreeW\n * @param  {module:echarts/data/Tree~TreeNode} ancestor\n * @param  {Function} separation\n * @return {module:echarts/data/Tree~TreeNode}\n */\n\n\nfunction apportion(subtreeV, subtreeW, ancestor, separation) {\n  if (subtreeW) {\n    var nodeOutRight = subtreeV;\n    var nodeInRight = subtreeV;\n    var nodeOutLeft = nodeInRight.parentNode.children[0];\n    var nodeInLeft = subtreeW;\n    var sumOutRight = nodeOutRight.hierNode.modifier;\n    var sumInRight = nodeInRight.hierNode.modifier;\n    var sumOutLeft = nodeOutLeft.hierNode.modifier;\n    var sumInLeft = nodeInLeft.hierNode.modifier;\n\n    while (nodeInLeft = nextRight(nodeInLeft), nodeInRight = nextLeft(nodeInRight), nodeInLeft && nodeInRight) {\n      nodeOutRight = nextRight(nodeOutRight);\n      nodeOutLeft = nextLeft(nodeOutLeft);\n      nodeOutRight.hierNode.ancestor = subtreeV;\n      var shift = nodeInLeft.hierNode.prelim + sumInLeft - nodeInRight.hierNode.prelim - sumInRight + separation(nodeInLeft, nodeInRight);\n\n      if (shift > 0) {\n        moveSubtree(nextAncestor(nodeInLeft, subtreeV, ancestor), subtreeV, shift);\n        sumInRight += shift;\n        sumOutRight += shift;\n      }\n\n      sumInLeft += nodeInLeft.hierNode.modifier;\n      sumInRight += nodeInRight.hierNode.modifier;\n      sumOutRight += nodeOutRight.hierNode.modifier;\n      sumOutLeft += nodeOutLeft.hierNode.modifier;\n    }\n\n    if (nodeInLeft && !nextRight(nodeOutRight)) {\n      nodeOutRight.hierNode.thread = nodeInLeft;\n      nodeOutRight.hierNode.modifier += sumInLeft - sumOutRight;\n    }\n\n    if (nodeInRight && !nextLeft(nodeOutLeft)) {\n      nodeOutLeft.hierNode.thread = nodeInRight;\n      nodeOutLeft.hierNode.modifier += sumInRight - sumOutLeft;\n      ancestor = subtreeV;\n    }\n  }\n\n  return ancestor;\n}\n/**\n * This function is used to traverse the right contour of a subtree.\n * It returns the rightmost child of node or the thread of node. The function\n * returns null if and only if node is on the highest depth of its subtree.\n *\n * @param  {module:echarts/data/Tree~TreeNode} node\n * @return {module:echarts/data/Tree~TreeNode}\n */\n\n\nfunction nextRight(node) {\n  var children = node.children;\n  return children.length && node.isExpand ? children[children.length - 1] : node.hierNode.thread;\n}\n/**\n * This function is used to traverse the left contour of a subtree (or a subforest).\n * It returns the leftmost child of node or the thread of node. The function\n * returns null if and only if node is on the highest depth of its subtree.\n *\n * @param  {module:echarts/data/Tree~TreeNode} node\n * @return {module:echarts/data/Tree~TreeNode}\n */\n\n\nfunction nextLeft(node) {\n  var children = node.children;\n  return children.length && node.isExpand ? children[0] : node.hierNode.thread;\n}\n/**\n * If nodeInLeft’s ancestor is a sibling of node, returns nodeInLeft’s ancestor.\n * Otherwise, returns the specified ancestor.\n *\n * @param  {module:echarts/data/Tree~TreeNode} nodeInLeft\n * @param  {module:echarts/data/Tree~TreeNode} node\n * @param  {module:echarts/data/Tree~TreeNode} ancestor\n * @return {module:echarts/data/Tree~TreeNode}\n */\n\n\nfunction nextAncestor(nodeInLeft, node, ancestor) {\n  return nodeInLeft.hierNode.ancestor.parentNode === node.parentNode ? nodeInLeft.hierNode.ancestor : ancestor;\n}\n/**\n * The implementation of this function was originally copied from \"d3.js\"\n * <https://github.com/d3/d3-hierarchy/blob/4c1f038f2725d6eae2e49b61d01456400694bac4/src/tree.js>\n * with some modifications made for this program.\n * See the license statement at the head of this file.\n *\n * Shifts the current subtree rooted at wr.\n * This is done by increasing prelim(w+) and modifier(w+) by shift.\n *\n * @param  {module:echarts/data/Tree~TreeNode} wl\n * @param  {module:echarts/data/Tree~TreeNode} wr\n * @param  {number} shift [description]\n */\n\n\nfunction moveSubtree(wl, wr, shift) {\n  var change = shift / (wr.hierNode.i - wl.hierNode.i);\n  wr.hierNode.change -= change;\n  wr.hierNode.shift += shift;\n  wr.hierNode.modifier += shift;\n  wr.hierNode.prelim += shift;\n  wl.hierNode.change += change;\n}\n/**\n * The implementation of this function was originally copied from \"d3.js\"\n * <https://github.com/d3/d3-hierarchy/blob/4c1f038f2725d6eae2e49b61d01456400694bac4/src/tree.js>\n * with some modifications made for this program.\n * See the license statement at the head of this file.\n */\n\n\nfunction defaultSeparation(node1, node2) {\n  return node1.parentNode === node2.parentNode ? 1 : 2;\n}\n\nexports.init = init;\nexports.firstWalk = firstWalk;\nexports.secondWalk = secondWalk;\nexports.separation = separation;\nexports.radialCoordinate = radialCoordinate;\nexports.getViewRect = getViewRect;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}