{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar BaseAxisPointer = require(\"./BaseAxisPointer\");\nvar viewHelper = require(\"./viewHelper\");\nvar cartesianAxisHelper = require(\"../../coord/cartesian/cartesianAxisHelper\");\nvar AxisView = require(\"../axis/AxisView\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar CartesianAxisPointer = BaseAxisPointer.extend({\n  /**\n   * @override\n   */\n  makeElOption: function (elOption, value, axisModel, axisPointerModel, api) {\n    var axis = axisModel.axis;\n    var grid = axis.grid;\n    var axisPointerType = axisPointerModel.get('type');\n    var otherExtent = getCartesian(grid, axis).getOtherAxis(axis).getGlobalExtent();\n    var pixelValue = axis.toGlobalCoord(axis.dataToCoord(value, true));\n    if (axisPointerType && axisPointerType !== 'none') {\n      var elStyle = viewHelper.buildElStyle(axisPointerModel);\n      var pointerOption = pointerShapeBuilder[axisPointerType](axis, pixelValue, otherExtent);\n      pointerOption.style = elStyle;\n      elOption.graphicKey = pointerOption.type;\n      elOption.pointer = pointerOption;\n    }\n    var layoutInfo = cartesianAxisHelper.layout(grid.model, axisModel);\n    viewHelper.buildCartesianSingleLabelElOption(value, elOption, layoutInfo, axisModel, axisPointerModel, api);\n  },\n  /**\n   * @override\n   */\n  getHandleTransform: function (value, axisModel, axisPointerModel) {\n    var layoutInfo = cartesianAxisHelper.layout(axisModel.axis.grid.model, axisModel, {\n      labelInside: false\n    });\n    layoutInfo.labelMargin = axisPointerModel.get('handle.margin');\n    return {\n      position: viewHelper.getTransformedPosition(axisModel.axis, value, layoutInfo),\n      rotation: layoutInfo.rotation + (layoutInfo.labelDirection < 0 ? Math.PI : 0)\n    };\n  },\n  /**\n   * @override\n   */\n  updateHandleTransform: function (transform, delta, axisModel, axisPointerModel) {\n    var axis = axisModel.axis;\n    var grid = axis.grid;\n    var axisExtent = axis.getGlobalExtent(true);\n    var otherExtent = getCartesian(grid, axis).getOtherAxis(axis).getGlobalExtent();\n    var dimIndex = axis.dim === 'x' ? 0 : 1;\n    var currPosition = transform.position;\n    currPosition[dimIndex] += delta[dimIndex];\n    currPosition[dimIndex] = Math.min(axisExtent[1], currPosition[dimIndex]);\n    currPosition[dimIndex] = Math.max(axisExtent[0], currPosition[dimIndex]);\n    var cursorOtherValue = (otherExtent[1] + otherExtent[0]) / 2;\n    var cursorPoint = [cursorOtherValue, cursorOtherValue];\n    cursorPoint[dimIndex] = currPosition[dimIndex]; // Make tooltip do not overlap axisPointer and in the middle of the grid.\n\n    var tooltipOptions = [{\n      verticalAlign: 'middle'\n    }, {\n      align: 'center'\n    }];\n    return {\n      position: currPosition,\n      rotation: transform.rotation,\n      cursorPoint: cursorPoint,\n      tooltipOption: tooltipOptions[dimIndex]\n    };\n  }\n});\nfunction getCartesian(grid, axis) {\n  var opt = {};\n  opt[axis.dim + 'AxisIndex'] = axis.index;\n  return grid.getCartesian(opt);\n}\nvar pointerShapeBuilder = {\n  line: function (axis, pixelValue, otherExtent) {\n    var targetShape = viewHelper.makeLineShape([pixelValue, otherExtent[0]], [pixelValue, otherExtent[1]], getAxisDimIndex(axis));\n    return {\n      type: 'Line',\n      subPixelOptimize: true,\n      shape: targetShape\n    };\n  },\n  shadow: function (axis, pixelValue, otherExtent) {\n    var bandWidth = Math.max(1, axis.getBandWidth());\n    var span = otherExtent[1] - otherExtent[0];\n    return {\n      type: 'Rect',\n      shape: viewHelper.makeRectShape([pixelValue - bandWidth / 2, otherExtent[0]], [bandWidth, span], getAxisDimIndex(axis))\n    };\n  }\n};\nfunction getAxisDimIndex(axis) {\n  return axis.dim === 'x' ? 0 : 1;\n}\nAxisView.registerAxisPointerClass('CartesianAxisPointer', CartesianAxisPointer);\nvar _default = CartesianAxisPointer;\nmodule.exports = _default;","map":{"version":3,"names":["BaseAxisPointer","require","viewHelper","cartesianAxisHelper","AxisView","CartesianAxisPointer","extend","makeElOption","elOption","value","axisModel","axisPointerModel","api","axis","grid","axisPointerType","get","otherExtent","getCartesian","getOtherAxis","getGlobalExtent","pixelValue","toGlobalCoord","dataToCoord","elStyle","buildElStyle","pointerOption","pointerShapeBuilder","style","graphicKey","type","pointer","layoutInfo","layout","model","buildCartesianSingleLabelElOption","getHandleTransform","labelInside","labelMargin","position","getTransformedPosition","rotation","labelDirection","Math","PI","updateHandleTransform","transform","delta","axisExtent","dimIndex","dim","currPosition","min","max","cursorOtherValue","cursorPoint","tooltipOptions","verticalAlign","align","tooltipOption","opt","index","line","targetShape","makeLineShape","getAxisDimIndex","subPixelOptimize","shape","shadow","bandWidth","getBandWidth","span","makeRectShape","registerAxisPointerClass","_default","module","exports"],"sources":["/Users/mac/Desktop/vue_bsm/vue3_bsm/node_modules/echarts/lib/component/axisPointer/CartesianAxisPointer.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar BaseAxisPointer = require(\"./BaseAxisPointer\");\n\nvar viewHelper = require(\"./viewHelper\");\n\nvar cartesianAxisHelper = require(\"../../coord/cartesian/cartesianAxisHelper\");\n\nvar AxisView = require(\"../axis/AxisView\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar CartesianAxisPointer = BaseAxisPointer.extend({\n  /**\n   * @override\n   */\n  makeElOption: function (elOption, value, axisModel, axisPointerModel, api) {\n    var axis = axisModel.axis;\n    var grid = axis.grid;\n    var axisPointerType = axisPointerModel.get('type');\n    var otherExtent = getCartesian(grid, axis).getOtherAxis(axis).getGlobalExtent();\n    var pixelValue = axis.toGlobalCoord(axis.dataToCoord(value, true));\n\n    if (axisPointerType && axisPointerType !== 'none') {\n      var elStyle = viewHelper.buildElStyle(axisPointerModel);\n      var pointerOption = pointerShapeBuilder[axisPointerType](axis, pixelValue, otherExtent);\n      pointerOption.style = elStyle;\n      elOption.graphicKey = pointerOption.type;\n      elOption.pointer = pointerOption;\n    }\n\n    var layoutInfo = cartesianAxisHelper.layout(grid.model, axisModel);\n    viewHelper.buildCartesianSingleLabelElOption(value, elOption, layoutInfo, axisModel, axisPointerModel, api);\n  },\n\n  /**\n   * @override\n   */\n  getHandleTransform: function (value, axisModel, axisPointerModel) {\n    var layoutInfo = cartesianAxisHelper.layout(axisModel.axis.grid.model, axisModel, {\n      labelInside: false\n    });\n    layoutInfo.labelMargin = axisPointerModel.get('handle.margin');\n    return {\n      position: viewHelper.getTransformedPosition(axisModel.axis, value, layoutInfo),\n      rotation: layoutInfo.rotation + (layoutInfo.labelDirection < 0 ? Math.PI : 0)\n    };\n  },\n\n  /**\n   * @override\n   */\n  updateHandleTransform: function (transform, delta, axisModel, axisPointerModel) {\n    var axis = axisModel.axis;\n    var grid = axis.grid;\n    var axisExtent = axis.getGlobalExtent(true);\n    var otherExtent = getCartesian(grid, axis).getOtherAxis(axis).getGlobalExtent();\n    var dimIndex = axis.dim === 'x' ? 0 : 1;\n    var currPosition = transform.position;\n    currPosition[dimIndex] += delta[dimIndex];\n    currPosition[dimIndex] = Math.min(axisExtent[1], currPosition[dimIndex]);\n    currPosition[dimIndex] = Math.max(axisExtent[0], currPosition[dimIndex]);\n    var cursorOtherValue = (otherExtent[1] + otherExtent[0]) / 2;\n    var cursorPoint = [cursorOtherValue, cursorOtherValue];\n    cursorPoint[dimIndex] = currPosition[dimIndex]; // Make tooltip do not overlap axisPointer and in the middle of the grid.\n\n    var tooltipOptions = [{\n      verticalAlign: 'middle'\n    }, {\n      align: 'center'\n    }];\n    return {\n      position: currPosition,\n      rotation: transform.rotation,\n      cursorPoint: cursorPoint,\n      tooltipOption: tooltipOptions[dimIndex]\n    };\n  }\n});\n\nfunction getCartesian(grid, axis) {\n  var opt = {};\n  opt[axis.dim + 'AxisIndex'] = axis.index;\n  return grid.getCartesian(opt);\n}\n\nvar pointerShapeBuilder = {\n  line: function (axis, pixelValue, otherExtent) {\n    var targetShape = viewHelper.makeLineShape([pixelValue, otherExtent[0]], [pixelValue, otherExtent[1]], getAxisDimIndex(axis));\n    return {\n      type: 'Line',\n      subPixelOptimize: true,\n      shape: targetShape\n    };\n  },\n  shadow: function (axis, pixelValue, otherExtent) {\n    var bandWidth = Math.max(1, axis.getBandWidth());\n    var span = otherExtent[1] - otherExtent[0];\n    return {\n      type: 'Rect',\n      shape: viewHelper.makeRectShape([pixelValue - bandWidth / 2, otherExtent[0]], [bandWidth, span], getAxisDimIndex(axis))\n    };\n  }\n};\n\nfunction getAxisDimIndex(axis) {\n  return axis.dim === 'x' ? 0 : 1;\n}\n\nAxisView.registerAxisPointerClass('CartesianAxisPointer', CartesianAxisPointer);\nvar _default = CartesianAxisPointer;\nmodule.exports = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}