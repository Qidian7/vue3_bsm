{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar _config = require(\"../../config\");\nvar __DEV__ = _config.__DEV__;\nvar echarts = require(\"../../echarts\");\nvar axisPointerModelHelper = require(\"../axisPointer/modelHelper\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Base class of AxisView.\n */\nvar AxisView = echarts.extendComponentView({\n  type: 'axis',\n  /**\n   * @private\n   */\n  _axisPointer: null,\n  /**\n   * @protected\n   * @type {string}\n   */\n  axisPointerClass: null,\n  /**\n   * @override\n   */\n  render: function (axisModel, ecModel, api, payload) {\n    // FIXME\n    // This process should proformed after coordinate systems updated\n    // (axis scale updated), and should be performed each time update.\n    // So put it here temporarily, although it is not appropriate to\n    // put a model-writing procedure in `view`.\n    this.axisPointerClass && axisPointerModelHelper.fixValue(axisModel);\n    AxisView.superApply(this, 'render', arguments);\n    updateAxisPointer(this, axisModel, ecModel, api, payload, true);\n  },\n  /**\n   * Action handler.\n   * @public\n   * @param {module:echarts/coord/cartesian/AxisModel} axisModel\n   * @param {module:echarts/model/Global} ecModel\n   * @param {module:echarts/ExtensionAPI} api\n   * @param {Object} payload\n   */\n  updateAxisPointer: function (axisModel, ecModel, api, payload, force) {\n    updateAxisPointer(this, axisModel, ecModel, api, payload, false);\n  },\n  /**\n   * @override\n   */\n  remove: function (ecModel, api) {\n    var axisPointer = this._axisPointer;\n    axisPointer && axisPointer.remove(api);\n    AxisView.superApply(this, 'remove', arguments);\n  },\n  /**\n   * @override\n   */\n  dispose: function (ecModel, api) {\n    disposeAxisPointer(this, api);\n    AxisView.superApply(this, 'dispose', arguments);\n  }\n});\nfunction updateAxisPointer(axisView, axisModel, ecModel, api, payload, forceRender) {\n  var Clazz = AxisView.getAxisPointerClass(axisView.axisPointerClass);\n  if (!Clazz) {\n    return;\n  }\n  var axisPointerModel = axisPointerModelHelper.getAxisPointerModel(axisModel);\n  axisPointerModel ? (axisView._axisPointer || (axisView._axisPointer = new Clazz())).render(axisModel, axisPointerModel, api, forceRender) : disposeAxisPointer(axisView, api);\n}\nfunction disposeAxisPointer(axisView, ecModel, api) {\n  var axisPointer = axisView._axisPointer;\n  axisPointer && axisPointer.dispose(ecModel, api);\n  axisView._axisPointer = null;\n}\nvar axisPointerClazz = [];\nAxisView.registerAxisPointerClass = function (type, clazz) {\n  axisPointerClazz[type] = clazz;\n};\nAxisView.getAxisPointerClass = function (type) {\n  return type && axisPointerClazz[type];\n};\nvar _default = AxisView;\nmodule.exports = _default;","map":{"version":3,"names":["_config","require","__DEV__","echarts","axisPointerModelHelper","AxisView","extendComponentView","type","_axisPointer","axisPointerClass","render","axisModel","ecModel","api","payload","fixValue","superApply","arguments","updateAxisPointer","force","remove","axisPointer","dispose","disposeAxisPointer","axisView","forceRender","Clazz","getAxisPointerClass","axisPointerModel","getAxisPointerModel","axisPointerClazz","registerAxisPointerClass","clazz","_default","module","exports"],"sources":["/Users/mac/Desktop/vue_bsm/vue3_bsm/node_modules/echarts/lib/component/axis/AxisView.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar _config = require(\"../../config\");\n\nvar __DEV__ = _config.__DEV__;\n\nvar echarts = require(\"../../echarts\");\n\nvar axisPointerModelHelper = require(\"../axisPointer/modelHelper\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Base class of AxisView.\n */\nvar AxisView = echarts.extendComponentView({\n  type: 'axis',\n\n  /**\n   * @private\n   */\n  _axisPointer: null,\n\n  /**\n   * @protected\n   * @type {string}\n   */\n  axisPointerClass: null,\n\n  /**\n   * @override\n   */\n  render: function (axisModel, ecModel, api, payload) {\n    // FIXME\n    // This process should proformed after coordinate systems updated\n    // (axis scale updated), and should be performed each time update.\n    // So put it here temporarily, although it is not appropriate to\n    // put a model-writing procedure in `view`.\n    this.axisPointerClass && axisPointerModelHelper.fixValue(axisModel);\n    AxisView.superApply(this, 'render', arguments);\n    updateAxisPointer(this, axisModel, ecModel, api, payload, true);\n  },\n\n  /**\n   * Action handler.\n   * @public\n   * @param {module:echarts/coord/cartesian/AxisModel} axisModel\n   * @param {module:echarts/model/Global} ecModel\n   * @param {module:echarts/ExtensionAPI} api\n   * @param {Object} payload\n   */\n  updateAxisPointer: function (axisModel, ecModel, api, payload, force) {\n    updateAxisPointer(this, axisModel, ecModel, api, payload, false);\n  },\n\n  /**\n   * @override\n   */\n  remove: function (ecModel, api) {\n    var axisPointer = this._axisPointer;\n    axisPointer && axisPointer.remove(api);\n    AxisView.superApply(this, 'remove', arguments);\n  },\n\n  /**\n   * @override\n   */\n  dispose: function (ecModel, api) {\n    disposeAxisPointer(this, api);\n    AxisView.superApply(this, 'dispose', arguments);\n  }\n});\n\nfunction updateAxisPointer(axisView, axisModel, ecModel, api, payload, forceRender) {\n  var Clazz = AxisView.getAxisPointerClass(axisView.axisPointerClass);\n\n  if (!Clazz) {\n    return;\n  }\n\n  var axisPointerModel = axisPointerModelHelper.getAxisPointerModel(axisModel);\n  axisPointerModel ? (axisView._axisPointer || (axisView._axisPointer = new Clazz())).render(axisModel, axisPointerModel, api, forceRender) : disposeAxisPointer(axisView, api);\n}\n\nfunction disposeAxisPointer(axisView, ecModel, api) {\n  var axisPointer = axisView._axisPointer;\n  axisPointer && axisPointer.dispose(ecModel, api);\n  axisView._axisPointer = null;\n}\n\nvar axisPointerClazz = [];\n\nAxisView.registerAxisPointerClass = function (type, clazz) {\n  axisPointerClazz[type] = clazz;\n};\n\nAxisView.getAxisPointerClass = function (type) {\n  return type && axisPointerClazz[type];\n};\n\nvar _default = AxisView;\nmodule.exports = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}