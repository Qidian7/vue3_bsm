{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar echarts = require(\"../../echarts\");\nvar zrUtil = require(\"zrender/lib/core/util\");\nvar BrushController = require(\"../helper/BrushController\");\nvar _visualEncoding = require(\"./visualEncoding\");\nvar layoutCovers = _visualEncoding.layoutCovers;\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar _default = echarts.extendComponentView({\n  type: 'brush',\n  init: function (ecModel, api) {\n    /**\n     * @readOnly\n     * @type {module:echarts/model/Global}\n     */\n    this.ecModel = ecModel;\n    /**\n     * @readOnly\n     * @type {module:echarts/ExtensionAPI}\n     */\n\n    this.api = api;\n    /**\n     * @readOnly\n     * @type {module:echarts/component/brush/BrushModel}\n     */\n\n    this.model;\n    /**\n     * @private\n     * @type {module:echarts/component/helper/BrushController}\n     */\n\n    (this._brushController = new BrushController(api.getZr())).on('brush', zrUtil.bind(this._onBrush, this)).mount();\n  },\n  /**\n   * @override\n   */\n  render: function (brushModel) {\n    this.model = brushModel;\n    return updateController.apply(this, arguments);\n  },\n  /**\n   * @override\n   */\n  updateTransform: function (brushModel, ecModel) {\n    // PENDING: `updateTransform` is a little tricky, whose layout need\n    // to be calculate mandatorily and other stages will not be performed.\n    // Take care the correctness of the logic. See #11754 .\n    layoutCovers(ecModel);\n    return updateController.apply(this, arguments);\n  },\n  /**\n   * @override\n   */\n  updateView: updateController,\n  // /**\n  //  * @override\n  //  */\n  // updateLayout: updateController,\n  // /**\n  //  * @override\n  //  */\n  // updateVisual: updateController,\n\n  /**\n   * @override\n   */\n  dispose: function () {\n    this._brushController.dispose();\n  },\n  /**\n   * @private\n   */\n  _onBrush: function (areas, opt) {\n    var modelId = this.model.id;\n    this.model.brushTargetManager.setOutputRanges(areas, this.ecModel); // Action is not dispatched on drag end, because the drag end\n    // emits the same params with the last drag move event, and\n    // may have some delay when using touch pad, which makes\n    // animation not smooth (when using debounce).\n\n    (!opt.isEnd || opt.removeOnClick) && this.api.dispatchAction({\n      type: 'brush',\n      brushId: modelId,\n      areas: zrUtil.clone(areas),\n      $from: modelId\n    });\n    opt.isEnd && this.api.dispatchAction({\n      type: 'brushEnd',\n      brushId: modelId,\n      areas: zrUtil.clone(areas),\n      $from: modelId\n    });\n  }\n});\nfunction updateController(brushModel, ecModel, api, payload) {\n  // Do not update controller when drawing.\n  (!payload || payload.$from !== brushModel.id) && this._brushController.setPanels(brushModel.brushTargetManager.makePanelOpts(api)).enableBrush(brushModel.brushOption).updateCovers(brushModel.areas.slice());\n}\nmodule.exports = _default;","map":{"version":3,"names":["echarts","require","zrUtil","BrushController","_visualEncoding","layoutCovers","_default","extendComponentView","type","init","ecModel","api","model","_brushController","getZr","on","bind","_onBrush","mount","render","brushModel","updateController","apply","arguments","updateTransform","updateView","dispose","areas","opt","modelId","id","brushTargetManager","setOutputRanges","isEnd","removeOnClick","dispatchAction","brushId","clone","$from","payload","setPanels","makePanelOpts","enableBrush","brushOption","updateCovers","slice","module","exports"],"sources":["/Users/mac/Desktop/vue_bsm/vue3_bsm/node_modules/echarts/lib/component/brush/BrushView.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar echarts = require(\"../../echarts\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar BrushController = require(\"../helper/BrushController\");\n\nvar _visualEncoding = require(\"./visualEncoding\");\n\nvar layoutCovers = _visualEncoding.layoutCovers;\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar _default = echarts.extendComponentView({\n  type: 'brush',\n  init: function (ecModel, api) {\n    /**\n     * @readOnly\n     * @type {module:echarts/model/Global}\n     */\n    this.ecModel = ecModel;\n    /**\n     * @readOnly\n     * @type {module:echarts/ExtensionAPI}\n     */\n\n    this.api = api;\n    /**\n     * @readOnly\n     * @type {module:echarts/component/brush/BrushModel}\n     */\n\n    this.model;\n    /**\n     * @private\n     * @type {module:echarts/component/helper/BrushController}\n     */\n\n    (this._brushController = new BrushController(api.getZr())).on('brush', zrUtil.bind(this._onBrush, this)).mount();\n  },\n\n  /**\n   * @override\n   */\n  render: function (brushModel) {\n    this.model = brushModel;\n    return updateController.apply(this, arguments);\n  },\n\n  /**\n   * @override\n   */\n  updateTransform: function (brushModel, ecModel) {\n    // PENDING: `updateTransform` is a little tricky, whose layout need\n    // to be calculate mandatorily and other stages will not be performed.\n    // Take care the correctness of the logic. See #11754 .\n    layoutCovers(ecModel);\n    return updateController.apply(this, arguments);\n  },\n\n  /**\n   * @override\n   */\n  updateView: updateController,\n  // /**\n  //  * @override\n  //  */\n  // updateLayout: updateController,\n  // /**\n  //  * @override\n  //  */\n  // updateVisual: updateController,\n\n  /**\n   * @override\n   */\n  dispose: function () {\n    this._brushController.dispose();\n  },\n\n  /**\n   * @private\n   */\n  _onBrush: function (areas, opt) {\n    var modelId = this.model.id;\n    this.model.brushTargetManager.setOutputRanges(areas, this.ecModel); // Action is not dispatched on drag end, because the drag end\n    // emits the same params with the last drag move event, and\n    // may have some delay when using touch pad, which makes\n    // animation not smooth (when using debounce).\n\n    (!opt.isEnd || opt.removeOnClick) && this.api.dispatchAction({\n      type: 'brush',\n      brushId: modelId,\n      areas: zrUtil.clone(areas),\n      $from: modelId\n    });\n    opt.isEnd && this.api.dispatchAction({\n      type: 'brushEnd',\n      brushId: modelId,\n      areas: zrUtil.clone(areas),\n      $from: modelId\n    });\n  }\n});\n\nfunction updateController(brushModel, ecModel, api, payload) {\n  // Do not update controller when drawing.\n  (!payload || payload.$from !== brushModel.id) && this._brushController.setPanels(brushModel.brushTargetManager.makePanelOpts(api)).enableBrush(brushModel.brushOption).updateCovers(brushModel.areas.slice());\n}\n\nmodule.exports = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}