{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\nvar LRU = require(\"../../core/LRU\");\nvar globalImageCache = new LRU(50);\n/**\n * @param {string|HTMLImageElement|HTMLCanvasElement|Canvas} newImageOrSrc\n * @return {HTMLImageElement|HTMLCanvasElement|Canvas} image\n */\n\nfunction findExistImage(newImageOrSrc) {\n  if (typeof newImageOrSrc === 'string') {\n    var cachedImgObj = globalImageCache.get(newImageOrSrc);\n    return cachedImgObj && cachedImgObj.image;\n  } else {\n    return newImageOrSrc;\n  }\n}\n/**\n * Caution: User should cache loaded images, but not just count on LRU.\n * Consider if required images more than LRU size, will dead loop occur?\n *\n * @param {string|HTMLImageElement|HTMLCanvasElement|Canvas} newImageOrSrc\n * @param {HTMLImageElement|HTMLCanvasElement|Canvas} image Existent image.\n * @param {module:zrender/Element} [hostEl] For calling `dirty`.\n * @param {Function} [cb] params: (image, cbPayload)\n * @param {Object} [cbPayload] Payload on cb calling.\n * @return {HTMLImageElement|HTMLCanvasElement|Canvas} image\n */\n\nfunction createOrUpdateImage(newImageOrSrc, image, hostEl, cb, cbPayload) {\n  if (!newImageOrSrc) {\n    return image;\n  } else if (typeof newImageOrSrc === 'string') {\n    // Image should not be loaded repeatly.\n    if (image && image.__zrImageSrc === newImageOrSrc || !hostEl) {\n      return image;\n    } // Only when there is no existent image or existent image src\n    // is different, this method is responsible for load.\n\n    var cachedImgObj = globalImageCache.get(newImageOrSrc);\n    var pendingWrap = {\n      hostEl: hostEl,\n      cb: cb,\n      cbPayload: cbPayload\n    };\n    if (cachedImgObj) {\n      image = cachedImgObj.image;\n      !isImageReady(image) && cachedImgObj.pending.push(pendingWrap);\n    } else {\n      image = new Image();\n      image.onload = image.onerror = imageOnLoad;\n      globalImageCache.put(newImageOrSrc, image.__cachedImgObj = {\n        image: image,\n        pending: [pendingWrap]\n      });\n      image.src = image.__zrImageSrc = newImageOrSrc;\n    }\n    return image;\n  } // newImageOrSrc is an HTMLImageElement or HTMLCanvasElement or Canvas\n  else {\n    return newImageOrSrc;\n  }\n}\nfunction imageOnLoad() {\n  var cachedImgObj = this.__cachedImgObj;\n  this.onload = this.onerror = this.__cachedImgObj = null;\n  for (var i = 0; i < cachedImgObj.pending.length; i++) {\n    var pendingWrap = cachedImgObj.pending[i];\n    var cb = pendingWrap.cb;\n    cb && cb(this, pendingWrap.cbPayload);\n    pendingWrap.hostEl.dirty();\n  }\n  cachedImgObj.pending.length = 0;\n}\nfunction isImageReady(image) {\n  return image && image.width && image.height;\n}\nexports.findExistImage = findExistImage;\nexports.createOrUpdateImage = createOrUpdateImage;\nexports.isImageReady = isImageReady;","map":{"version":3,"names":["LRU","require","globalImageCache","findExistImage","newImageOrSrc","cachedImgObj","get","image","createOrUpdateImage","hostEl","cb","cbPayload","__zrImageSrc","pendingWrap","isImageReady","pending","push","Image","onload","onerror","imageOnLoad","put","__cachedImgObj","src","i","length","dirty","width","height","exports"],"sources":["/Users/mac/Desktop/vue_bsm/vue3_bsm/node_modules/zrender/lib/graphic/helper/image.js"],"sourcesContent":["var LRU = require(\"../../core/LRU\");\n\nvar globalImageCache = new LRU(50);\n/**\n * @param {string|HTMLImageElement|HTMLCanvasElement|Canvas} newImageOrSrc\n * @return {HTMLImageElement|HTMLCanvasElement|Canvas} image\n */\n\nfunction findExistImage(newImageOrSrc) {\n  if (typeof newImageOrSrc === 'string') {\n    var cachedImgObj = globalImageCache.get(newImageOrSrc);\n    return cachedImgObj && cachedImgObj.image;\n  } else {\n    return newImageOrSrc;\n  }\n}\n/**\n * Caution: User should cache loaded images, but not just count on LRU.\n * Consider if required images more than LRU size, will dead loop occur?\n *\n * @param {string|HTMLImageElement|HTMLCanvasElement|Canvas} newImageOrSrc\n * @param {HTMLImageElement|HTMLCanvasElement|Canvas} image Existent image.\n * @param {module:zrender/Element} [hostEl] For calling `dirty`.\n * @param {Function} [cb] params: (image, cbPayload)\n * @param {Object} [cbPayload] Payload on cb calling.\n * @return {HTMLImageElement|HTMLCanvasElement|Canvas} image\n */\n\n\nfunction createOrUpdateImage(newImageOrSrc, image, hostEl, cb, cbPayload) {\n  if (!newImageOrSrc) {\n    return image;\n  } else if (typeof newImageOrSrc === 'string') {\n    // Image should not be loaded repeatly.\n    if (image && image.__zrImageSrc === newImageOrSrc || !hostEl) {\n      return image;\n    } // Only when there is no existent image or existent image src\n    // is different, this method is responsible for load.\n\n\n    var cachedImgObj = globalImageCache.get(newImageOrSrc);\n    var pendingWrap = {\n      hostEl: hostEl,\n      cb: cb,\n      cbPayload: cbPayload\n    };\n\n    if (cachedImgObj) {\n      image = cachedImgObj.image;\n      !isImageReady(image) && cachedImgObj.pending.push(pendingWrap);\n    } else {\n      image = new Image();\n      image.onload = image.onerror = imageOnLoad;\n      globalImageCache.put(newImageOrSrc, image.__cachedImgObj = {\n        image: image,\n        pending: [pendingWrap]\n      });\n      image.src = image.__zrImageSrc = newImageOrSrc;\n    }\n\n    return image;\n  } // newImageOrSrc is an HTMLImageElement or HTMLCanvasElement or Canvas\n  else {\n      return newImageOrSrc;\n    }\n}\n\nfunction imageOnLoad() {\n  var cachedImgObj = this.__cachedImgObj;\n  this.onload = this.onerror = this.__cachedImgObj = null;\n\n  for (var i = 0; i < cachedImgObj.pending.length; i++) {\n    var pendingWrap = cachedImgObj.pending[i];\n    var cb = pendingWrap.cb;\n    cb && cb(this, pendingWrap.cbPayload);\n    pendingWrap.hostEl.dirty();\n  }\n\n  cachedImgObj.pending.length = 0;\n}\n\nfunction isImageReady(image) {\n  return image && image.width && image.height;\n}\n\nexports.findExistImage = findExistImage;\nexports.createOrUpdateImage = createOrUpdateImage;\nexports.isImageReady = isImageReady;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}