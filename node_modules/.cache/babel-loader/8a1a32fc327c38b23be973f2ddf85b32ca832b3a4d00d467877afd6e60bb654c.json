{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar vec2 = require(\"zrender/lib/core/vector\");\nvar _graphHelper = require(\"./graphHelper\");\nvar getSymbolSize = _graphHelper.getSymbolSize;\nvar getNodeGlobalScale = _graphHelper.getNodeGlobalScale;\nvar zrUtil = require(\"zrender/lib/core/util\");\nvar _multipleGraphEdgeHelper = require(\"../helper/multipleGraphEdgeHelper\");\nvar getCurvenessForEdge = _multipleGraphEdgeHelper.getCurvenessForEdge;\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar PI = Math.PI;\nvar _symbolRadiansHalf = [];\n/**\n * `basedOn` can be:\n * 'value':\n *     This layout is not accurate and have same bad case. For example,\n *     if the min value is very smaller than the max value, the nodes\n *     with the min value probably overlap even though there is enough\n *     space to layout them. So we only use this approach in the as the\n *     init layout of the force layout.\n *     FIXME\n *     Probably we do not need this method any more but use\n *     `basedOn: 'symbolSize'` in force layout if\n *     delay its init operations to GraphView.\n * 'symbolSize':\n *     This approach work only if all of the symbol size calculated.\n *     That is, the progressive rendering is not applied to graph.\n *     FIXME\n *     If progressive rendering is applied to graph some day,\n *     probably we have to use `basedOn: 'value'`.\n *\n * @param {module:echarts/src/model/Series} seriesModel\n * @param {string} basedOn 'value' or 'symbolSize'\n */\n\nfunction circularLayout(seriesModel, basedOn) {\n  var coordSys = seriesModel.coordinateSystem;\n  if (coordSys && coordSys.type !== 'view') {\n    return;\n  }\n  var rect = coordSys.getBoundingRect();\n  var nodeData = seriesModel.getData();\n  var graph = nodeData.graph;\n  var cx = rect.width / 2 + rect.x;\n  var cy = rect.height / 2 + rect.y;\n  var r = Math.min(rect.width, rect.height) / 2;\n  var count = nodeData.count();\n  nodeData.setLayout({\n    cx: cx,\n    cy: cy\n  });\n  if (!count) {\n    return;\n  }\n  _layoutNodesBasedOn[basedOn](seriesModel, coordSys, graph, nodeData, r, cx, cy, count);\n  graph.eachEdge(function (edge, index) {\n    var curveness = zrUtil.retrieve3(edge.getModel().get('lineStyle.curveness'), getCurvenessForEdge(edge, seriesModel, index), 0);\n    var p1 = vec2.clone(edge.node1.getLayout());\n    var p2 = vec2.clone(edge.node2.getLayout());\n    var cp1;\n    var x12 = (p1[0] + p2[0]) / 2;\n    var y12 = (p1[1] + p2[1]) / 2;\n    if (+curveness) {\n      curveness *= 3;\n      cp1 = [cx * curveness + x12 * (1 - curveness), cy * curveness + y12 * (1 - curveness)];\n    }\n    edge.setLayout([p1, p2, cp1]);\n  });\n}\nvar _layoutNodesBasedOn = {\n  value: function (seriesModel, coordSys, graph, nodeData, r, cx, cy, count) {\n    var angle = 0;\n    var sum = nodeData.getSum('value');\n    var unitAngle = Math.PI * 2 / (sum || count);\n    graph.eachNode(function (node) {\n      var value = node.getValue('value');\n      var radianHalf = unitAngle * (sum ? value : 1) / 2;\n      angle += radianHalf;\n      node.setLayout([r * Math.cos(angle) + cx, r * Math.sin(angle) + cy]);\n      angle += radianHalf;\n    });\n  },\n  symbolSize: function (seriesModel, coordSys, graph, nodeData, r, cx, cy, count) {\n    var sumRadian = 0;\n    _symbolRadiansHalf.length = count;\n    var nodeScale = getNodeGlobalScale(seriesModel);\n    graph.eachNode(function (node) {\n      var symbolSize = getSymbolSize(node); // Normally this case will not happen, but we still add\n      // some the defensive code (2px is an arbitrary value).\n\n      isNaN(symbolSize) && (symbolSize = 2);\n      symbolSize < 0 && (symbolSize = 0);\n      symbolSize *= nodeScale;\n      var symbolRadianHalf = Math.asin(symbolSize / 2 / r); // when `symbolSize / 2` is bigger than `r`.\n\n      isNaN(symbolRadianHalf) && (symbolRadianHalf = PI / 2);\n      _symbolRadiansHalf[node.dataIndex] = symbolRadianHalf;\n      sumRadian += symbolRadianHalf * 2;\n    });\n    var halfRemainRadian = (2 * PI - sumRadian) / count / 2;\n    var angle = 0;\n    graph.eachNode(function (node) {\n      var radianHalf = halfRemainRadian + _symbolRadiansHalf[node.dataIndex];\n      angle += radianHalf;\n      node.setLayout([r * Math.cos(angle) + cx, r * Math.sin(angle) + cy]);\n      angle += radianHalf;\n    });\n  }\n};\nexports.circularLayout = circularLayout;","map":{"version":3,"names":["vec2","require","_graphHelper","getSymbolSize","getNodeGlobalScale","zrUtil","_multipleGraphEdgeHelper","getCurvenessForEdge","PI","Math","_symbolRadiansHalf","circularLayout","seriesModel","basedOn","coordSys","coordinateSystem","type","rect","getBoundingRect","nodeData","getData","graph","cx","width","x","cy","height","y","r","min","count","setLayout","_layoutNodesBasedOn","eachEdge","edge","index","curveness","retrieve3","getModel","get","p1","clone","node1","getLayout","p2","node2","cp1","x12","y12","value","angle","sum","getSum","unitAngle","eachNode","node","getValue","radianHalf","cos","sin","symbolSize","sumRadian","length","nodeScale","isNaN","symbolRadianHalf","asin","dataIndex","halfRemainRadian","exports"],"sources":["/Users/mac/Desktop/vue_bsm/vue3_bsm/node_modules/echarts/lib/chart/graph/circularLayoutHelper.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar vec2 = require(\"zrender/lib/core/vector\");\n\nvar _graphHelper = require(\"./graphHelper\");\n\nvar getSymbolSize = _graphHelper.getSymbolSize;\nvar getNodeGlobalScale = _graphHelper.getNodeGlobalScale;\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar _multipleGraphEdgeHelper = require(\"../helper/multipleGraphEdgeHelper\");\n\nvar getCurvenessForEdge = _multipleGraphEdgeHelper.getCurvenessForEdge;\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar PI = Math.PI;\nvar _symbolRadiansHalf = [];\n/**\n * `basedOn` can be:\n * 'value':\n *     This layout is not accurate and have same bad case. For example,\n *     if the min value is very smaller than the max value, the nodes\n *     with the min value probably overlap even though there is enough\n *     space to layout them. So we only use this approach in the as the\n *     init layout of the force layout.\n *     FIXME\n *     Probably we do not need this method any more but use\n *     `basedOn: 'symbolSize'` in force layout if\n *     delay its init operations to GraphView.\n * 'symbolSize':\n *     This approach work only if all of the symbol size calculated.\n *     That is, the progressive rendering is not applied to graph.\n *     FIXME\n *     If progressive rendering is applied to graph some day,\n *     probably we have to use `basedOn: 'value'`.\n *\n * @param {module:echarts/src/model/Series} seriesModel\n * @param {string} basedOn 'value' or 'symbolSize'\n */\n\nfunction circularLayout(seriesModel, basedOn) {\n  var coordSys = seriesModel.coordinateSystem;\n\n  if (coordSys && coordSys.type !== 'view') {\n    return;\n  }\n\n  var rect = coordSys.getBoundingRect();\n  var nodeData = seriesModel.getData();\n  var graph = nodeData.graph;\n  var cx = rect.width / 2 + rect.x;\n  var cy = rect.height / 2 + rect.y;\n  var r = Math.min(rect.width, rect.height) / 2;\n  var count = nodeData.count();\n  nodeData.setLayout({\n    cx: cx,\n    cy: cy\n  });\n\n  if (!count) {\n    return;\n  }\n\n  _layoutNodesBasedOn[basedOn](seriesModel, coordSys, graph, nodeData, r, cx, cy, count);\n\n  graph.eachEdge(function (edge, index) {\n    var curveness = zrUtil.retrieve3(edge.getModel().get('lineStyle.curveness'), getCurvenessForEdge(edge, seriesModel, index), 0);\n    var p1 = vec2.clone(edge.node1.getLayout());\n    var p2 = vec2.clone(edge.node2.getLayout());\n    var cp1;\n    var x12 = (p1[0] + p2[0]) / 2;\n    var y12 = (p1[1] + p2[1]) / 2;\n\n    if (+curveness) {\n      curveness *= 3;\n      cp1 = [cx * curveness + x12 * (1 - curveness), cy * curveness + y12 * (1 - curveness)];\n    }\n\n    edge.setLayout([p1, p2, cp1]);\n  });\n}\n\nvar _layoutNodesBasedOn = {\n  value: function (seriesModel, coordSys, graph, nodeData, r, cx, cy, count) {\n    var angle = 0;\n    var sum = nodeData.getSum('value');\n    var unitAngle = Math.PI * 2 / (sum || count);\n    graph.eachNode(function (node) {\n      var value = node.getValue('value');\n      var radianHalf = unitAngle * (sum ? value : 1) / 2;\n      angle += radianHalf;\n      node.setLayout([r * Math.cos(angle) + cx, r * Math.sin(angle) + cy]);\n      angle += radianHalf;\n    });\n  },\n  symbolSize: function (seriesModel, coordSys, graph, nodeData, r, cx, cy, count) {\n    var sumRadian = 0;\n    _symbolRadiansHalf.length = count;\n    var nodeScale = getNodeGlobalScale(seriesModel);\n    graph.eachNode(function (node) {\n      var symbolSize = getSymbolSize(node); // Normally this case will not happen, but we still add\n      // some the defensive code (2px is an arbitrary value).\n\n      isNaN(symbolSize) && (symbolSize = 2);\n      symbolSize < 0 && (symbolSize = 0);\n      symbolSize *= nodeScale;\n      var symbolRadianHalf = Math.asin(symbolSize / 2 / r); // when `symbolSize / 2` is bigger than `r`.\n\n      isNaN(symbolRadianHalf) && (symbolRadianHalf = PI / 2);\n      _symbolRadiansHalf[node.dataIndex] = symbolRadianHalf;\n      sumRadian += symbolRadianHalf * 2;\n    });\n    var halfRemainRadian = (2 * PI - sumRadian) / count / 2;\n    var angle = 0;\n    graph.eachNode(function (node) {\n      var radianHalf = halfRemainRadian + _symbolRadiansHalf[node.dataIndex];\n      angle += radianHalf;\n      node.setLayout([r * Math.cos(angle) + cx, r * Math.sin(angle) + cy]);\n      angle += radianHalf;\n    });\n  }\n};\nexports.circularLayout = circularLayout;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}