{"ast":null,"code":"/**\n * The algoritm is learnt from\n * https://franklinta.com/2014/09/08/computing-css-matrix3d-transforms/\n * And we made some optimization for matrix inversion.\n * Other similar approaches:\n * \"cv::getPerspectiveTransform\", \"Direct Linear Transformation\".\n */\nvar LN2 = Math.log(2);\nfunction determinant(rows, rank, rowStart, rowMask, colMask, detCache) {\n  var cacheKey = rowMask + '-' + colMask;\n  var fullRank = rows.length;\n  if (detCache.hasOwnProperty(cacheKey)) {\n    return detCache[cacheKey];\n  }\n  if (rank === 1) {\n    // In this case the colMask must be like: `11101111`. We can find the place of `0`.\n    var colStart = Math.round(Math.log((1 << fullRank) - 1 & ~colMask) / LN2);\n    return rows[rowStart][colStart];\n  }\n  var subRowMask = rowMask | 1 << rowStart;\n  var subRowStart = rowStart + 1;\n  while (rowMask & 1 << subRowStart) {\n    subRowStart++;\n  }\n  var sum = 0;\n  for (var j = 0, colLocalIdx = 0; j < fullRank; j++) {\n    var colTag = 1 << j;\n    if (!(colTag & colMask)) {\n      sum += (colLocalIdx % 2 ? -1 : 1) * rows[rowStart][j] // det(subMatrix(0, j))\n      * determinant(rows, rank - 1, subRowStart, subRowMask, colMask | colTag, detCache);\n      colLocalIdx++;\n    }\n  }\n  detCache[cacheKey] = sum;\n  return sum;\n}\n/**\n * Usage:\n * ```js\n * var transformer = buildTransformer(\n *     [10, 44, 100, 44, 100, 300, 10, 300],\n *     [50, 54, 130, 14, 140, 330, 14, 220]\n * );\n * var out = [];\n * transformer && transformer([11, 33], out);\n * ```\n *\n * Notice: `buildTransformer` may take more than 10ms in some Android device.\n *\n * @param {Array.<number>} src source four points, [x0, y0, x1, y1, x2, y2, x3, y3]\n * @param {Array.<number>} dest destination four points, [x0, y0, x1, y1, x2, y2, x3, y3]\n * @return {Function} transformer If fail, return null/undefined.\n */\n\nfunction buildTransformer(src, dest) {\n  var mA = [[src[0], src[1], 1, 0, 0, 0, -dest[0] * src[0], -dest[0] * src[1]], [0, 0, 0, src[0], src[1], 1, -dest[1] * src[0], -dest[1] * src[1]], [src[2], src[3], 1, 0, 0, 0, -dest[2] * src[2], -dest[2] * src[3]], [0, 0, 0, src[2], src[3], 1, -dest[3] * src[2], -dest[3] * src[3]], [src[4], src[5], 1, 0, 0, 0, -dest[4] * src[4], -dest[4] * src[5]], [0, 0, 0, src[4], src[5], 1, -dest[5] * src[4], -dest[5] * src[5]], [src[6], src[7], 1, 0, 0, 0, -dest[6] * src[6], -dest[6] * src[7]], [0, 0, 0, src[6], src[7], 1, -dest[7] * src[6], -dest[7] * src[7]]];\n  var detCache = {};\n  var det = determinant(mA, 8, 0, 0, 0, detCache);\n  if (det === 0) {\n    // can not make transformer when and only when\n    // any three of the markers are collinear.\n    return;\n  } // `invert(mA) * dest`, that is, `adj(mA) / det * dest`.\n\n  var vh = [];\n  for (var i = 0; i < 8; i++) {\n    for (var j = 0; j < 8; j++) {\n      vh[j] == null && (vh[j] = 0);\n      vh[j] += ((i + j) % 2 ? -1 : 1) *\n      // det(subMatrix(i, j))\n      determinant(mA, 7, i === 0 ? 1 : 0, 1 << i, 1 << j, detCache) / det * dest[i];\n    }\n  }\n  return function (out, srcPointX, srcPointY) {\n    var pk = srcPointX * vh[6] + srcPointY * vh[7] + 1;\n    out[0] = (srcPointX * vh[0] + srcPointY * vh[1] + vh[2]) / pk;\n    out[1] = (srcPointX * vh[3] + srcPointY * vh[4] + vh[5]) / pk;\n  };\n}\nexports.buildTransformer = buildTransformer;","map":{"version":3,"names":["LN2","Math","log","determinant","rows","rank","rowStart","rowMask","colMask","detCache","cacheKey","fullRank","length","hasOwnProperty","colStart","round","subRowMask","subRowStart","sum","j","colLocalIdx","colTag","buildTransformer","src","dest","mA","det","vh","i","out","srcPointX","srcPointY","pk","exports"],"sources":["/Users/mac/Desktop/vue_bsm/vue3_bsm/node_modules/zrender/lib/core/fourPointsTransform.js"],"sourcesContent":["/**\n * The algoritm is learnt from\n * https://franklinta.com/2014/09/08/computing-css-matrix3d-transforms/\n * And we made some optimization for matrix inversion.\n * Other similar approaches:\n * \"cv::getPerspectiveTransform\", \"Direct Linear Transformation\".\n */\nvar LN2 = Math.log(2);\n\nfunction determinant(rows, rank, rowStart, rowMask, colMask, detCache) {\n  var cacheKey = rowMask + '-' + colMask;\n  var fullRank = rows.length;\n\n  if (detCache.hasOwnProperty(cacheKey)) {\n    return detCache[cacheKey];\n  }\n\n  if (rank === 1) {\n    // In this case the colMask must be like: `11101111`. We can find the place of `0`.\n    var colStart = Math.round(Math.log((1 << fullRank) - 1 & ~colMask) / LN2);\n    return rows[rowStart][colStart];\n  }\n\n  var subRowMask = rowMask | 1 << rowStart;\n  var subRowStart = rowStart + 1;\n\n  while (rowMask & 1 << subRowStart) {\n    subRowStart++;\n  }\n\n  var sum = 0;\n\n  for (var j = 0, colLocalIdx = 0; j < fullRank; j++) {\n    var colTag = 1 << j;\n\n    if (!(colTag & colMask)) {\n      sum += (colLocalIdx % 2 ? -1 : 1) * rows[rowStart][j] // det(subMatrix(0, j))\n      * determinant(rows, rank - 1, subRowStart, subRowMask, colMask | colTag, detCache);\n      colLocalIdx++;\n    }\n  }\n\n  detCache[cacheKey] = sum;\n  return sum;\n}\n/**\n * Usage:\n * ```js\n * var transformer = buildTransformer(\n *     [10, 44, 100, 44, 100, 300, 10, 300],\n *     [50, 54, 130, 14, 140, 330, 14, 220]\n * );\n * var out = [];\n * transformer && transformer([11, 33], out);\n * ```\n *\n * Notice: `buildTransformer` may take more than 10ms in some Android device.\n *\n * @param {Array.<number>} src source four points, [x0, y0, x1, y1, x2, y2, x3, y3]\n * @param {Array.<number>} dest destination four points, [x0, y0, x1, y1, x2, y2, x3, y3]\n * @return {Function} transformer If fail, return null/undefined.\n */\n\n\nfunction buildTransformer(src, dest) {\n  var mA = [[src[0], src[1], 1, 0, 0, 0, -dest[0] * src[0], -dest[0] * src[1]], [0, 0, 0, src[0], src[1], 1, -dest[1] * src[0], -dest[1] * src[1]], [src[2], src[3], 1, 0, 0, 0, -dest[2] * src[2], -dest[2] * src[3]], [0, 0, 0, src[2], src[3], 1, -dest[3] * src[2], -dest[3] * src[3]], [src[4], src[5], 1, 0, 0, 0, -dest[4] * src[4], -dest[4] * src[5]], [0, 0, 0, src[4], src[5], 1, -dest[5] * src[4], -dest[5] * src[5]], [src[6], src[7], 1, 0, 0, 0, -dest[6] * src[6], -dest[6] * src[7]], [0, 0, 0, src[6], src[7], 1, -dest[7] * src[6], -dest[7] * src[7]]];\n  var detCache = {};\n  var det = determinant(mA, 8, 0, 0, 0, detCache);\n\n  if (det === 0) {\n    // can not make transformer when and only when\n    // any three of the markers are collinear.\n    return;\n  } // `invert(mA) * dest`, that is, `adj(mA) / det * dest`.\n\n\n  var vh = [];\n\n  for (var i = 0; i < 8; i++) {\n    for (var j = 0; j < 8; j++) {\n      vh[j] == null && (vh[j] = 0);\n      vh[j] += ((i + j) % 2 ? -1 : 1) * // det(subMatrix(i, j))\n      determinant(mA, 7, i === 0 ? 1 : 0, 1 << i, 1 << j, detCache) / det * dest[i];\n    }\n  }\n\n  return function (out, srcPointX, srcPointY) {\n    var pk = srcPointX * vh[6] + srcPointY * vh[7] + 1;\n    out[0] = (srcPointX * vh[0] + srcPointY * vh[1] + vh[2]) / pk;\n    out[1] = (srcPointX * vh[3] + srcPointY * vh[4] + vh[5]) / pk;\n  };\n}\n\nexports.buildTransformer = buildTransformer;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}