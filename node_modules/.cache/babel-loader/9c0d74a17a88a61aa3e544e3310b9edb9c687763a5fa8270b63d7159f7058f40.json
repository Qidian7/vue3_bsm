{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar _util = require(\"zrender/lib/core/util\");\nvar assert = _util.assert;\nvar isArray = _util.isArray;\nvar _config = require(\"../config\");\nvar __DEV__ = _config.__DEV__;\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * @param {Object} define\n * @return See the return of `createTask`.\n */\nfunction createTask(define) {\n  return new Task(define);\n}\n/**\n * @constructor\n * @param {Object} define\n * @param {Function} define.reset Custom reset\n * @param {Function} [define.plan] Returns 'reset' indicate reset immediately.\n * @param {Function} [define.count] count is used to determin data task.\n * @param {Function} [define.onDirty] count is used to determin data task.\n */\n\nfunction Task(define) {\n  define = define || {};\n  this._reset = define.reset;\n  this._plan = define.plan;\n  this._count = define.count;\n  this._onDirty = define.onDirty;\n  this._dirty = true; // Context must be specified implicitly, to\n  // avoid miss update context when model changed.\n\n  this.context;\n}\nvar taskProto = Task.prototype;\n/**\n * @param {Object} performArgs\n * @param {number} [performArgs.step] Specified step.\n * @param {number} [performArgs.skip] Skip customer perform call.\n * @param {number} [performArgs.modBy] Sampling window size.\n * @param {number} [performArgs.modDataCount] Sampling count.\n */\n\ntaskProto.perform = function (performArgs) {\n  var upTask = this._upstream;\n  var skip = performArgs && performArgs.skip; // TODO some refactor.\n  // Pull data. Must pull data each time, because context.data\n  // may be updated by Series.setData.\n\n  if (this._dirty && upTask) {\n    var context = this.context;\n    context.data = context.outputData = upTask.context.outputData;\n  }\n  if (this.__pipeline) {\n    this.__pipeline.currentTask = this;\n  }\n  var planResult;\n  if (this._plan && !skip) {\n    planResult = this._plan(this.context);\n  } // Support sharding by mod, which changes the render sequence and makes the rendered graphic\n  // elements uniformed distributed when progress, especially when moving or zooming.\n\n  var lastModBy = normalizeModBy(this._modBy);\n  var lastModDataCount = this._modDataCount || 0;\n  var modBy = normalizeModBy(performArgs && performArgs.modBy);\n  var modDataCount = performArgs && performArgs.modDataCount || 0;\n  if (lastModBy !== modBy || lastModDataCount !== modDataCount) {\n    planResult = 'reset';\n  }\n  function normalizeModBy(val) {\n    !(val >= 1) && (val = 1); // jshint ignore:line\n\n    return val;\n  }\n  var forceFirstProgress;\n  if (this._dirty || planResult === 'reset') {\n    this._dirty = false;\n    forceFirstProgress = reset(this, skip);\n  }\n  this._modBy = modBy;\n  this._modDataCount = modDataCount;\n  var step = performArgs && performArgs.step;\n  if (upTask) {\n    this._dueEnd = upTask._outputDueEnd;\n  } // DataTask or overallTask\n  else {\n    this._dueEnd = this._count ? this._count(this.context) : Infinity;\n  } // Note: Stubs, that its host overall task let it has progress, has progress.\n  // If no progress, pass index from upstream to downstream each time plan called.\n\n  if (this._progress) {\n    var start = this._dueIndex;\n    var end = Math.min(step != null ? this._dueIndex + step : Infinity, this._dueEnd);\n    if (!skip && (forceFirstProgress || start < end)) {\n      var progress = this._progress;\n      if (isArray(progress)) {\n        for (var i = 0; i < progress.length; i++) {\n          doProgress(this, progress[i], start, end, modBy, modDataCount);\n        }\n      } else {\n        doProgress(this, progress, start, end, modBy, modDataCount);\n      }\n    }\n    this._dueIndex = end; // If no `outputDueEnd`, assume that output data and\n    // input data is the same, so use `dueIndex` as `outputDueEnd`.\n\n    var outputDueEnd = this._settedOutputEnd != null ? this._settedOutputEnd : end;\n    this._outputDueEnd = outputDueEnd;\n  } else {\n    // (1) Some overall task has no progress.\n    // (2) Stubs, that its host overall task do not let it has progress, has no progress.\n    // This should always be performed so it can be passed to downstream.\n    this._dueIndex = this._outputDueEnd = this._settedOutputEnd != null ? this._settedOutputEnd : this._dueEnd;\n  }\n  return this.unfinished();\n};\nvar iterator = function () {\n  var end;\n  var current;\n  var modBy;\n  var modDataCount;\n  var winCount;\n  var it = {\n    reset: function (s, e, sStep, sCount) {\n      current = s;\n      end = e;\n      modBy = sStep;\n      modDataCount = sCount;\n      winCount = Math.ceil(modDataCount / modBy);\n      it.next = modBy > 1 && modDataCount > 0 ? modNext : sequentialNext;\n    }\n  };\n  return it;\n  function sequentialNext() {\n    return current < end ? current++ : null;\n  }\n  function modNext() {\n    var dataIndex = current % winCount * modBy + Math.ceil(current / winCount);\n    var result = current >= end ? null : dataIndex < modDataCount ? dataIndex // If modDataCount is smaller than data.count() (consider `appendData` case),\n    // Use normal linear rendering mode.\n    : current;\n    current++;\n    return result;\n  }\n}();\ntaskProto.dirty = function () {\n  this._dirty = true;\n  this._onDirty && this._onDirty(this.context);\n};\nfunction doProgress(taskIns, progress, start, end, modBy, modDataCount) {\n  iterator.reset(start, end, modBy, modDataCount);\n  taskIns._callingProgress = progress;\n  taskIns._callingProgress({\n    start: start,\n    end: end,\n    count: end - start,\n    next: iterator.next\n  }, taskIns.context);\n}\nfunction reset(taskIns, skip) {\n  taskIns._dueIndex = taskIns._outputDueEnd = taskIns._dueEnd = 0;\n  taskIns._settedOutputEnd = null;\n  var progress;\n  var forceFirstProgress;\n  if (!skip && taskIns._reset) {\n    progress = taskIns._reset(taskIns.context);\n    if (progress && progress.progress) {\n      forceFirstProgress = progress.forceFirstProgress;\n      progress = progress.progress;\n    } // To simplify no progress checking, array must has item.\n\n    if (isArray(progress) && !progress.length) {\n      progress = null;\n    }\n  }\n  taskIns._progress = progress;\n  taskIns._modBy = taskIns._modDataCount = null;\n  var downstream = taskIns._downstream;\n  downstream && downstream.dirty();\n  return forceFirstProgress;\n}\n/**\n * @return {boolean}\n */\n\ntaskProto.unfinished = function () {\n  return this._progress && this._dueIndex < this._dueEnd;\n};\n/**\n * @param {Object} downTask The downstream task.\n * @return {Object} The downstream task.\n */\n\ntaskProto.pipe = function (downTask) {\n  // If already downstream, do not dirty downTask.\n  if (this._downstream !== downTask || this._dirty) {\n    this._downstream = downTask;\n    downTask._upstream = this;\n    downTask.dirty();\n  }\n};\ntaskProto.dispose = function () {\n  if (this._disposed) {\n    return;\n  }\n  this._upstream && (this._upstream._downstream = null);\n  this._downstream && (this._downstream._upstream = null);\n  this._dirty = false;\n  this._disposed = true;\n};\ntaskProto.getUpstream = function () {\n  return this._upstream;\n};\ntaskProto.getDownstream = function () {\n  return this._downstream;\n};\ntaskProto.setOutputEnd = function (end) {\n  // This only happend in dataTask, dataZoom, map, currently.\n  // where dataZoom do not set end each time, but only set\n  // when reset. So we should record the setted end, in case\n  // that the stub of dataZoom perform again and earse the\n  // setted end by upstream.\n  this._outputDueEnd = this._settedOutputEnd = end;\n}; ///////////////////////////////////////////////////////////\n// For stream debug (Should be commented out after used!)\n// Usage: printTask(this, 'begin');\n// Usage: printTask(this, null, {someExtraProp});\n// function printTask(task, prefix, extra) {\n//     window.ecTaskUID == null && (window.ecTaskUID = 0);\n//     task.uidDebug == null && (task.uidDebug = `task_${window.ecTaskUID++}`);\n//     task.agent && task.agent.uidDebug == null && (task.agent.uidDebug = `task_${window.ecTaskUID++}`);\n//     var props = [];\n//     if (task.__pipeline) {\n//         var val = `${task.__idxInPipeline}/${task.__pipeline.tail.__idxInPipeline} ${task.agent ? '(stub)' : ''}`;\n//         props.push({text: 'idx', value: val});\n//     } else {\n//         var stubCount = 0;\n//         task.agentStubMap.each(() => stubCount++);\n//         props.push({text: 'idx', value: `overall (stubs: ${stubCount})`});\n//     }\n//     props.push({text: 'uid', value: task.uidDebug});\n//     if (task.__pipeline) {\n//         props.push({text: 'pid', value: task.__pipeline.id});\n//         task.agent && props.push(\n//             {text: 'stubFor', value: task.agent.uidDebug}\n//         );\n//     }\n//     props.push(\n//         {text: 'dirty', value: task._dirty},\n//         {text: 'dueIndex', value: task._dueIndex},\n//         {text: 'dueEnd', value: task._dueEnd},\n//         {text: 'outputDueEnd', value: task._outputDueEnd}\n//     );\n//     if (extra) {\n//         Object.keys(extra).forEach(key => {\n//             props.push({text: key, value: extra[key]});\n//         });\n//     }\n//     var args = ['color: blue'];\n//     var msg = `%c[${prefix || 'T'}] %c` + props.map(item => (\n//         args.push('color: black', 'color: red'),\n//         `${item.text}: %c${item.value}`\n//     )).join('%c, ');\n//     console.log.apply(console, [msg].concat(args));\n//     // console.log(this);\n// }\n\nexports.createTask = createTask;","map":{"version":3,"names":["_util","require","assert","isArray","_config","__DEV__","createTask","define","Task","_reset","reset","_plan","plan","_count","count","_onDirty","onDirty","_dirty","context","taskProto","prototype","perform","performArgs","upTask","_upstream","skip","data","outputData","__pipeline","currentTask","planResult","lastModBy","normalizeModBy","_modBy","lastModDataCount","_modDataCount","modBy","modDataCount","val","forceFirstProgress","step","_dueEnd","_outputDueEnd","Infinity","_progress","start","_dueIndex","end","Math","min","progress","i","length","doProgress","outputDueEnd","_settedOutputEnd","unfinished","iterator","current","winCount","it","s","e","sStep","sCount","ceil","next","modNext","sequentialNext","dataIndex","result","dirty","taskIns","_callingProgress","downstream","_downstream","pipe","downTask","dispose","_disposed","getUpstream","getDownstream","setOutputEnd","exports"],"sources":["/Users/mac/Desktop/vue_bsm/vue3_bsm/node_modules/echarts/lib/stream/task.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar _util = require(\"zrender/lib/core/util\");\n\nvar assert = _util.assert;\nvar isArray = _util.isArray;\n\nvar _config = require(\"../config\");\n\nvar __DEV__ = _config.__DEV__;\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * @param {Object} define\n * @return See the return of `createTask`.\n */\nfunction createTask(define) {\n  return new Task(define);\n}\n/**\n * @constructor\n * @param {Object} define\n * @param {Function} define.reset Custom reset\n * @param {Function} [define.plan] Returns 'reset' indicate reset immediately.\n * @param {Function} [define.count] count is used to determin data task.\n * @param {Function} [define.onDirty] count is used to determin data task.\n */\n\n\nfunction Task(define) {\n  define = define || {};\n  this._reset = define.reset;\n  this._plan = define.plan;\n  this._count = define.count;\n  this._onDirty = define.onDirty;\n  this._dirty = true; // Context must be specified implicitly, to\n  // avoid miss update context when model changed.\n\n  this.context;\n}\n\nvar taskProto = Task.prototype;\n/**\n * @param {Object} performArgs\n * @param {number} [performArgs.step] Specified step.\n * @param {number} [performArgs.skip] Skip customer perform call.\n * @param {number} [performArgs.modBy] Sampling window size.\n * @param {number} [performArgs.modDataCount] Sampling count.\n */\n\ntaskProto.perform = function (performArgs) {\n  var upTask = this._upstream;\n  var skip = performArgs && performArgs.skip; // TODO some refactor.\n  // Pull data. Must pull data each time, because context.data\n  // may be updated by Series.setData.\n\n  if (this._dirty && upTask) {\n    var context = this.context;\n    context.data = context.outputData = upTask.context.outputData;\n  }\n\n  if (this.__pipeline) {\n    this.__pipeline.currentTask = this;\n  }\n\n  var planResult;\n\n  if (this._plan && !skip) {\n    planResult = this._plan(this.context);\n  } // Support sharding by mod, which changes the render sequence and makes the rendered graphic\n  // elements uniformed distributed when progress, especially when moving or zooming.\n\n\n  var lastModBy = normalizeModBy(this._modBy);\n  var lastModDataCount = this._modDataCount || 0;\n  var modBy = normalizeModBy(performArgs && performArgs.modBy);\n  var modDataCount = performArgs && performArgs.modDataCount || 0;\n\n  if (lastModBy !== modBy || lastModDataCount !== modDataCount) {\n    planResult = 'reset';\n  }\n\n  function normalizeModBy(val) {\n    !(val >= 1) && (val = 1); // jshint ignore:line\n\n    return val;\n  }\n\n  var forceFirstProgress;\n\n  if (this._dirty || planResult === 'reset') {\n    this._dirty = false;\n    forceFirstProgress = reset(this, skip);\n  }\n\n  this._modBy = modBy;\n  this._modDataCount = modDataCount;\n  var step = performArgs && performArgs.step;\n\n  if (upTask) {\n    this._dueEnd = upTask._outputDueEnd;\n  } // DataTask or overallTask\n  else {\n      this._dueEnd = this._count ? this._count(this.context) : Infinity;\n    } // Note: Stubs, that its host overall task let it has progress, has progress.\n  // If no progress, pass index from upstream to downstream each time plan called.\n\n\n  if (this._progress) {\n    var start = this._dueIndex;\n    var end = Math.min(step != null ? this._dueIndex + step : Infinity, this._dueEnd);\n\n    if (!skip && (forceFirstProgress || start < end)) {\n      var progress = this._progress;\n\n      if (isArray(progress)) {\n        for (var i = 0; i < progress.length; i++) {\n          doProgress(this, progress[i], start, end, modBy, modDataCount);\n        }\n      } else {\n        doProgress(this, progress, start, end, modBy, modDataCount);\n      }\n    }\n\n    this._dueIndex = end; // If no `outputDueEnd`, assume that output data and\n    // input data is the same, so use `dueIndex` as `outputDueEnd`.\n\n    var outputDueEnd = this._settedOutputEnd != null ? this._settedOutputEnd : end;\n    this._outputDueEnd = outputDueEnd;\n  } else {\n    // (1) Some overall task has no progress.\n    // (2) Stubs, that its host overall task do not let it has progress, has no progress.\n    // This should always be performed so it can be passed to downstream.\n    this._dueIndex = this._outputDueEnd = this._settedOutputEnd != null ? this._settedOutputEnd : this._dueEnd;\n  }\n\n  return this.unfinished();\n};\n\nvar iterator = function () {\n  var end;\n  var current;\n  var modBy;\n  var modDataCount;\n  var winCount;\n  var it = {\n    reset: function (s, e, sStep, sCount) {\n      current = s;\n      end = e;\n      modBy = sStep;\n      modDataCount = sCount;\n      winCount = Math.ceil(modDataCount / modBy);\n      it.next = modBy > 1 && modDataCount > 0 ? modNext : sequentialNext;\n    }\n  };\n  return it;\n\n  function sequentialNext() {\n    return current < end ? current++ : null;\n  }\n\n  function modNext() {\n    var dataIndex = current % winCount * modBy + Math.ceil(current / winCount);\n    var result = current >= end ? null : dataIndex < modDataCount ? dataIndex // If modDataCount is smaller than data.count() (consider `appendData` case),\n    // Use normal linear rendering mode.\n    : current;\n    current++;\n    return result;\n  }\n}();\n\ntaskProto.dirty = function () {\n  this._dirty = true;\n  this._onDirty && this._onDirty(this.context);\n};\n\nfunction doProgress(taskIns, progress, start, end, modBy, modDataCount) {\n  iterator.reset(start, end, modBy, modDataCount);\n  taskIns._callingProgress = progress;\n\n  taskIns._callingProgress({\n    start: start,\n    end: end,\n    count: end - start,\n    next: iterator.next\n  }, taskIns.context);\n}\n\nfunction reset(taskIns, skip) {\n  taskIns._dueIndex = taskIns._outputDueEnd = taskIns._dueEnd = 0;\n  taskIns._settedOutputEnd = null;\n  var progress;\n  var forceFirstProgress;\n\n  if (!skip && taskIns._reset) {\n    progress = taskIns._reset(taskIns.context);\n\n    if (progress && progress.progress) {\n      forceFirstProgress = progress.forceFirstProgress;\n      progress = progress.progress;\n    } // To simplify no progress checking, array must has item.\n\n\n    if (isArray(progress) && !progress.length) {\n      progress = null;\n    }\n  }\n\n  taskIns._progress = progress;\n  taskIns._modBy = taskIns._modDataCount = null;\n  var downstream = taskIns._downstream;\n  downstream && downstream.dirty();\n  return forceFirstProgress;\n}\n/**\n * @return {boolean}\n */\n\n\ntaskProto.unfinished = function () {\n  return this._progress && this._dueIndex < this._dueEnd;\n};\n/**\n * @param {Object} downTask The downstream task.\n * @return {Object} The downstream task.\n */\n\n\ntaskProto.pipe = function (downTask) {\n  // If already downstream, do not dirty downTask.\n  if (this._downstream !== downTask || this._dirty) {\n    this._downstream = downTask;\n    downTask._upstream = this;\n    downTask.dirty();\n  }\n};\n\ntaskProto.dispose = function () {\n  if (this._disposed) {\n    return;\n  }\n\n  this._upstream && (this._upstream._downstream = null);\n  this._downstream && (this._downstream._upstream = null);\n  this._dirty = false;\n  this._disposed = true;\n};\n\ntaskProto.getUpstream = function () {\n  return this._upstream;\n};\n\ntaskProto.getDownstream = function () {\n  return this._downstream;\n};\n\ntaskProto.setOutputEnd = function (end) {\n  // This only happend in dataTask, dataZoom, map, currently.\n  // where dataZoom do not set end each time, but only set\n  // when reset. So we should record the setted end, in case\n  // that the stub of dataZoom perform again and earse the\n  // setted end by upstream.\n  this._outputDueEnd = this._settedOutputEnd = end;\n}; ///////////////////////////////////////////////////////////\n// For stream debug (Should be commented out after used!)\n// Usage: printTask(this, 'begin');\n// Usage: printTask(this, null, {someExtraProp});\n// function printTask(task, prefix, extra) {\n//     window.ecTaskUID == null && (window.ecTaskUID = 0);\n//     task.uidDebug == null && (task.uidDebug = `task_${window.ecTaskUID++}`);\n//     task.agent && task.agent.uidDebug == null && (task.agent.uidDebug = `task_${window.ecTaskUID++}`);\n//     var props = [];\n//     if (task.__pipeline) {\n//         var val = `${task.__idxInPipeline}/${task.__pipeline.tail.__idxInPipeline} ${task.agent ? '(stub)' : ''}`;\n//         props.push({text: 'idx', value: val});\n//     } else {\n//         var stubCount = 0;\n//         task.agentStubMap.each(() => stubCount++);\n//         props.push({text: 'idx', value: `overall (stubs: ${stubCount})`});\n//     }\n//     props.push({text: 'uid', value: task.uidDebug});\n//     if (task.__pipeline) {\n//         props.push({text: 'pid', value: task.__pipeline.id});\n//         task.agent && props.push(\n//             {text: 'stubFor', value: task.agent.uidDebug}\n//         );\n//     }\n//     props.push(\n//         {text: 'dirty', value: task._dirty},\n//         {text: 'dueIndex', value: task._dueIndex},\n//         {text: 'dueEnd', value: task._dueEnd},\n//         {text: 'outputDueEnd', value: task._outputDueEnd}\n//     );\n//     if (extra) {\n//         Object.keys(extra).forEach(key => {\n//             props.push({text: key, value: extra[key]});\n//         });\n//     }\n//     var args = ['color: blue'];\n//     var msg = `%c[${prefix || 'T'}] %c` + props.map(item => (\n//         args.push('color: black', 'color: red'),\n//         `${item.text}: %c${item.value}`\n//     )).join('%c, ');\n//     console.log.apply(console, [msg].concat(args));\n//     // console.log(this);\n// }\n\n\nexports.createTask = createTask;"],"mappings":"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E;IAClB;EACF;EAEA,IAAI,CAACvD,SAAS,KAAK,IAAI,CAACA,SAAS,CAACmD,WAAW,GAAG,IAAI,CAAC;EACrD,IAAI,CAACA,WAAW,KAAK,IAAI,CAACA,WAAW,CAACnD,SAAS,GAAG,IAAI,CAAC;EACvD,IAAI,CAACP,MAAM,GAAG,KAAK;EACnB,IAAI,CAAC8D,SAAS,GAAG,IAAI;AACvB,CAAC;AAED5D,SAAS,CAAC6D,WAAW,GAAG,YAAY;EAClC,OAAO,IAAI,CAACxD,SAAS;AACvB,CAAC;AAEDL,SAAS,CAAC8D,aAAa,GAAG,YAAY;EACpC,OAAO,IAAI,CAACN,WAAW;AACzB,CAAC;AAEDxD,SAAS,CAAC+D,YAAY,GAAG,UAAUnC,GAAG,EAAE;EACtC;EACA;EACA;EACA;EACA;EACA,IAAI,CAACL,aAAa,GAAG,IAAI,CAACa,gBAAgB,GAAGR,GAAG;AAClD,CAAC,CAAC,CAAC;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGAoC,OAAO,CAAC7E,UAAU,GAAGA,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}