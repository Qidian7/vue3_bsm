{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar zrUtil = require(\"zrender/lib/core/util\");\nvar Model = require(\"../../model/Model\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar each = zrUtil.each;\nvar curry = zrUtil.curry; // Build axisPointerModel, mergin tooltip.axisPointer model for each axis.\n// allAxesInfo should be updated when setOption performed.\n\nfunction collect(ecModel, api) {\n  var result = {\n    /**\n     * key: makeKey(axis.model)\n     * value: {\n     *      axis,\n     *      coordSys,\n     *      axisPointerModel,\n     *      triggerTooltip,\n     *      involveSeries,\n     *      snap,\n     *      seriesModels,\n     *      seriesDataCount\n     * }\n     */\n    axesInfo: {},\n    seriesInvolved: false,\n    /**\n     * key: makeKey(coordSys.model)\n     * value: Object: key makeKey(axis.model), value: axisInfo\n     */\n    coordSysAxesInfo: {},\n    coordSysMap: {}\n  };\n  collectAxesInfo(result, ecModel, api); // Check seriesInvolved for performance, in case too many series in some chart.\n\n  result.seriesInvolved && collectSeriesInfo(result, ecModel);\n  return result;\n}\nfunction collectAxesInfo(result, ecModel, api) {\n  var globalTooltipModel = ecModel.getComponent('tooltip');\n  var globalAxisPointerModel = ecModel.getComponent('axisPointer'); // links can only be set on global.\n\n  var linksOption = globalAxisPointerModel.get('link', true) || [];\n  var linkGroups = []; // Collect axes info.\n\n  each(api.getCoordinateSystems(), function (coordSys) {\n    // Some coordinate system do not support axes, like geo.\n    if (!coordSys.axisPointerEnabled) {\n      return;\n    }\n    var coordSysKey = makeKey(coordSys.model);\n    var axesInfoInCoordSys = result.coordSysAxesInfo[coordSysKey] = {};\n    result.coordSysMap[coordSysKey] = coordSys; // Set tooltip (like 'cross') is a convienent way to show axisPointer\n    // for user. So we enable seting tooltip on coordSys model.\n\n    var coordSysModel = coordSys.model;\n    var baseTooltipModel = coordSysModel.getModel('tooltip', globalTooltipModel);\n    each(coordSys.getAxes(), curry(saveTooltipAxisInfo, false, null)); // If axis tooltip used, choose tooltip axis for each coordSys.\n    // Notice this case: coordSys is `grid` but not `cartesian2D` here.\n\n    if (coordSys.getTooltipAxes && globalTooltipModel // If tooltip.showContent is set as false, tooltip will not\n    // show but axisPointer will show as normal.\n    && baseTooltipModel.get('show')) {\n      // Compatible with previous logic. But series.tooltip.trigger: 'axis'\n      // or series.data[n].tooltip.trigger: 'axis' are not support any more.\n      var triggerAxis = baseTooltipModel.get('trigger') === 'axis';\n      var cross = baseTooltipModel.get('axisPointer.type') === 'cross';\n      var tooltipAxes = coordSys.getTooltipAxes(baseTooltipModel.get('axisPointer.axis'));\n      if (triggerAxis || cross) {\n        each(tooltipAxes.baseAxes, curry(saveTooltipAxisInfo, cross ? 'cross' : true, triggerAxis));\n      }\n      if (cross) {\n        each(tooltipAxes.otherAxes, curry(saveTooltipAxisInfo, 'cross', false));\n      }\n    } // fromTooltip: true | false | 'cross'\n    // triggerTooltip: true | false | null\n\n    function saveTooltipAxisInfo(fromTooltip, triggerTooltip, axis) {\n      var axisPointerModel = axis.model.getModel('axisPointer', globalAxisPointerModel);\n      var axisPointerShow = axisPointerModel.get('show');\n      if (!axisPointerShow || axisPointerShow === 'auto' && !fromTooltip && !isHandleTrigger(axisPointerModel)) {\n        return;\n      }\n      if (triggerTooltip == null) {\n        triggerTooltip = axisPointerModel.get('triggerTooltip');\n      }\n      axisPointerModel = fromTooltip ? makeAxisPointerModel(axis, baseTooltipModel, globalAxisPointerModel, ecModel, fromTooltip, triggerTooltip) : axisPointerModel;\n      var snap = axisPointerModel.get('snap');\n      var key = makeKey(axis.model);\n      var involveSeries = triggerTooltip || snap || axis.type === 'category'; // If result.axesInfo[key] exist, override it (tooltip has higher priority).\n\n      var axisInfo = result.axesInfo[key] = {\n        key: key,\n        axis: axis,\n        coordSys: coordSys,\n        axisPointerModel: axisPointerModel,\n        triggerTooltip: triggerTooltip,\n        involveSeries: involveSeries,\n        snap: snap,\n        useHandle: isHandleTrigger(axisPointerModel),\n        seriesModels: []\n      };\n      axesInfoInCoordSys[key] = axisInfo;\n      result.seriesInvolved |= involveSeries;\n      var groupIndex = getLinkGroupIndex(linksOption, axis);\n      if (groupIndex != null) {\n        var linkGroup = linkGroups[groupIndex] || (linkGroups[groupIndex] = {\n          axesInfo: {}\n        });\n        linkGroup.axesInfo[key] = axisInfo;\n        linkGroup.mapper = linksOption[groupIndex].mapper;\n        axisInfo.linkGroup = linkGroup;\n      }\n    }\n  });\n}\nfunction makeAxisPointerModel(axis, baseTooltipModel, globalAxisPointerModel, ecModel, fromTooltip, triggerTooltip) {\n  var tooltipAxisPointerModel = baseTooltipModel.getModel('axisPointer');\n  var volatileOption = {};\n  each(['type', 'snap', 'lineStyle', 'shadowStyle', 'label', 'animation', 'animationDurationUpdate', 'animationEasingUpdate', 'z'], function (field) {\n    volatileOption[field] = zrUtil.clone(tooltipAxisPointerModel.get(field));\n  }); // category axis do not auto snap, otherwise some tick that do not\n  // has value can not be hovered. value/time/log axis default snap if\n  // triggered from tooltip and trigger tooltip.\n\n  volatileOption.snap = axis.type !== 'category' && !!triggerTooltip; // Compatibel with previous behavior, tooltip axis do not show label by default.\n  // Only these properties can be overrided from tooltip to axisPointer.\n\n  if (tooltipAxisPointerModel.get('type') === 'cross') {\n    volatileOption.type = 'line';\n  }\n  var labelOption = volatileOption.label || (volatileOption.label = {}); // Follow the convention, do not show label when triggered by tooltip by default.\n\n  labelOption.show == null && (labelOption.show = false);\n  if (fromTooltip === 'cross') {\n    // When 'cross', both axes show labels.\n    var tooltipAxisPointerLabelShow = tooltipAxisPointerModel.get('label.show');\n    labelOption.show = tooltipAxisPointerLabelShow != null ? tooltipAxisPointerLabelShow : true; // If triggerTooltip, this is a base axis, which should better not use cross style\n    // (cross style is dashed by default)\n\n    if (!triggerTooltip) {\n      var crossStyle = volatileOption.lineStyle = tooltipAxisPointerModel.get('crossStyle');\n      crossStyle && zrUtil.defaults(labelOption, crossStyle.textStyle);\n    }\n  }\n  return axis.model.getModel('axisPointer', new Model(volatileOption, globalAxisPointerModel, ecModel));\n}\nfunction collectSeriesInfo(result, ecModel) {\n  // Prepare data for axis trigger\n  ecModel.eachSeries(function (seriesModel) {\n    // Notice this case: this coordSys is `cartesian2D` but not `grid`.\n    var coordSys = seriesModel.coordinateSystem;\n    var seriesTooltipTrigger = seriesModel.get('tooltip.trigger', true);\n    var seriesTooltipShow = seriesModel.get('tooltip.show', true);\n    if (!coordSys || seriesTooltipTrigger === 'none' || seriesTooltipTrigger === false || seriesTooltipTrigger === 'item' || seriesTooltipShow === false || seriesModel.get('axisPointer.show', true) === false) {\n      return;\n    }\n    each(result.coordSysAxesInfo[makeKey(coordSys.model)], function (axisInfo) {\n      var axis = axisInfo.axis;\n      if (coordSys.getAxis(axis.dim) === axis) {\n        axisInfo.seriesModels.push(seriesModel);\n        axisInfo.seriesDataCount == null && (axisInfo.seriesDataCount = 0);\n        axisInfo.seriesDataCount += seriesModel.getData().count();\n      }\n    });\n  }, this);\n}\n/**\n * For example:\n * {\n *     axisPointer: {\n *         links: [{\n *             xAxisIndex: [2, 4],\n *             yAxisIndex: 'all'\n *         }, {\n *             xAxisId: ['a5', 'a7'],\n *             xAxisName: 'xxx'\n *         }]\n *     }\n * }\n */\n\nfunction getLinkGroupIndex(linksOption, axis) {\n  var axisModel = axis.model;\n  var dim = axis.dim;\n  for (var i = 0; i < linksOption.length; i++) {\n    var linkOption = linksOption[i] || {};\n    if (checkPropInLink(linkOption[dim + 'AxisId'], axisModel.id) || checkPropInLink(linkOption[dim + 'AxisIndex'], axisModel.componentIndex) || checkPropInLink(linkOption[dim + 'AxisName'], axisModel.name)) {\n      return i;\n    }\n  }\n}\nfunction checkPropInLink(linkPropValue, axisPropValue) {\n  return linkPropValue === 'all' || zrUtil.isArray(linkPropValue) && zrUtil.indexOf(linkPropValue, axisPropValue) >= 0 || linkPropValue === axisPropValue;\n}\nfunction fixValue(axisModel) {\n  var axisInfo = getAxisInfo(axisModel);\n  if (!axisInfo) {\n    return;\n  }\n  var axisPointerModel = axisInfo.axisPointerModel;\n  var scale = axisInfo.axis.scale;\n  var option = axisPointerModel.option;\n  var status = axisPointerModel.get('status');\n  var value = axisPointerModel.get('value'); // Parse init value for category and time axis.\n\n  if (value != null) {\n    value = scale.parse(value);\n  }\n  var useHandle = isHandleTrigger(axisPointerModel); // If `handle` used, `axisPointer` will always be displayed, so value\n  // and status should be initialized.\n\n  if (status == null) {\n    option.status = useHandle ? 'show' : 'hide';\n  }\n  var extent = scale.getExtent().slice();\n  extent[0] > extent[1] && extent.reverse();\n  if (\n  // Pick a value on axis when initializing.\n  value == null // If both `handle` and `dataZoom` are used, value may be out of axis extent,\n  // where we should re-pick a value to keep `handle` displaying normally.\n  || value > extent[1]) {\n    // Make handle displayed on the end of the axis when init, which looks better.\n    value = extent[1];\n  }\n  if (value < extent[0]) {\n    value = extent[0];\n  }\n  option.value = value;\n  if (useHandle) {\n    option.status = axisInfo.axis.scale.isBlank() ? 'hide' : 'show';\n  }\n}\nfunction getAxisInfo(axisModel) {\n  var coordSysAxesInfo = (axisModel.ecModel.getComponent('axisPointer') || {}).coordSysAxesInfo;\n  return coordSysAxesInfo && coordSysAxesInfo.axesInfo[makeKey(axisModel)];\n}\nfunction getAxisPointerModel(axisModel) {\n  var axisInfo = getAxisInfo(axisModel);\n  return axisInfo && axisInfo.axisPointerModel;\n}\nfunction isHandleTrigger(axisPointerModel) {\n  return !!axisPointerModel.get('handle.show');\n}\n/**\n * @param {module:echarts/model/Model} model\n * @return {string} unique key\n */\n\nfunction makeKey(model) {\n  return model.type + '||' + model.id;\n}\nexports.collect = collect;\nexports.fixValue = fixValue;\nexports.getAxisInfo = getAxisInfo;\nexports.getAxisPointerModel = getAxisPointerModel;\nexports.makeKey = makeKey;","map":{"version":3,"names":["zrUtil","require","Model","each","curry","collect","ecModel","api","result","axesInfo","seriesInvolved","coordSysAxesInfo","coordSysMap","collectAxesInfo","collectSeriesInfo","globalTooltipModel","getComponent","globalAxisPointerModel","linksOption","get","linkGroups","getCoordinateSystems","coordSys","axisPointerEnabled","coordSysKey","makeKey","model","axesInfoInCoordSys","coordSysModel","baseTooltipModel","getModel","getAxes","saveTooltipAxisInfo","getTooltipAxes","triggerAxis","cross","tooltipAxes","baseAxes","otherAxes","fromTooltip","triggerTooltip","axis","axisPointerModel","axisPointerShow","isHandleTrigger","makeAxisPointerModel","snap","key","involveSeries","type","axisInfo","useHandle","seriesModels","groupIndex","getLinkGroupIndex","linkGroup","mapper","tooltipAxisPointerModel","volatileOption","field","clone","labelOption","label","show","tooltipAxisPointerLabelShow","crossStyle","lineStyle","defaults","textStyle","eachSeries","seriesModel","coordinateSystem","seriesTooltipTrigger","seriesTooltipShow","getAxis","dim","push","seriesDataCount","getData","count","axisModel","i","length","linkOption","checkPropInLink","id","componentIndex","name","linkPropValue","axisPropValue","isArray","indexOf","fixValue","getAxisInfo","scale","option","status","value","parse","extent","getExtent","slice","reverse","isBlank","getAxisPointerModel","exports"],"sources":["/Users/mac/Desktop/vue_bsm/vue3_bsm/node_modules/echarts/lib/component/axisPointer/modelHelper.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar Model = require(\"../../model/Model\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar each = zrUtil.each;\nvar curry = zrUtil.curry; // Build axisPointerModel, mergin tooltip.axisPointer model for each axis.\n// allAxesInfo should be updated when setOption performed.\n\nfunction collect(ecModel, api) {\n  var result = {\n    /**\n     * key: makeKey(axis.model)\n     * value: {\n     *      axis,\n     *      coordSys,\n     *      axisPointerModel,\n     *      triggerTooltip,\n     *      involveSeries,\n     *      snap,\n     *      seriesModels,\n     *      seriesDataCount\n     * }\n     */\n    axesInfo: {},\n    seriesInvolved: false,\n\n    /**\n     * key: makeKey(coordSys.model)\n     * value: Object: key makeKey(axis.model), value: axisInfo\n     */\n    coordSysAxesInfo: {},\n    coordSysMap: {}\n  };\n  collectAxesInfo(result, ecModel, api); // Check seriesInvolved for performance, in case too many series in some chart.\n\n  result.seriesInvolved && collectSeriesInfo(result, ecModel);\n  return result;\n}\n\nfunction collectAxesInfo(result, ecModel, api) {\n  var globalTooltipModel = ecModel.getComponent('tooltip');\n  var globalAxisPointerModel = ecModel.getComponent('axisPointer'); // links can only be set on global.\n\n  var linksOption = globalAxisPointerModel.get('link', true) || [];\n  var linkGroups = []; // Collect axes info.\n\n  each(api.getCoordinateSystems(), function (coordSys) {\n    // Some coordinate system do not support axes, like geo.\n    if (!coordSys.axisPointerEnabled) {\n      return;\n    }\n\n    var coordSysKey = makeKey(coordSys.model);\n    var axesInfoInCoordSys = result.coordSysAxesInfo[coordSysKey] = {};\n    result.coordSysMap[coordSysKey] = coordSys; // Set tooltip (like 'cross') is a convienent way to show axisPointer\n    // for user. So we enable seting tooltip on coordSys model.\n\n    var coordSysModel = coordSys.model;\n    var baseTooltipModel = coordSysModel.getModel('tooltip', globalTooltipModel);\n    each(coordSys.getAxes(), curry(saveTooltipAxisInfo, false, null)); // If axis tooltip used, choose tooltip axis for each coordSys.\n    // Notice this case: coordSys is `grid` but not `cartesian2D` here.\n\n    if (coordSys.getTooltipAxes && globalTooltipModel // If tooltip.showContent is set as false, tooltip will not\n    // show but axisPointer will show as normal.\n    && baseTooltipModel.get('show')) {\n      // Compatible with previous logic. But series.tooltip.trigger: 'axis'\n      // or series.data[n].tooltip.trigger: 'axis' are not support any more.\n      var triggerAxis = baseTooltipModel.get('trigger') === 'axis';\n      var cross = baseTooltipModel.get('axisPointer.type') === 'cross';\n      var tooltipAxes = coordSys.getTooltipAxes(baseTooltipModel.get('axisPointer.axis'));\n\n      if (triggerAxis || cross) {\n        each(tooltipAxes.baseAxes, curry(saveTooltipAxisInfo, cross ? 'cross' : true, triggerAxis));\n      }\n\n      if (cross) {\n        each(tooltipAxes.otherAxes, curry(saveTooltipAxisInfo, 'cross', false));\n      }\n    } // fromTooltip: true | false | 'cross'\n    // triggerTooltip: true | false | null\n\n\n    function saveTooltipAxisInfo(fromTooltip, triggerTooltip, axis) {\n      var axisPointerModel = axis.model.getModel('axisPointer', globalAxisPointerModel);\n      var axisPointerShow = axisPointerModel.get('show');\n\n      if (!axisPointerShow || axisPointerShow === 'auto' && !fromTooltip && !isHandleTrigger(axisPointerModel)) {\n        return;\n      }\n\n      if (triggerTooltip == null) {\n        triggerTooltip = axisPointerModel.get('triggerTooltip');\n      }\n\n      axisPointerModel = fromTooltip ? makeAxisPointerModel(axis, baseTooltipModel, globalAxisPointerModel, ecModel, fromTooltip, triggerTooltip) : axisPointerModel;\n      var snap = axisPointerModel.get('snap');\n      var key = makeKey(axis.model);\n      var involveSeries = triggerTooltip || snap || axis.type === 'category'; // If result.axesInfo[key] exist, override it (tooltip has higher priority).\n\n      var axisInfo = result.axesInfo[key] = {\n        key: key,\n        axis: axis,\n        coordSys: coordSys,\n        axisPointerModel: axisPointerModel,\n        triggerTooltip: triggerTooltip,\n        involveSeries: involveSeries,\n        snap: snap,\n        useHandle: isHandleTrigger(axisPointerModel),\n        seriesModels: []\n      };\n      axesInfoInCoordSys[key] = axisInfo;\n      result.seriesInvolved |= involveSeries;\n      var groupIndex = getLinkGroupIndex(linksOption, axis);\n\n      if (groupIndex != null) {\n        var linkGroup = linkGroups[groupIndex] || (linkGroups[groupIndex] = {\n          axesInfo: {}\n        });\n        linkGroup.axesInfo[key] = axisInfo;\n        linkGroup.mapper = linksOption[groupIndex].mapper;\n        axisInfo.linkGroup = linkGroup;\n      }\n    }\n  });\n}\n\nfunction makeAxisPointerModel(axis, baseTooltipModel, globalAxisPointerModel, ecModel, fromTooltip, triggerTooltip) {\n  var tooltipAxisPointerModel = baseTooltipModel.getModel('axisPointer');\n  var volatileOption = {};\n  each(['type', 'snap', 'lineStyle', 'shadowStyle', 'label', 'animation', 'animationDurationUpdate', 'animationEasingUpdate', 'z'], function (field) {\n    volatileOption[field] = zrUtil.clone(tooltipAxisPointerModel.get(field));\n  }); // category axis do not auto snap, otherwise some tick that do not\n  // has value can not be hovered. value/time/log axis default snap if\n  // triggered from tooltip and trigger tooltip.\n\n  volatileOption.snap = axis.type !== 'category' && !!triggerTooltip; // Compatibel with previous behavior, tooltip axis do not show label by default.\n  // Only these properties can be overrided from tooltip to axisPointer.\n\n  if (tooltipAxisPointerModel.get('type') === 'cross') {\n    volatileOption.type = 'line';\n  }\n\n  var labelOption = volatileOption.label || (volatileOption.label = {}); // Follow the convention, do not show label when triggered by tooltip by default.\n\n  labelOption.show == null && (labelOption.show = false);\n\n  if (fromTooltip === 'cross') {\n    // When 'cross', both axes show labels.\n    var tooltipAxisPointerLabelShow = tooltipAxisPointerModel.get('label.show');\n    labelOption.show = tooltipAxisPointerLabelShow != null ? tooltipAxisPointerLabelShow : true; // If triggerTooltip, this is a base axis, which should better not use cross style\n    // (cross style is dashed by default)\n\n    if (!triggerTooltip) {\n      var crossStyle = volatileOption.lineStyle = tooltipAxisPointerModel.get('crossStyle');\n      crossStyle && zrUtil.defaults(labelOption, crossStyle.textStyle);\n    }\n  }\n\n  return axis.model.getModel('axisPointer', new Model(volatileOption, globalAxisPointerModel, ecModel));\n}\n\nfunction collectSeriesInfo(result, ecModel) {\n  // Prepare data for axis trigger\n  ecModel.eachSeries(function (seriesModel) {\n    // Notice this case: this coordSys is `cartesian2D` but not `grid`.\n    var coordSys = seriesModel.coordinateSystem;\n    var seriesTooltipTrigger = seriesModel.get('tooltip.trigger', true);\n    var seriesTooltipShow = seriesModel.get('tooltip.show', true);\n\n    if (!coordSys || seriesTooltipTrigger === 'none' || seriesTooltipTrigger === false || seriesTooltipTrigger === 'item' || seriesTooltipShow === false || seriesModel.get('axisPointer.show', true) === false) {\n      return;\n    }\n\n    each(result.coordSysAxesInfo[makeKey(coordSys.model)], function (axisInfo) {\n      var axis = axisInfo.axis;\n\n      if (coordSys.getAxis(axis.dim) === axis) {\n        axisInfo.seriesModels.push(seriesModel);\n        axisInfo.seriesDataCount == null && (axisInfo.seriesDataCount = 0);\n        axisInfo.seriesDataCount += seriesModel.getData().count();\n      }\n    });\n  }, this);\n}\n/**\n * For example:\n * {\n *     axisPointer: {\n *         links: [{\n *             xAxisIndex: [2, 4],\n *             yAxisIndex: 'all'\n *         }, {\n *             xAxisId: ['a5', 'a7'],\n *             xAxisName: 'xxx'\n *         }]\n *     }\n * }\n */\n\n\nfunction getLinkGroupIndex(linksOption, axis) {\n  var axisModel = axis.model;\n  var dim = axis.dim;\n\n  for (var i = 0; i < linksOption.length; i++) {\n    var linkOption = linksOption[i] || {};\n\n    if (checkPropInLink(linkOption[dim + 'AxisId'], axisModel.id) || checkPropInLink(linkOption[dim + 'AxisIndex'], axisModel.componentIndex) || checkPropInLink(linkOption[dim + 'AxisName'], axisModel.name)) {\n      return i;\n    }\n  }\n}\n\nfunction checkPropInLink(linkPropValue, axisPropValue) {\n  return linkPropValue === 'all' || zrUtil.isArray(linkPropValue) && zrUtil.indexOf(linkPropValue, axisPropValue) >= 0 || linkPropValue === axisPropValue;\n}\n\nfunction fixValue(axisModel) {\n  var axisInfo = getAxisInfo(axisModel);\n\n  if (!axisInfo) {\n    return;\n  }\n\n  var axisPointerModel = axisInfo.axisPointerModel;\n  var scale = axisInfo.axis.scale;\n  var option = axisPointerModel.option;\n  var status = axisPointerModel.get('status');\n  var value = axisPointerModel.get('value'); // Parse init value for category and time axis.\n\n  if (value != null) {\n    value = scale.parse(value);\n  }\n\n  var useHandle = isHandleTrigger(axisPointerModel); // If `handle` used, `axisPointer` will always be displayed, so value\n  // and status should be initialized.\n\n  if (status == null) {\n    option.status = useHandle ? 'show' : 'hide';\n  }\n\n  var extent = scale.getExtent().slice();\n  extent[0] > extent[1] && extent.reverse();\n\n  if ( // Pick a value on axis when initializing.\n  value == null // If both `handle` and `dataZoom` are used, value may be out of axis extent,\n  // where we should re-pick a value to keep `handle` displaying normally.\n  || value > extent[1]) {\n    // Make handle displayed on the end of the axis when init, which looks better.\n    value = extent[1];\n  }\n\n  if (value < extent[0]) {\n    value = extent[0];\n  }\n\n  option.value = value;\n\n  if (useHandle) {\n    option.status = axisInfo.axis.scale.isBlank() ? 'hide' : 'show';\n  }\n}\n\nfunction getAxisInfo(axisModel) {\n  var coordSysAxesInfo = (axisModel.ecModel.getComponent('axisPointer') || {}).coordSysAxesInfo;\n  return coordSysAxesInfo && coordSysAxesInfo.axesInfo[makeKey(axisModel)];\n}\n\nfunction getAxisPointerModel(axisModel) {\n  var axisInfo = getAxisInfo(axisModel);\n  return axisInfo && axisInfo.axisPointerModel;\n}\n\nfunction isHandleTrigger(axisPointerModel) {\n  return !!axisPointerModel.get('handle.show');\n}\n/**\n * @param {module:echarts/model/Model} model\n * @return {string} unique key\n */\n\n\nfunction makeKey(model) {\n  return model.type + '||' + model.id;\n}\n\nexports.collect = collect;\nexports.fixValue = fixValue;\nexports.getAxisInfo = getAxisInfo;\nexports.getAxisPointerModel = getAxisPointerModel;\nexports.makeKey = makeKey;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}