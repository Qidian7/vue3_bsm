{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar _config = require(\"../config\");\nvar __DEV__ = _config.__DEV__;\nvar zrUtil = require(\"zrender/lib/core/util\");\nvar env = require(\"zrender/lib/core/env\");\nvar _format = require(\"../util/format\");\nvar formatTime = _format.formatTime;\nvar encodeHTML = _format.encodeHTML;\nvar addCommas = _format.addCommas;\nvar getTooltipMarker = _format.getTooltipMarker;\nvar modelUtil = require(\"../util/model\");\nvar ComponentModel = require(\"./Component\");\nvar colorPaletteMixin = require(\"./mixin/colorPalette\");\nvar dataFormatMixin = require(\"../model/mixin/dataFormat\");\nvar _layout = require(\"../util/layout\");\nvar getLayoutParams = _layout.getLayoutParams;\nvar mergeLayoutParam = _layout.mergeLayoutParam;\nvar _task = require(\"../stream/task\");\nvar createTask = _task.createTask;\nvar _sourceHelper = require(\"../data/helper/sourceHelper\");\nvar prepareSource = _sourceHelper.prepareSource;\nvar getSource = _sourceHelper.getSource;\nvar _dataProvider = require(\"../data/helper/dataProvider\");\nvar retrieveRawValue = _dataProvider.retrieveRawValue;\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar inner = modelUtil.makeInner();\nvar SeriesModel = ComponentModel.extend({\n  type: 'series.__base__',\n  /**\n   * @readOnly\n   */\n  seriesIndex: 0,\n  // coodinateSystem will be injected in the echarts/CoordinateSystem\n  coordinateSystem: null,\n  /**\n   * @type {Object}\n   * @protected\n   */\n  defaultOption: null,\n  /**\n   * legend visual provider to the legend component\n   * @type {Object}\n   */\n  // PENDING\n  legendVisualProvider: null,\n  /**\n   * Access path of color for visual\n   */\n  visualColorAccessPath: 'itemStyle.color',\n  /**\n   * Access path of borderColor for visual\n   */\n  visualBorderColorAccessPath: 'itemStyle.borderColor',\n  /**\n   * Support merge layout params.\n   * Only support 'box' now (left/right/top/bottom/width/height).\n   * @type {string|Object} Object can be {ignoreSize: true}\n   * @readOnly\n   */\n  layoutMode: null,\n  init: function (option, parentModel, ecModel, extraOpt) {\n    /**\n     * @type {number}\n     * @readOnly\n     */\n    this.seriesIndex = this.componentIndex;\n    this.dataTask = createTask({\n      count: dataTaskCount,\n      reset: dataTaskReset\n    });\n    this.dataTask.context = {\n      model: this\n    };\n    this.mergeDefaultAndTheme(option, ecModel);\n    prepareSource(this);\n    var data = this.getInitialData(option, ecModel);\n    wrapData(data, this);\n    this.dataTask.context.data = data;\n\n    /**\n     * @type {module:echarts/data/List|module:echarts/data/Tree|module:echarts/data/Graph}\n     * @private\n     */\n    inner(this).dataBeforeProcessed = data; // If we reverse the order (make data firstly, and then make\n    // dataBeforeProcessed by cloneShallow), cloneShallow will\n    // cause data.graph.data !== data when using\n    // module:echarts/data/Graph or module:echarts/data/Tree.\n    // See module:echarts/data/helper/linkList\n    // Theoretically, it is unreasonable to call `seriesModel.getData()` in the model\n    // init or merge stage, because the data can be restored. So we do not `restoreData`\n    // and `setData` here, which forbids calling `seriesModel.getData()` in this stage.\n    // Call `seriesModel.getRawData()` instead.\n    // this.restoreData();\n\n    autoSeriesName(this);\n  },\n  /**\n   * Util for merge default and theme to option\n   * @param  {Object} option\n   * @param  {module:echarts/model/Global} ecModel\n   */\n  mergeDefaultAndTheme: function (option, ecModel) {\n    var layoutMode = this.layoutMode;\n    var inputPositionParams = layoutMode ? getLayoutParams(option) : {}; // Backward compat: using subType on theme.\n    // But if name duplicate between series subType\n    // (for example: parallel) add component mainType,\n    // add suffix 'Series'.\n\n    var themeSubType = this.subType;\n    if (ComponentModel.hasClass(themeSubType)) {\n      themeSubType += 'Series';\n    }\n    zrUtil.merge(option, ecModel.getTheme().get(this.subType));\n    zrUtil.merge(option, this.getDefaultOption()); // Default label emphasis `show`\n\n    modelUtil.defaultEmphasis(option, 'label', ['show']);\n    this.fillDataTextStyle(option.data);\n    if (layoutMode) {\n      mergeLayoutParam(option, inputPositionParams, layoutMode);\n    }\n  },\n  mergeOption: function (newSeriesOption, ecModel) {\n    // this.settingTask.dirty();\n    newSeriesOption = zrUtil.merge(this.option, newSeriesOption, true);\n    this.fillDataTextStyle(newSeriesOption.data);\n    var layoutMode = this.layoutMode;\n    if (layoutMode) {\n      mergeLayoutParam(this.option, newSeriesOption, layoutMode);\n    }\n    prepareSource(this);\n    var data = this.getInitialData(newSeriesOption, ecModel);\n    wrapData(data, this);\n    this.dataTask.dirty();\n    this.dataTask.context.data = data;\n    inner(this).dataBeforeProcessed = data;\n    autoSeriesName(this);\n  },\n  fillDataTextStyle: function (data) {\n    // Default data label emphasis `show`\n    // FIXME Tree structure data ?\n    // FIXME Performance ?\n    if (data && !zrUtil.isTypedArray(data)) {\n      var props = ['show'];\n      for (var i = 0; i < data.length; i++) {\n        if (data[i] && data[i].label) {\n          modelUtil.defaultEmphasis(data[i], 'label', props);\n        }\n      }\n    }\n  },\n  /**\n   * Init a data structure from data related option in series\n   * Must be overwritten\n   */\n  getInitialData: function () {},\n  /**\n   * Append data to list\n   * @param {Object} params\n   * @param {Array|TypedArray} params.data\n   */\n  appendData: function (params) {\n    // FIXME ???\n    // (1) If data from dataset, forbidden append.\n    // (2) support append data of dataset.\n    var data = this.getRawData();\n    data.appendData(params.data);\n  },\n  /**\n   * Consider some method like `filter`, `map` need make new data,\n   * We should make sure that `seriesModel.getData()` get correct\n   * data in the stream procedure. So we fetch data from upstream\n   * each time `task.perform` called.\n   * @param {string} [dataType]\n   * @return {module:echarts/data/List}\n   */\n  getData: function (dataType) {\n    var task = getCurrentTask(this);\n    if (task) {\n      var data = task.context.data;\n      return dataType == null ? data : data.getLinkedData(dataType);\n    } else {\n      // When series is not alive (that may happen when click toolbox\n      // restore or setOption with not merge mode), series data may\n      // be still need to judge animation or something when graphic\n      // elements want to know whether fade out.\n      return inner(this).data;\n    }\n  },\n  /**\n   * @param {module:echarts/data/List} data\n   */\n  setData: function (data) {\n    var task = getCurrentTask(this);\n    if (task) {\n      var context = task.context; // Consider case: filter, data sample.\n\n      if (context.data !== data && task.modifyOutputEnd) {\n        task.setOutputEnd(data.count());\n      }\n      context.outputData = data; // Caution: setData should update context.data,\n      // Because getData may be called multiply in a\n      // single stage and expect to get the data just\n      // set. (For example, AxisProxy, x y both call\n      // getData and setDate sequentially).\n      // So the context.data should be fetched from\n      // upstream each time when a stage starts to be\n      // performed.\n\n      if (task !== this.dataTask) {\n        context.data = data;\n      }\n    }\n    inner(this).data = data;\n  },\n  /**\n   * @see {module:echarts/data/helper/sourceHelper#getSource}\n   * @return {module:echarts/data/Source} source\n   */\n  getSource: function () {\n    return getSource(this);\n  },\n  /**\n   * Get data before processed\n   * @return {module:echarts/data/List}\n   */\n  getRawData: function () {\n    return inner(this).dataBeforeProcessed;\n  },\n  /**\n   * Get base axis if has coordinate system and has axis.\n   * By default use coordSys.getBaseAxis();\n   * Can be overrided for some chart.\n   * @return {type} description\n   */\n  getBaseAxis: function () {\n    var coordSys = this.coordinateSystem;\n    return coordSys && coordSys.getBaseAxis && coordSys.getBaseAxis();\n  },\n  // FIXME\n\n  /**\n   * Default tooltip formatter\n   *\n   * @param {number} dataIndex\n   * @param {boolean} [multipleSeries=false]\n   * @param {number} [dataType]\n   * @param {string} [renderMode='html'] valid values: 'html' and 'richText'.\n   *                                     'html' is used for rendering tooltip in extra DOM form, and the result\n   *                                     string is used as DOM HTML content.\n   *                                     'richText' is used for rendering tooltip in rich text form, for those where\n   *                                     DOM operation is not supported.\n   * @return {Object} formatted tooltip with `html` and `markers`\n   */\n  formatTooltip: function (dataIndex, multipleSeries, dataType, renderMode) {\n    var series = this;\n    renderMode = renderMode || 'html';\n    var newLine = renderMode === 'html' ? '<br/>' : '\\n';\n    var isRichText = renderMode === 'richText';\n    var markers = {};\n    var markerId = 0;\n    function formatArrayValue(value) {\n      // ??? TODO refactor these logic.\n      // check: category-no-encode-has-axis-data in dataset.html\n      var vertially = zrUtil.reduce(value, function (vertially, val, idx) {\n        var dimItem = data.getDimensionInfo(idx);\n        return vertially |= dimItem && dimItem.tooltip !== false && dimItem.displayName != null;\n      }, 0);\n      var result = [];\n      tooltipDims.length ? zrUtil.each(tooltipDims, function (dim) {\n        setEachItem(retrieveRawValue(data, dataIndex, dim), dim);\n      }) // By default, all dims is used on tooltip.\n      : zrUtil.each(value, setEachItem);\n      function setEachItem(val, dim) {\n        var dimInfo = data.getDimensionInfo(dim); // If `dimInfo.tooltip` is not set, show tooltip.\n\n        if (!dimInfo || dimInfo.otherDims.tooltip === false) {\n          return;\n        }\n        var dimType = dimInfo.type;\n        var markName = 'sub' + series.seriesIndex + 'at' + markerId;\n        var dimHead = getTooltipMarker({\n          color: color,\n          type: 'subItem',\n          renderMode: renderMode,\n          markerId: markName\n        });\n        var dimHeadStr = typeof dimHead === 'string' ? dimHead : dimHead.content;\n        var valStr = (vertially ? dimHeadStr + encodeHTML(dimInfo.displayName || '-') + ': ' : '') +\n        // FIXME should not format time for raw data?\n        encodeHTML(dimType === 'ordinal' ? val + '' : dimType === 'time' ? multipleSeries ? '' : formatTime('yyyy/MM/dd hh:mm:ss', val) : addCommas(val));\n        valStr && result.push(valStr);\n        if (isRichText) {\n          markers[markName] = color;\n          ++markerId;\n        }\n      }\n      var newLine = vertially ? isRichText ? '\\n' : '<br/>' : '';\n      var content = newLine + result.join(newLine || ', ');\n      return {\n        renderMode: renderMode,\n        content: content,\n        style: markers\n      };\n    }\n    function formatSingleValue(val) {\n      // return encodeHTML(addCommas(val));\n      return {\n        renderMode: renderMode,\n        content: encodeHTML(addCommas(val)),\n        style: markers\n      };\n    }\n    var data = this.getData();\n    var tooltipDims = data.mapDimension('defaultedTooltip', true);\n    var tooltipDimLen = tooltipDims.length;\n    var value = this.getRawValue(dataIndex);\n    var isValueArr = zrUtil.isArray(value);\n    var color = data.getItemVisual(dataIndex, 'color');\n    if (zrUtil.isObject(color) && color.colorStops) {\n      color = (color.colorStops[0] || {}).color;\n    }\n    color = color || 'transparent'; // Complicated rule for pretty tooltip.\n\n    var formattedValue = tooltipDimLen > 1 || isValueArr && !tooltipDimLen ? formatArrayValue(value) : tooltipDimLen ? formatSingleValue(retrieveRawValue(data, dataIndex, tooltipDims[0])) : formatSingleValue(isValueArr ? value[0] : value);\n    var content = formattedValue.content;\n    var markName = series.seriesIndex + 'at' + markerId;\n    var colorEl = getTooltipMarker({\n      color: color,\n      type: 'item',\n      renderMode: renderMode,\n      markerId: markName\n    });\n    markers[markName] = color;\n    ++markerId;\n    var name = data.getName(dataIndex);\n    var seriesName = this.name;\n    if (!modelUtil.isNameSpecified(this)) {\n      seriesName = '';\n    }\n    seriesName = seriesName ? encodeHTML(seriesName) + (!multipleSeries ? newLine : ': ') : '';\n    var colorStr = typeof colorEl === 'string' ? colorEl : colorEl.content;\n    var html = !multipleSeries ? seriesName + colorStr + (name ? encodeHTML(name) + ': ' + content : content) : colorStr + seriesName + content;\n    return {\n      html: html,\n      markers: markers\n    };\n  },\n  /**\n   * @return {boolean}\n   */\n  isAnimationEnabled: function () {\n    if (env.node) {\n      return false;\n    }\n    var animationEnabled = this.getShallow('animation');\n    if (animationEnabled) {\n      if (this.getData().count() > this.getShallow('animationThreshold')) {\n        animationEnabled = false;\n      }\n    }\n    return animationEnabled;\n  },\n  restoreData: function () {\n    this.dataTask.dirty();\n  },\n  getColorFromPalette: function (name, scope, requestColorNum) {\n    var ecModel = this.ecModel; // PENDING\n\n    var color = colorPaletteMixin.getColorFromPalette.call(this, name, scope, requestColorNum);\n    if (!color) {\n      color = ecModel.getColorFromPalette(name, scope, requestColorNum);\n    }\n    return color;\n  },\n  /**\n   * Use `data.mapDimension(coordDim, true)` instead.\n   * @deprecated\n   */\n  coordDimToDataDim: function (coordDim) {\n    return this.getRawData().mapDimension(coordDim, true);\n  },\n  /**\n   * Get progressive rendering count each step\n   * @return {number}\n   */\n  getProgressive: function () {\n    return this.get('progressive');\n  },\n  /**\n   * Get progressive rendering count each step\n   * @return {number}\n   */\n  getProgressiveThreshold: function () {\n    return this.get('progressiveThreshold');\n  },\n  /**\n   * Get data indices for show tooltip content. See tooltip.\n   * @abstract\n   * @param {Array.<string>|string} dim\n   * @param {Array.<number>} value\n   * @param {module:echarts/coord/single/SingleAxis} baseAxis\n   * @return {Object} {dataIndices, nestestValue}.\n   */\n  getAxisTooltipData: null,\n  /**\n   * See tooltip.\n   * @abstract\n   * @param {number} dataIndex\n   * @return {Array.<number>} Point of tooltip. null/undefined can be returned.\n   */\n  getTooltipPosition: null,\n  /**\n   * @see {module:echarts/stream/Scheduler}\n   */\n  pipeTask: null,\n  /**\n   * Convinient for override in extended class.\n   * @protected\n   * @type {Function}\n   */\n  preventIncremental: null,\n  /**\n   * @public\n   * @readOnly\n   * @type {Object}\n   */\n  pipelineContext: null\n});\nzrUtil.mixin(SeriesModel, dataFormatMixin);\nzrUtil.mixin(SeriesModel, colorPaletteMixin);\n/**\n * MUST be called after `prepareSource` called\n * Here we need to make auto series, especially for auto legend. But we\n * do not modify series.name in option to avoid side effects.\n */\n\nfunction autoSeriesName(seriesModel) {\n  // User specified name has higher priority, otherwise it may cause\n  // series can not be queried unexpectedly.\n  var name = seriesModel.name;\n  if (!modelUtil.isNameSpecified(seriesModel)) {\n    seriesModel.name = getSeriesAutoName(seriesModel) || name;\n  }\n}\nfunction getSeriesAutoName(seriesModel) {\n  var data = seriesModel.getRawData();\n  var dataDims = data.mapDimension('seriesName', true);\n  var nameArr = [];\n  zrUtil.each(dataDims, function (dataDim) {\n    var dimInfo = data.getDimensionInfo(dataDim);\n    dimInfo.displayName && nameArr.push(dimInfo.displayName);\n  });\n  return nameArr.join(' ');\n}\nfunction dataTaskCount(context) {\n  return context.model.getRawData().count();\n}\nfunction dataTaskReset(context) {\n  var seriesModel = context.model;\n  seriesModel.setData(seriesModel.getRawData().cloneShallow());\n  return dataTaskProgress;\n}\nfunction dataTaskProgress(param, context) {\n  // Avoid repead cloneShallow when data just created in reset.\n  if (context.outputData && param.end > context.outputData.count()) {\n    context.model.getRawData().cloneShallow(context.outputData);\n  }\n} // TODO refactor\n\nfunction wrapData(data, seriesModel) {\n  zrUtil.each(data.CHANGABLE_METHODS, function (methodName) {\n    data.wrapMethod(methodName, zrUtil.curry(onDataSelfChange, seriesModel));\n  });\n}\nfunction onDataSelfChange(seriesModel) {\n  var task = getCurrentTask(seriesModel);\n  if (task) {\n    // Consider case: filter, selectRange\n    task.setOutputEnd(this.count());\n  }\n}\nfunction getCurrentTask(seriesModel) {\n  var scheduler = (seriesModel.ecModel || {}).scheduler;\n  var pipeline = scheduler && scheduler.getPipeline(seriesModel.uid);\n  if (pipeline) {\n    // When pipline finished, the currrentTask keep the last\n    // task (renderTask).\n    var task = pipeline.currentTask;\n    if (task) {\n      var agentStubMap = task.agentStubMap;\n      if (agentStubMap) {\n        task = agentStubMap.get(seriesModel.uid);\n      }\n    }\n    return task;\n  }\n}\nvar _default = SeriesModel;\nmodule.exports = _default;","map":{"version":3,"names":["_config","require","__DEV__","zrUtil","env","_format","formatTime","encodeHTML","addCommas","getTooltipMarker","modelUtil","ComponentModel","colorPaletteMixin","dataFormatMixin","_layout","getLayoutParams","mergeLayoutParam","_task","createTask","_sourceHelper","prepareSource","getSource","_dataProvider","retrieveRawValue","inner","makeInner","SeriesModel","extend","type","seriesIndex","coordinateSystem","defaultOption","legendVisualProvider","visualColorAccessPath","visualBorderColorAccessPath","layoutMode","init","option","parentModel","ecModel","extraOpt","componentIndex","dataTask","count","dataTaskCount","reset","dataTaskReset","context","model","mergeDefaultAndTheme","data","getInitialData","wrapData","dataBeforeProcessed","autoSeriesName","inputPositionParams","themeSubType","subType","hasClass","merge","getTheme","get","getDefaultOption","defaultEmphasis","fillDataTextStyle","mergeOption","newSeriesOption","dirty","isTypedArray","props","i","length","label","appendData","params","getRawData","getData","dataType","task","getCurrentTask","getLinkedData","setData","modifyOutputEnd","setOutputEnd","outputData","getBaseAxis","coordSys","formatTooltip","dataIndex","multipleSeries","renderMode","series","newLine","isRichText","markers","markerId","formatArrayValue","value","vertially","reduce","val","idx","dimItem","getDimensionInfo","tooltip","displayName","result","tooltipDims","each","dim","setEachItem","dimInfo","otherDims","dimType","markName","dimHead","color","dimHeadStr","content","valStr","push","join","style","formatSingleValue","mapDimension","tooltipDimLen","getRawValue","isValueArr","isArray","getItemVisual","isObject","colorStops","formattedValue","colorEl","name","getName","seriesName","isNameSpecified","colorStr","html","isAnimationEnabled","node","animationEnabled","getShallow","restoreData","getColorFromPalette","scope","requestColorNum","call","coordDimToDataDim","coordDim","getProgressive","getProgressiveThreshold","getAxisTooltipData","getTooltipPosition","pipeTask","preventIncremental","pipelineContext","mixin","seriesModel","getSeriesAutoName","dataDims","nameArr","dataDim","cloneShallow","dataTaskProgress","param","end","CHANGABLE_METHODS","methodName","wrapMethod","curry","onDataSelfChange","scheduler","pipeline","getPipeline","uid","currentTask","agentStubMap","_default","module","exports"],"sources":["/Users/mac/Desktop/vue_bsm/vue3_bsm/node_modules/echarts/lib/model/Series.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar _config = require(\"../config\");\n\nvar __DEV__ = _config.__DEV__;\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar env = require(\"zrender/lib/core/env\");\n\nvar _format = require(\"../util/format\");\n\nvar formatTime = _format.formatTime;\nvar encodeHTML = _format.encodeHTML;\nvar addCommas = _format.addCommas;\nvar getTooltipMarker = _format.getTooltipMarker;\n\nvar modelUtil = require(\"../util/model\");\n\nvar ComponentModel = require(\"./Component\");\n\nvar colorPaletteMixin = require(\"./mixin/colorPalette\");\n\nvar dataFormatMixin = require(\"../model/mixin/dataFormat\");\n\nvar _layout = require(\"../util/layout\");\n\nvar getLayoutParams = _layout.getLayoutParams;\nvar mergeLayoutParam = _layout.mergeLayoutParam;\n\nvar _task = require(\"../stream/task\");\n\nvar createTask = _task.createTask;\n\nvar _sourceHelper = require(\"../data/helper/sourceHelper\");\n\nvar prepareSource = _sourceHelper.prepareSource;\nvar getSource = _sourceHelper.getSource;\n\nvar _dataProvider = require(\"../data/helper/dataProvider\");\n\nvar retrieveRawValue = _dataProvider.retrieveRawValue;\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar inner = modelUtil.makeInner();\nvar SeriesModel = ComponentModel.extend({\n  type: 'series.__base__',\n\n  /**\n   * @readOnly\n   */\n  seriesIndex: 0,\n  // coodinateSystem will be injected in the echarts/CoordinateSystem\n  coordinateSystem: null,\n\n  /**\n   * @type {Object}\n   * @protected\n   */\n  defaultOption: null,\n\n  /**\n   * legend visual provider to the legend component\n   * @type {Object}\n   */\n  // PENDING\n  legendVisualProvider: null,\n\n  /**\n   * Access path of color for visual\n   */\n  visualColorAccessPath: 'itemStyle.color',\n\n  /**\n   * Access path of borderColor for visual\n   */\n  visualBorderColorAccessPath: 'itemStyle.borderColor',\n\n  /**\n   * Support merge layout params.\n   * Only support 'box' now (left/right/top/bottom/width/height).\n   * @type {string|Object} Object can be {ignoreSize: true}\n   * @readOnly\n   */\n  layoutMode: null,\n  init: function (option, parentModel, ecModel, extraOpt) {\n    /**\n     * @type {number}\n     * @readOnly\n     */\n    this.seriesIndex = this.componentIndex;\n    this.dataTask = createTask({\n      count: dataTaskCount,\n      reset: dataTaskReset\n    });\n    this.dataTask.context = {\n      model: this\n    };\n    this.mergeDefaultAndTheme(option, ecModel);\n    prepareSource(this);\n    var data = this.getInitialData(option, ecModel);\n    wrapData(data, this);\n    this.dataTask.context.data = data;\n\n    /**\n     * @type {module:echarts/data/List|module:echarts/data/Tree|module:echarts/data/Graph}\n     * @private\n     */\n    inner(this).dataBeforeProcessed = data; // If we reverse the order (make data firstly, and then make\n    // dataBeforeProcessed by cloneShallow), cloneShallow will\n    // cause data.graph.data !== data when using\n    // module:echarts/data/Graph or module:echarts/data/Tree.\n    // See module:echarts/data/helper/linkList\n    // Theoretically, it is unreasonable to call `seriesModel.getData()` in the model\n    // init or merge stage, because the data can be restored. So we do not `restoreData`\n    // and `setData` here, which forbids calling `seriesModel.getData()` in this stage.\n    // Call `seriesModel.getRawData()` instead.\n    // this.restoreData();\n\n    autoSeriesName(this);\n  },\n\n  /**\n   * Util for merge default and theme to option\n   * @param  {Object} option\n   * @param  {module:echarts/model/Global} ecModel\n   */\n  mergeDefaultAndTheme: function (option, ecModel) {\n    var layoutMode = this.layoutMode;\n    var inputPositionParams = layoutMode ? getLayoutParams(option) : {}; // Backward compat: using subType on theme.\n    // But if name duplicate between series subType\n    // (for example: parallel) add component mainType,\n    // add suffix 'Series'.\n\n    var themeSubType = this.subType;\n\n    if (ComponentModel.hasClass(themeSubType)) {\n      themeSubType += 'Series';\n    }\n\n    zrUtil.merge(option, ecModel.getTheme().get(this.subType));\n    zrUtil.merge(option, this.getDefaultOption()); // Default label emphasis `show`\n\n    modelUtil.defaultEmphasis(option, 'label', ['show']);\n    this.fillDataTextStyle(option.data);\n\n    if (layoutMode) {\n      mergeLayoutParam(option, inputPositionParams, layoutMode);\n    }\n  },\n  mergeOption: function (newSeriesOption, ecModel) {\n    // this.settingTask.dirty();\n    newSeriesOption = zrUtil.merge(this.option, newSeriesOption, true);\n    this.fillDataTextStyle(newSeriesOption.data);\n    var layoutMode = this.layoutMode;\n\n    if (layoutMode) {\n      mergeLayoutParam(this.option, newSeriesOption, layoutMode);\n    }\n\n    prepareSource(this);\n    var data = this.getInitialData(newSeriesOption, ecModel);\n    wrapData(data, this);\n    this.dataTask.dirty();\n    this.dataTask.context.data = data;\n    inner(this).dataBeforeProcessed = data;\n    autoSeriesName(this);\n  },\n  fillDataTextStyle: function (data) {\n    // Default data label emphasis `show`\n    // FIXME Tree structure data ?\n    // FIXME Performance ?\n    if (data && !zrUtil.isTypedArray(data)) {\n      var props = ['show'];\n\n      for (var i = 0; i < data.length; i++) {\n        if (data[i] && data[i].label) {\n          modelUtil.defaultEmphasis(data[i], 'label', props);\n        }\n      }\n    }\n  },\n\n  /**\n   * Init a data structure from data related option in series\n   * Must be overwritten\n   */\n  getInitialData: function () {},\n\n  /**\n   * Append data to list\n   * @param {Object} params\n   * @param {Array|TypedArray} params.data\n   */\n  appendData: function (params) {\n    // FIXME ???\n    // (1) If data from dataset, forbidden append.\n    // (2) support append data of dataset.\n    var data = this.getRawData();\n    data.appendData(params.data);\n  },\n\n  /**\n   * Consider some method like `filter`, `map` need make new data,\n   * We should make sure that `seriesModel.getData()` get correct\n   * data in the stream procedure. So we fetch data from upstream\n   * each time `task.perform` called.\n   * @param {string} [dataType]\n   * @return {module:echarts/data/List}\n   */\n  getData: function (dataType) {\n    var task = getCurrentTask(this);\n\n    if (task) {\n      var data = task.context.data;\n      return dataType == null ? data : data.getLinkedData(dataType);\n    } else {\n      // When series is not alive (that may happen when click toolbox\n      // restore or setOption with not merge mode), series data may\n      // be still need to judge animation or something when graphic\n      // elements want to know whether fade out.\n      return inner(this).data;\n    }\n  },\n\n  /**\n   * @param {module:echarts/data/List} data\n   */\n  setData: function (data) {\n    var task = getCurrentTask(this);\n\n    if (task) {\n      var context = task.context; // Consider case: filter, data sample.\n\n      if (context.data !== data && task.modifyOutputEnd) {\n        task.setOutputEnd(data.count());\n      }\n\n      context.outputData = data; // Caution: setData should update context.data,\n      // Because getData may be called multiply in a\n      // single stage and expect to get the data just\n      // set. (For example, AxisProxy, x y both call\n      // getData and setDate sequentially).\n      // So the context.data should be fetched from\n      // upstream each time when a stage starts to be\n      // performed.\n\n      if (task !== this.dataTask) {\n        context.data = data;\n      }\n    }\n\n    inner(this).data = data;\n  },\n\n  /**\n   * @see {module:echarts/data/helper/sourceHelper#getSource}\n   * @return {module:echarts/data/Source} source\n   */\n  getSource: function () {\n    return getSource(this);\n  },\n\n  /**\n   * Get data before processed\n   * @return {module:echarts/data/List}\n   */\n  getRawData: function () {\n    return inner(this).dataBeforeProcessed;\n  },\n\n  /**\n   * Get base axis if has coordinate system and has axis.\n   * By default use coordSys.getBaseAxis();\n   * Can be overrided for some chart.\n   * @return {type} description\n   */\n  getBaseAxis: function () {\n    var coordSys = this.coordinateSystem;\n    return coordSys && coordSys.getBaseAxis && coordSys.getBaseAxis();\n  },\n  // FIXME\n\n  /**\n   * Default tooltip formatter\n   *\n   * @param {number} dataIndex\n   * @param {boolean} [multipleSeries=false]\n   * @param {number} [dataType]\n   * @param {string} [renderMode='html'] valid values: 'html' and 'richText'.\n   *                                     'html' is used for rendering tooltip in extra DOM form, and the result\n   *                                     string is used as DOM HTML content.\n   *                                     'richText' is used for rendering tooltip in rich text form, for those where\n   *                                     DOM operation is not supported.\n   * @return {Object} formatted tooltip with `html` and `markers`\n   */\n  formatTooltip: function (dataIndex, multipleSeries, dataType, renderMode) {\n    var series = this;\n    renderMode = renderMode || 'html';\n    var newLine = renderMode === 'html' ? '<br/>' : '\\n';\n    var isRichText = renderMode === 'richText';\n    var markers = {};\n    var markerId = 0;\n\n    function formatArrayValue(value) {\n      // ??? TODO refactor these logic.\n      // check: category-no-encode-has-axis-data in dataset.html\n      var vertially = zrUtil.reduce(value, function (vertially, val, idx) {\n        var dimItem = data.getDimensionInfo(idx);\n        return vertially |= dimItem && dimItem.tooltip !== false && dimItem.displayName != null;\n      }, 0);\n      var result = [];\n      tooltipDims.length ? zrUtil.each(tooltipDims, function (dim) {\n        setEachItem(retrieveRawValue(data, dataIndex, dim), dim);\n      }) // By default, all dims is used on tooltip.\n      : zrUtil.each(value, setEachItem);\n\n      function setEachItem(val, dim) {\n        var dimInfo = data.getDimensionInfo(dim); // If `dimInfo.tooltip` is not set, show tooltip.\n\n        if (!dimInfo || dimInfo.otherDims.tooltip === false) {\n          return;\n        }\n\n        var dimType = dimInfo.type;\n        var markName = 'sub' + series.seriesIndex + 'at' + markerId;\n        var dimHead = getTooltipMarker({\n          color: color,\n          type: 'subItem',\n          renderMode: renderMode,\n          markerId: markName\n        });\n        var dimHeadStr = typeof dimHead === 'string' ? dimHead : dimHead.content;\n        var valStr = (vertially ? dimHeadStr + encodeHTML(dimInfo.displayName || '-') + ': ' : '') + // FIXME should not format time for raw data?\n        encodeHTML(dimType === 'ordinal' ? val + '' : dimType === 'time' ? multipleSeries ? '' : formatTime('yyyy/MM/dd hh:mm:ss', val) : addCommas(val));\n        valStr && result.push(valStr);\n\n        if (isRichText) {\n          markers[markName] = color;\n          ++markerId;\n        }\n      }\n\n      var newLine = vertially ? isRichText ? '\\n' : '<br/>' : '';\n      var content = newLine + result.join(newLine || ', ');\n      return {\n        renderMode: renderMode,\n        content: content,\n        style: markers\n      };\n    }\n\n    function formatSingleValue(val) {\n      // return encodeHTML(addCommas(val));\n      return {\n        renderMode: renderMode,\n        content: encodeHTML(addCommas(val)),\n        style: markers\n      };\n    }\n\n    var data = this.getData();\n    var tooltipDims = data.mapDimension('defaultedTooltip', true);\n    var tooltipDimLen = tooltipDims.length;\n    var value = this.getRawValue(dataIndex);\n    var isValueArr = zrUtil.isArray(value);\n    var color = data.getItemVisual(dataIndex, 'color');\n\n    if (zrUtil.isObject(color) && color.colorStops) {\n      color = (color.colorStops[0] || {}).color;\n    }\n\n    color = color || 'transparent'; // Complicated rule for pretty tooltip.\n\n    var formattedValue = tooltipDimLen > 1 || isValueArr && !tooltipDimLen ? formatArrayValue(value) : tooltipDimLen ? formatSingleValue(retrieveRawValue(data, dataIndex, tooltipDims[0])) : formatSingleValue(isValueArr ? value[0] : value);\n    var content = formattedValue.content;\n    var markName = series.seriesIndex + 'at' + markerId;\n    var colorEl = getTooltipMarker({\n      color: color,\n      type: 'item',\n      renderMode: renderMode,\n      markerId: markName\n    });\n    markers[markName] = color;\n    ++markerId;\n    var name = data.getName(dataIndex);\n    var seriesName = this.name;\n\n    if (!modelUtil.isNameSpecified(this)) {\n      seriesName = '';\n    }\n\n    seriesName = seriesName ? encodeHTML(seriesName) + (!multipleSeries ? newLine : ': ') : '';\n    var colorStr = typeof colorEl === 'string' ? colorEl : colorEl.content;\n    var html = !multipleSeries ? seriesName + colorStr + (name ? encodeHTML(name) + ': ' + content : content) : colorStr + seriesName + content;\n    return {\n      html: html,\n      markers: markers\n    };\n  },\n\n  /**\n   * @return {boolean}\n   */\n  isAnimationEnabled: function () {\n    if (env.node) {\n      return false;\n    }\n\n    var animationEnabled = this.getShallow('animation');\n\n    if (animationEnabled) {\n      if (this.getData().count() > this.getShallow('animationThreshold')) {\n        animationEnabled = false;\n      }\n    }\n\n    return animationEnabled;\n  },\n  restoreData: function () {\n    this.dataTask.dirty();\n  },\n  getColorFromPalette: function (name, scope, requestColorNum) {\n    var ecModel = this.ecModel; // PENDING\n\n    var color = colorPaletteMixin.getColorFromPalette.call(this, name, scope, requestColorNum);\n\n    if (!color) {\n      color = ecModel.getColorFromPalette(name, scope, requestColorNum);\n    }\n\n    return color;\n  },\n\n  /**\n   * Use `data.mapDimension(coordDim, true)` instead.\n   * @deprecated\n   */\n  coordDimToDataDim: function (coordDim) {\n    return this.getRawData().mapDimension(coordDim, true);\n  },\n\n  /**\n   * Get progressive rendering count each step\n   * @return {number}\n   */\n  getProgressive: function () {\n    return this.get('progressive');\n  },\n\n  /**\n   * Get progressive rendering count each step\n   * @return {number}\n   */\n  getProgressiveThreshold: function () {\n    return this.get('progressiveThreshold');\n  },\n\n  /**\n   * Get data indices for show tooltip content. See tooltip.\n   * @abstract\n   * @param {Array.<string>|string} dim\n   * @param {Array.<number>} value\n   * @param {module:echarts/coord/single/SingleAxis} baseAxis\n   * @return {Object} {dataIndices, nestestValue}.\n   */\n  getAxisTooltipData: null,\n\n  /**\n   * See tooltip.\n   * @abstract\n   * @param {number} dataIndex\n   * @return {Array.<number>} Point of tooltip. null/undefined can be returned.\n   */\n  getTooltipPosition: null,\n\n  /**\n   * @see {module:echarts/stream/Scheduler}\n   */\n  pipeTask: null,\n\n  /**\n   * Convinient for override in extended class.\n   * @protected\n   * @type {Function}\n   */\n  preventIncremental: null,\n\n  /**\n   * @public\n   * @readOnly\n   * @type {Object}\n   */\n  pipelineContext: null\n});\nzrUtil.mixin(SeriesModel, dataFormatMixin);\nzrUtil.mixin(SeriesModel, colorPaletteMixin);\n/**\n * MUST be called after `prepareSource` called\n * Here we need to make auto series, especially for auto legend. But we\n * do not modify series.name in option to avoid side effects.\n */\n\nfunction autoSeriesName(seriesModel) {\n  // User specified name has higher priority, otherwise it may cause\n  // series can not be queried unexpectedly.\n  var name = seriesModel.name;\n\n  if (!modelUtil.isNameSpecified(seriesModel)) {\n    seriesModel.name = getSeriesAutoName(seriesModel) || name;\n  }\n}\n\nfunction getSeriesAutoName(seriesModel) {\n  var data = seriesModel.getRawData();\n  var dataDims = data.mapDimension('seriesName', true);\n  var nameArr = [];\n  zrUtil.each(dataDims, function (dataDim) {\n    var dimInfo = data.getDimensionInfo(dataDim);\n    dimInfo.displayName && nameArr.push(dimInfo.displayName);\n  });\n  return nameArr.join(' ');\n}\n\nfunction dataTaskCount(context) {\n  return context.model.getRawData().count();\n}\n\nfunction dataTaskReset(context) {\n  var seriesModel = context.model;\n  seriesModel.setData(seriesModel.getRawData().cloneShallow());\n  return dataTaskProgress;\n}\n\nfunction dataTaskProgress(param, context) {\n  // Avoid repead cloneShallow when data just created in reset.\n  if (context.outputData && param.end > context.outputData.count()) {\n    context.model.getRawData().cloneShallow(context.outputData);\n  }\n} // TODO refactor\n\n\nfunction wrapData(data, seriesModel) {\n  zrUtil.each(data.CHANGABLE_METHODS, function (methodName) {\n    data.wrapMethod(methodName, zrUtil.curry(onDataSelfChange, seriesModel));\n  });\n}\n\nfunction onDataSelfChange(seriesModel) {\n  var task = getCurrentTask(seriesModel);\n\n  if (task) {\n    // Consider case: filter, selectRange\n    task.setOutputEnd(this.count());\n  }\n}\n\nfunction getCurrentTask(seriesModel) {\n  var scheduler = (seriesModel.ecModel || {}).scheduler;\n  var pipeline = scheduler && scheduler.getPipeline(seriesModel.uid);\n\n  if (pipeline) {\n    // When pipline finished, the currrentTask keep the last\n    // task (renderTask).\n    var task = pipeline.currentTask;\n\n    if (task) {\n      var agentStubMap = task.agentStubMap;\n\n      if (agentStubMap) {\n        task = agentStubMap.get(seriesModel.uid);\n      }\n    }\n\n    return task;\n  }\n}\n\nvar _default = SeriesModel;\nmodule.exports = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}