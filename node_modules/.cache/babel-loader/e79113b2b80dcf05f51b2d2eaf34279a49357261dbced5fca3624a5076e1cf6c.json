{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar _util = require(\"zrender/lib/core/util\");\nvar each = _util.each;\nvar createHashMap = _util.createHashMap;\nvar SeriesModel = require(\"../../model/Series\");\nvar createListFromArray = require(\"../helper/createListFromArray\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar _default = SeriesModel.extend({\n  type: 'series.parallel',\n  dependencies: ['parallel'],\n  visualColorAccessPath: 'lineStyle.color',\n  getInitialData: function (option, ecModel) {\n    var source = this.getSource();\n    setEncodeAndDimensions(source, this);\n    return createListFromArray(source, this);\n  },\n  /**\n   * User can get data raw indices on 'axisAreaSelected' event received.\n   *\n   * @public\n   * @param {string} activeState 'active' or 'inactive' or 'normal'\n   * @return {Array.<number>} Raw indices\n   */\n  getRawIndicesByActiveState: function (activeState) {\n    var coordSys = this.coordinateSystem;\n    var data = this.getData();\n    var indices = [];\n    coordSys.eachActiveState(data, function (theActiveState, dataIndex) {\n      if (activeState === theActiveState) {\n        indices.push(data.getRawIndex(dataIndex));\n      }\n    });\n    return indices;\n  },\n  defaultOption: {\n    zlevel: 0,\n    // 一级层叠\n    z: 2,\n    // 二级层叠\n    coordinateSystem: 'parallel',\n    parallelIndex: 0,\n    label: {\n      show: false\n    },\n    inactiveOpacity: 0.05,\n    activeOpacity: 1,\n    lineStyle: {\n      width: 1,\n      opacity: 0.45,\n      type: 'solid'\n    },\n    emphasis: {\n      label: {\n        show: false\n      }\n    },\n    progressive: 500,\n    smooth: false,\n    // true | false | number\n    animationEasing: 'linear'\n  }\n});\nfunction setEncodeAndDimensions(source, seriesModel) {\n  // The mapping of parallelAxis dimension to data dimension can\n  // be specified in parallelAxis.option.dim. For example, if\n  // parallelAxis.option.dim is 'dim3', it mapping to the third\n  // dimension of data. But `data.encode` has higher priority.\n  // Moreover, parallelModel.dimension should not be regarded as data\n  // dimensions. Consider dimensions = ['dim4', 'dim2', 'dim6'];\n  if (source.encodeDefine) {\n    return;\n  }\n  var parallelModel = seriesModel.ecModel.getComponent('parallel', seriesModel.get('parallelIndex'));\n  if (!parallelModel) {\n    return;\n  }\n  var encodeDefine = source.encodeDefine = createHashMap();\n  each(parallelModel.dimensions, function (axisDim) {\n    var dataDimIndex = convertDimNameToNumber(axisDim);\n    encodeDefine.set(axisDim, dataDimIndex);\n  });\n}\nfunction convertDimNameToNumber(dimName) {\n  return +dimName.replace('dim', '');\n}\nmodule.exports = _default;","map":{"version":3,"names":["_util","require","each","createHashMap","SeriesModel","createListFromArray","_default","extend","type","dependencies","visualColorAccessPath","getInitialData","option","ecModel","source","getSource","setEncodeAndDimensions","getRawIndicesByActiveState","activeState","coordSys","coordinateSystem","data","getData","indices","eachActiveState","theActiveState","dataIndex","push","getRawIndex","defaultOption","zlevel","z","parallelIndex","label","show","inactiveOpacity","activeOpacity","lineStyle","width","opacity","emphasis","progressive","smooth","animationEasing","seriesModel","encodeDefine","parallelModel","getComponent","get","dimensions","axisDim","dataDimIndex","convertDimNameToNumber","set","dimName","replace","module","exports"],"sources":["/Users/mac/Desktop/vue_bsm/vue3_bsm/node_modules/echarts/lib/chart/parallel/ParallelSeries.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar _util = require(\"zrender/lib/core/util\");\n\nvar each = _util.each;\nvar createHashMap = _util.createHashMap;\n\nvar SeriesModel = require(\"../../model/Series\");\n\nvar createListFromArray = require(\"../helper/createListFromArray\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar _default = SeriesModel.extend({\n  type: 'series.parallel',\n  dependencies: ['parallel'],\n  visualColorAccessPath: 'lineStyle.color',\n  getInitialData: function (option, ecModel) {\n    var source = this.getSource();\n    setEncodeAndDimensions(source, this);\n    return createListFromArray(source, this);\n  },\n\n  /**\n   * User can get data raw indices on 'axisAreaSelected' event received.\n   *\n   * @public\n   * @param {string} activeState 'active' or 'inactive' or 'normal'\n   * @return {Array.<number>} Raw indices\n   */\n  getRawIndicesByActiveState: function (activeState) {\n    var coordSys = this.coordinateSystem;\n    var data = this.getData();\n    var indices = [];\n    coordSys.eachActiveState(data, function (theActiveState, dataIndex) {\n      if (activeState === theActiveState) {\n        indices.push(data.getRawIndex(dataIndex));\n      }\n    });\n    return indices;\n  },\n  defaultOption: {\n    zlevel: 0,\n    // 一级层叠\n    z: 2,\n    // 二级层叠\n    coordinateSystem: 'parallel',\n    parallelIndex: 0,\n    label: {\n      show: false\n    },\n    inactiveOpacity: 0.05,\n    activeOpacity: 1,\n    lineStyle: {\n      width: 1,\n      opacity: 0.45,\n      type: 'solid'\n    },\n    emphasis: {\n      label: {\n        show: false\n      }\n    },\n    progressive: 500,\n    smooth: false,\n    // true | false | number\n    animationEasing: 'linear'\n  }\n});\n\nfunction setEncodeAndDimensions(source, seriesModel) {\n  // The mapping of parallelAxis dimension to data dimension can\n  // be specified in parallelAxis.option.dim. For example, if\n  // parallelAxis.option.dim is 'dim3', it mapping to the third\n  // dimension of data. But `data.encode` has higher priority.\n  // Moreover, parallelModel.dimension should not be regarded as data\n  // dimensions. Consider dimensions = ['dim4', 'dim2', 'dim6'];\n  if (source.encodeDefine) {\n    return;\n  }\n\n  var parallelModel = seriesModel.ecModel.getComponent('parallel', seriesModel.get('parallelIndex'));\n\n  if (!parallelModel) {\n    return;\n  }\n\n  var encodeDefine = source.encodeDefine = createHashMap();\n  each(parallelModel.dimensions, function (axisDim) {\n    var dataDimIndex = convertDimNameToNumber(axisDim);\n    encodeDefine.set(axisDim, dataDimIndex);\n  });\n}\n\nfunction convertDimNameToNumber(dimName) {\n  return +dimName.replace('dim', '');\n}\n\nmodule.exports = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}