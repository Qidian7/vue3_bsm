{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\nvar util = require(\"./core/util\");\nvar env = require(\"./core/env\");\nvar Group = require(\"./container/Group\");\nvar timsort = require(\"./core/timsort\");\n\n// Use timsort because in most case elements are partially sorted\n// https://jsfiddle.net/pissang/jr4x7mdm/8/\nfunction shapeCompareFunc(a, b) {\n  if (a.zlevel === b.zlevel) {\n    if (a.z === b.z) {\n      // if (a.z2 === b.z2) {\n      //     // FIXME Slow has renderidx compare\n      //     // http://stackoverflow.com/questions/20883421/sorting-in-javascript-should-every-compare-function-have-a-return-0-statement\n      //     // https://github.com/v8/v8/blob/47cce544a31ed5577ffe2963f67acb4144ee0232/src/js/array.js#L1012\n      //     return a.__renderidx - b.__renderidx;\n      // }\n      return a.z2 - b.z2;\n    }\n    return a.z - b.z;\n  }\n  return a.zlevel - b.zlevel;\n}\n/**\n * 内容仓库 (M)\n * @alias module:zrender/Storage\n * @constructor\n */\n\nvar Storage = function () {\n  // jshint ignore:line\n  this._roots = [];\n  this._displayList = [];\n  this._displayListLen = 0;\n};\nStorage.prototype = {\n  constructor: Storage,\n  /**\n   * @param  {Function} cb\n   *\n   */\n  traverse: function (cb, context) {\n    for (var i = 0; i < this._roots.length; i++) {\n      this._roots[i].traverse(cb, context);\n    }\n  },\n  /**\n   * 返回所有图形的绘制队列\n   * @param {boolean} [update=false] 是否在返回前更新该数组\n   * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组, 在 update 为 true 的时候有效\n   *\n   * 详见{@link module:zrender/graphic/Displayable.prototype.updateDisplayList}\n   * @return {Array.<module:zrender/graphic/Displayable>}\n   */\n  getDisplayList: function (update, includeIgnore) {\n    includeIgnore = includeIgnore || false;\n    if (update) {\n      this.updateDisplayList(includeIgnore);\n    }\n    return this._displayList;\n  },\n  /**\n   * 更新图形的绘制队列。\n   * 每次绘制前都会调用，该方法会先深度优先遍历整个树，更新所有Group和Shape的变换并且把所有可见的Shape保存到数组中，\n   * 最后根据绘制的优先级（zlevel > z > 插入顺序）排序得到绘制队列\n   * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组\n   */\n  updateDisplayList: function (includeIgnore) {\n    this._displayListLen = 0;\n    var roots = this._roots;\n    var displayList = this._displayList;\n    for (var i = 0, len = roots.length; i < len; i++) {\n      this._updateAndAddDisplayable(roots[i], null, includeIgnore);\n    }\n    displayList.length = this._displayListLen;\n    env.canvasSupported && timsort(displayList, shapeCompareFunc);\n  },\n  _updateAndAddDisplayable: function (el, clipPaths, includeIgnore) {\n    if (el.ignore && !includeIgnore) {\n      return;\n    }\n    el.beforeUpdate();\n    if (el.__dirty) {\n      el.update();\n    }\n    el.afterUpdate();\n    var userSetClipPath = el.clipPath;\n    if (userSetClipPath) {\n      // FIXME 效率影响\n      if (clipPaths) {\n        clipPaths = clipPaths.slice();\n      } else {\n        clipPaths = [];\n      }\n      var currentClipPath = userSetClipPath;\n      var parentClipPath = el; // Recursively add clip path\n\n      while (currentClipPath) {\n        // clipPath 的变换是基于使用这个 clipPath 的元素\n        currentClipPath.parent = parentClipPath;\n        currentClipPath.updateTransform();\n        clipPaths.push(currentClipPath);\n        parentClipPath = currentClipPath;\n        currentClipPath = currentClipPath.clipPath;\n      }\n    }\n    if (el.isGroup) {\n      var children = el._children;\n      for (var i = 0; i < children.length; i++) {\n        var child = children[i]; // Force to mark as dirty if group is dirty\n        // FIXME __dirtyPath ?\n\n        if (el.__dirty) {\n          child.__dirty = true;\n        }\n        this._updateAndAddDisplayable(child, clipPaths, includeIgnore);\n      } // Mark group clean here\n\n      el.__dirty = false;\n    } else {\n      el.__clipPaths = clipPaths;\n      this._displayList[this._displayListLen++] = el;\n    }\n  },\n  /**\n   * 添加图形(Shape)或者组(Group)到根节点\n   * @param {module:zrender/Element} el\n   */\n  addRoot: function (el) {\n    if (el.__storage === this) {\n      return;\n    }\n    if (el instanceof Group) {\n      el.addChildrenToStorage(this);\n    }\n    this.addToStorage(el);\n    this._roots.push(el);\n  },\n  /**\n   * 删除指定的图形(Shape)或者组(Group)\n   * @param {string|Array.<string>} [el] 如果为空清空整个Storage\n   */\n  delRoot: function (el) {\n    if (el == null) {\n      // 不指定el清空\n      for (var i = 0; i < this._roots.length; i++) {\n        var root = this._roots[i];\n        if (root instanceof Group) {\n          root.delChildrenFromStorage(this);\n        }\n      }\n      this._roots = [];\n      this._displayList = [];\n      this._displayListLen = 0;\n      return;\n    }\n    if (el instanceof Array) {\n      for (var i = 0, l = el.length; i < l; i++) {\n        this.delRoot(el[i]);\n      }\n      return;\n    }\n    var idx = util.indexOf(this._roots, el);\n    if (idx >= 0) {\n      this.delFromStorage(el);\n      this._roots.splice(idx, 1);\n      if (el instanceof Group) {\n        el.delChildrenFromStorage(this);\n      }\n    }\n  },\n  addToStorage: function (el) {\n    if (el) {\n      el.__storage = this;\n      el.dirty(false);\n    }\n    return this;\n  },\n  delFromStorage: function (el) {\n    if (el) {\n      el.__storage = null;\n    }\n    return this;\n  },\n  /**\n   * 清空并且释放Storage\n   */\n  dispose: function () {\n    this._renderList = this._roots = null;\n  },\n  displayableSortFunc: shapeCompareFunc\n};\nvar _default = Storage;\nmodule.exports = _default;","map":{"version":3,"names":["util","require","env","Group","timsort","shapeCompareFunc","a","b","zlevel","z","z2","Storage","_roots","_displayList","_displayListLen","prototype","constructor","traverse","cb","context","i","length","getDisplayList","update","includeIgnore","updateDisplayList","roots","displayList","len","_updateAndAddDisplayable","canvasSupported","el","clipPaths","ignore","beforeUpdate","__dirty","afterUpdate","userSetClipPath","clipPath","slice","currentClipPath","parentClipPath","parent","updateTransform","push","isGroup","children","_children","child","__clipPaths","addRoot","__storage","addChildrenToStorage","addToStorage","delRoot","root","delChildrenFromStorage","Array","l","idx","indexOf","delFromStorage","splice","dirty","dispose","_renderList","displayableSortFunc","_default","module","exports"],"sources":["/Users/mac/Desktop/vue_bsm/vue3_bsm/node_modules/zrender/lib/Storage.js"],"sourcesContent":["var util = require(\"./core/util\");\n\nvar env = require(\"./core/env\");\n\nvar Group = require(\"./container/Group\");\n\nvar timsort = require(\"./core/timsort\");\n\n// Use timsort because in most case elements are partially sorted\n// https://jsfiddle.net/pissang/jr4x7mdm/8/\nfunction shapeCompareFunc(a, b) {\n  if (a.zlevel === b.zlevel) {\n    if (a.z === b.z) {\n      // if (a.z2 === b.z2) {\n      //     // FIXME Slow has renderidx compare\n      //     // http://stackoverflow.com/questions/20883421/sorting-in-javascript-should-every-compare-function-have-a-return-0-statement\n      //     // https://github.com/v8/v8/blob/47cce544a31ed5577ffe2963f67acb4144ee0232/src/js/array.js#L1012\n      //     return a.__renderidx - b.__renderidx;\n      // }\n      return a.z2 - b.z2;\n    }\n\n    return a.z - b.z;\n  }\n\n  return a.zlevel - b.zlevel;\n}\n/**\n * 内容仓库 (M)\n * @alias module:zrender/Storage\n * @constructor\n */\n\n\nvar Storage = function () {\n  // jshint ignore:line\n  this._roots = [];\n  this._displayList = [];\n  this._displayListLen = 0;\n};\n\nStorage.prototype = {\n  constructor: Storage,\n\n  /**\n   * @param  {Function} cb\n   *\n   */\n  traverse: function (cb, context) {\n    for (var i = 0; i < this._roots.length; i++) {\n      this._roots[i].traverse(cb, context);\n    }\n  },\n\n  /**\n   * 返回所有图形的绘制队列\n   * @param {boolean} [update=false] 是否在返回前更新该数组\n   * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组, 在 update 为 true 的时候有效\n   *\n   * 详见{@link module:zrender/graphic/Displayable.prototype.updateDisplayList}\n   * @return {Array.<module:zrender/graphic/Displayable>}\n   */\n  getDisplayList: function (update, includeIgnore) {\n    includeIgnore = includeIgnore || false;\n\n    if (update) {\n      this.updateDisplayList(includeIgnore);\n    }\n\n    return this._displayList;\n  },\n\n  /**\n   * 更新图形的绘制队列。\n   * 每次绘制前都会调用，该方法会先深度优先遍历整个树，更新所有Group和Shape的变换并且把所有可见的Shape保存到数组中，\n   * 最后根据绘制的优先级（zlevel > z > 插入顺序）排序得到绘制队列\n   * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组\n   */\n  updateDisplayList: function (includeIgnore) {\n    this._displayListLen = 0;\n    var roots = this._roots;\n    var displayList = this._displayList;\n\n    for (var i = 0, len = roots.length; i < len; i++) {\n      this._updateAndAddDisplayable(roots[i], null, includeIgnore);\n    }\n\n    displayList.length = this._displayListLen;\n    env.canvasSupported && timsort(displayList, shapeCompareFunc);\n  },\n  _updateAndAddDisplayable: function (el, clipPaths, includeIgnore) {\n    if (el.ignore && !includeIgnore) {\n      return;\n    }\n\n    el.beforeUpdate();\n\n    if (el.__dirty) {\n      el.update();\n    }\n\n    el.afterUpdate();\n    var userSetClipPath = el.clipPath;\n\n    if (userSetClipPath) {\n      // FIXME 效率影响\n      if (clipPaths) {\n        clipPaths = clipPaths.slice();\n      } else {\n        clipPaths = [];\n      }\n\n      var currentClipPath = userSetClipPath;\n      var parentClipPath = el; // Recursively add clip path\n\n      while (currentClipPath) {\n        // clipPath 的变换是基于使用这个 clipPath 的元素\n        currentClipPath.parent = parentClipPath;\n        currentClipPath.updateTransform();\n        clipPaths.push(currentClipPath);\n        parentClipPath = currentClipPath;\n        currentClipPath = currentClipPath.clipPath;\n      }\n    }\n\n    if (el.isGroup) {\n      var children = el._children;\n\n      for (var i = 0; i < children.length; i++) {\n        var child = children[i]; // Force to mark as dirty if group is dirty\n        // FIXME __dirtyPath ?\n\n        if (el.__dirty) {\n          child.__dirty = true;\n        }\n\n        this._updateAndAddDisplayable(child, clipPaths, includeIgnore);\n      } // Mark group clean here\n\n\n      el.__dirty = false;\n    } else {\n      el.__clipPaths = clipPaths;\n      this._displayList[this._displayListLen++] = el;\n    }\n  },\n\n  /**\n   * 添加图形(Shape)或者组(Group)到根节点\n   * @param {module:zrender/Element} el\n   */\n  addRoot: function (el) {\n    if (el.__storage === this) {\n      return;\n    }\n\n    if (el instanceof Group) {\n      el.addChildrenToStorage(this);\n    }\n\n    this.addToStorage(el);\n\n    this._roots.push(el);\n  },\n\n  /**\n   * 删除指定的图形(Shape)或者组(Group)\n   * @param {string|Array.<string>} [el] 如果为空清空整个Storage\n   */\n  delRoot: function (el) {\n    if (el == null) {\n      // 不指定el清空\n      for (var i = 0; i < this._roots.length; i++) {\n        var root = this._roots[i];\n\n        if (root instanceof Group) {\n          root.delChildrenFromStorage(this);\n        }\n      }\n\n      this._roots = [];\n      this._displayList = [];\n      this._displayListLen = 0;\n      return;\n    }\n\n    if (el instanceof Array) {\n      for (var i = 0, l = el.length; i < l; i++) {\n        this.delRoot(el[i]);\n      }\n\n      return;\n    }\n\n    var idx = util.indexOf(this._roots, el);\n\n    if (idx >= 0) {\n      this.delFromStorage(el);\n\n      this._roots.splice(idx, 1);\n\n      if (el instanceof Group) {\n        el.delChildrenFromStorage(this);\n      }\n    }\n  },\n  addToStorage: function (el) {\n    if (el) {\n      el.__storage = this;\n      el.dirty(false);\n    }\n\n    return this;\n  },\n  delFromStorage: function (el) {\n    if (el) {\n      el.__storage = null;\n    }\n\n    return this;\n  },\n\n  /**\n   * 清空并且释放Storage\n   */\n  dispose: function () {\n    this._renderList = this._roots = null;\n  },\n  displayableSortFunc: shapeCompareFunc\n};\nvar _default = Storage;\nmodule.exports = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}