{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar zrUtil = require(\"zrender/lib/core/util\");\nvar env = require(\"zrender/lib/core/env\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar each = zrUtil.each;\nvar isObject = zrUtil.isObject;\nvar isArray = zrUtil.isArray;\n/**\n * Make the name displayable. But we should\n * make sure it is not duplicated with user\n * specified name, so use '\\0';\n */\n\nvar DUMMY_COMPONENT_NAME_PREFIX = 'series\\0';\n/**\n * If value is not array, then translate it to array.\n * @param  {*} value\n * @return {Array} [value] or value\n */\n\nfunction normalizeToArray(value) {\n  return value instanceof Array ? value : value == null ? [] : [value];\n}\n/**\n * Sync default option between normal and emphasis like `position` and `show`\n * In case some one will write code like\n *     label: {\n *          show: false,\n *          position: 'outside',\n *          fontSize: 18\n *     },\n *     emphasis: {\n *          label: { show: true }\n *     }\n * @param {Object} opt\n * @param {string} key\n * @param {Array.<string>} subOpts\n */\n\nfunction defaultEmphasis(opt, key, subOpts) {\n  // Caution: performance sensitive.\n  if (opt) {\n    opt[key] = opt[key] || {};\n    opt.emphasis = opt.emphasis || {};\n    opt.emphasis[key] = opt.emphasis[key] || {}; // Default emphasis option from normal\n\n    for (var i = 0, len = subOpts.length; i < len; i++) {\n      var subOptName = subOpts[i];\n      if (!opt.emphasis[key].hasOwnProperty(subOptName) && opt[key].hasOwnProperty(subOptName)) {\n        opt.emphasis[key][subOptName] = opt[key][subOptName];\n      }\n    }\n  }\n}\nvar TEXT_STYLE_OPTIONS = ['fontStyle', 'fontWeight', 'fontSize', 'fontFamily', 'rich', 'tag', 'color', 'textBorderColor', 'textBorderWidth', 'width', 'height', 'lineHeight', 'align', 'verticalAlign', 'baseline', 'shadowColor', 'shadowBlur', 'shadowOffsetX', 'shadowOffsetY', 'textShadowColor', 'textShadowBlur', 'textShadowOffsetX', 'textShadowOffsetY', 'backgroundColor', 'borderColor', 'borderWidth', 'borderRadius', 'padding']; // modelUtil.LABEL_OPTIONS = modelUtil.TEXT_STYLE_OPTIONS.concat([\n//     'position', 'offset', 'rotate', 'origin', 'show', 'distance', 'formatter',\n//     'fontStyle', 'fontWeight', 'fontSize', 'fontFamily',\n//     // FIXME: deprecated, check and remove it.\n//     'textStyle'\n// ]);\n\n/**\n * The method do not ensure performance.\n * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]\n * This helper method retieves value from data.\n * @param {string|number|Date|Array|Object} dataItem\n * @return {number|string|Date|Array.<number|string|Date>}\n */\n\nfunction getDataItemValue(dataItem) {\n  return isObject(dataItem) && !isArray(dataItem) && !(dataItem instanceof Date) ? dataItem.value : dataItem;\n}\n/**\n * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]\n * This helper method determine if dataItem has extra option besides value\n * @param {string|number|Date|Array|Object} dataItem\n */\n\nfunction isDataItemOption(dataItem) {\n  return isObject(dataItem) && !(dataItem instanceof Array); // // markLine data can be array\n  // && !(dataItem[0] && isObject(dataItem[0]) && !(dataItem[0] instanceof Array));\n}\n/**\n * Mapping to exists for merge.\n *\n * @public\n * @param {Array.<Object>|Array.<module:echarts/model/Component>} exists\n * @param {Object|Array.<Object>} newCptOptions\n * @return {Array.<Object>} Result, like [{exist: ..., option: ...}, {}],\n *                          index of which is the same as exists.\n */\n\nfunction mappingToExists(exists, newCptOptions) {\n  // Mapping by the order by original option (but not order of\n  // new option) in merge mode. Because we should ensure\n  // some specified index (like xAxisIndex) is consistent with\n  // original option, which is easy to understand, espatially in\n  // media query. And in most case, merge option is used to\n  // update partial option but not be expected to change order.\n  newCptOptions = (newCptOptions || []).slice();\n  var result = zrUtil.map(exists || [], function (obj, index) {\n    return {\n      exist: obj\n    };\n  }); // Mapping by id or name if specified.\n\n  each(newCptOptions, function (cptOption, index) {\n    if (!isObject(cptOption)) {\n      return;\n    } // id has highest priority.\n\n    for (var i = 0; i < result.length; i++) {\n      if (!result[i].option // Consider name: two map to one.\n      && cptOption.id != null && result[i].exist.id === cptOption.id + '') {\n        result[i].option = cptOption;\n        newCptOptions[index] = null;\n        return;\n      }\n    }\n    for (var i = 0; i < result.length; i++) {\n      var exist = result[i].exist;\n      if (!result[i].option // Consider name: two map to one.\n      // Can not match when both ids exist but different.\n      && (exist.id == null || cptOption.id == null) && cptOption.name != null && !isIdInner(cptOption) && !isIdInner(exist) && exist.name === cptOption.name + '') {\n        result[i].option = cptOption;\n        newCptOptions[index] = null;\n        return;\n      }\n    }\n  }); // Otherwise mapping by index.\n\n  each(newCptOptions, function (cptOption, index) {\n    if (!isObject(cptOption)) {\n      return;\n    }\n    var i = 0;\n    for (; i < result.length; i++) {\n      var exist = result[i].exist;\n      if (!result[i].option // Existing model that already has id should be able to\n      // mapped to (because after mapping performed model may\n      // be assigned with a id, whish should not affect next\n      // mapping), except those has inner id.\n      && !isIdInner(exist) // Caution:\n      // Do not overwrite id. But name can be overwritten,\n      // because axis use name as 'show label text'.\n      // 'exist' always has id and name and we dont\n      // need to check it.\n      && cptOption.id == null) {\n        result[i].option = cptOption;\n        break;\n      }\n    }\n    if (i >= result.length) {\n      result.push({\n        option: cptOption\n      });\n    }\n  });\n  return result;\n}\n/**\n * Make id and name for mapping result (result of mappingToExists)\n * into `keyInfo` field.\n *\n * @public\n * @param {Array.<Object>} Result, like [{exist: ..., option: ...}, {}],\n *                          which order is the same as exists.\n * @return {Array.<Object>} The input.\n */\n\nfunction makeIdAndName(mapResult) {\n  // We use this id to hash component models and view instances\n  // in echarts. id can be specified by user, or auto generated.\n  // The id generation rule ensures new view instance are able\n  // to mapped to old instance when setOption are called in\n  // no-merge mode. So we generate model id by name and plus\n  // type in view id.\n  // name can be duplicated among components, which is convenient\n  // to specify multi components (like series) by one name.\n  // Ensure that each id is distinct.\n  var idMap = zrUtil.createHashMap();\n  each(mapResult, function (item, index) {\n    var existCpt = item.exist;\n    existCpt && idMap.set(existCpt.id, item);\n  });\n  each(mapResult, function (item, index) {\n    var opt = item.option;\n    zrUtil.assert(!opt || opt.id == null || !idMap.get(opt.id) || idMap.get(opt.id) === item, 'id duplicates: ' + (opt && opt.id));\n    opt && opt.id != null && idMap.set(opt.id, item);\n    !item.keyInfo && (item.keyInfo = {});\n  }); // Make name and id.\n\n  each(mapResult, function (item, index) {\n    var existCpt = item.exist;\n    var opt = item.option;\n    var keyInfo = item.keyInfo;\n    if (!isObject(opt)) {\n      return;\n    } // name can be overwitten. Consider case: axis.name = '20km'.\n    // But id generated by name will not be changed, which affect\n    // only in that case: setOption with 'not merge mode' and view\n    // instance will be recreated, which can be accepted.\n\n    keyInfo.name = opt.name != null ? opt.name + '' : existCpt ? existCpt.name // Avoid diffferent series has the same name,\n    // because name may be used like in color pallet.\n    : DUMMY_COMPONENT_NAME_PREFIX + index;\n    if (existCpt) {\n      keyInfo.id = existCpt.id;\n    } else if (opt.id != null) {\n      keyInfo.id = opt.id + '';\n    } else {\n      // Consider this situatoin:\n      //  optionA: [{name: 'a'}, {name: 'a'}, {..}]\n      //  optionB [{..}, {name: 'a'}, {name: 'a'}]\n      // Series with the same name between optionA and optionB\n      // should be mapped.\n      var idNum = 0;\n      do {\n        keyInfo.id = '\\0' + keyInfo.name + '\\0' + idNum++;\n      } while (idMap.get(keyInfo.id));\n    }\n    idMap.set(keyInfo.id, item);\n  });\n}\nfunction isNameSpecified(componentModel) {\n  var name = componentModel.name; // Is specified when `indexOf` get -1 or > 0.\n\n  return !!(name && name.indexOf(DUMMY_COMPONENT_NAME_PREFIX));\n}\n/**\n * @public\n * @param {Object} cptOption\n * @return {boolean}\n */\n\nfunction isIdInner(cptOption) {\n  return isObject(cptOption) && cptOption.id && (cptOption.id + '').indexOf('\\0_ec_\\0') === 0;\n}\n/**\n * A helper for removing duplicate items between batchA and batchB,\n * and in themselves, and categorize by series.\n *\n * @param {Array.<Object>} batchA Like: [{seriesId: 2, dataIndex: [32, 4, 5]}, ...]\n * @param {Array.<Object>} batchB Like: [{seriesId: 2, dataIndex: [32, 4, 5]}, ...]\n * @return {Array.<Array.<Object>, Array.<Object>>} result: [resultBatchA, resultBatchB]\n */\n\nfunction compressBatches(batchA, batchB) {\n  var mapA = {};\n  var mapB = {};\n  makeMap(batchA || [], mapA);\n  makeMap(batchB || [], mapB, mapA);\n  return [mapToArray(mapA), mapToArray(mapB)];\n  function makeMap(sourceBatch, map, otherMap) {\n    for (var i = 0, len = sourceBatch.length; i < len; i++) {\n      var seriesId = sourceBatch[i].seriesId;\n      var dataIndices = normalizeToArray(sourceBatch[i].dataIndex);\n      var otherDataIndices = otherMap && otherMap[seriesId];\n      for (var j = 0, lenj = dataIndices.length; j < lenj; j++) {\n        var dataIndex = dataIndices[j];\n        if (otherDataIndices && otherDataIndices[dataIndex]) {\n          otherDataIndices[dataIndex] = null;\n        } else {\n          (map[seriesId] || (map[seriesId] = {}))[dataIndex] = 1;\n        }\n      }\n    }\n  }\n  function mapToArray(map, isData) {\n    var result = [];\n    for (var i in map) {\n      if (map.hasOwnProperty(i) && map[i] != null) {\n        if (isData) {\n          result.push(+i);\n        } else {\n          var dataIndices = mapToArray(map[i], true);\n          dataIndices.length && result.push({\n            seriesId: i,\n            dataIndex: dataIndices\n          });\n        }\n      }\n    }\n    return result;\n  }\n}\n/**\n * @param {module:echarts/data/List} data\n * @param {Object} payload Contains dataIndex (means rawIndex) / dataIndexInside / name\n *                         each of which can be Array or primary type.\n * @return {number|Array.<number>} dataIndex If not found, return undefined/null.\n */\n\nfunction queryDataIndex(data, payload) {\n  if (payload.dataIndexInside != null) {\n    return payload.dataIndexInside;\n  } else if (payload.dataIndex != null) {\n    return zrUtil.isArray(payload.dataIndex) ? zrUtil.map(payload.dataIndex, function (value) {\n      return data.indexOfRawIndex(value);\n    }) : data.indexOfRawIndex(payload.dataIndex);\n  } else if (payload.name != null) {\n    return zrUtil.isArray(payload.name) ? zrUtil.map(payload.name, function (value) {\n      return data.indexOfName(value);\n    }) : data.indexOfName(payload.name);\n  }\n}\n/**\n * Enable property storage to any host object.\n * Notice: Serialization is not supported.\n *\n * For example:\n * var inner = zrUitl.makeInner();\n *\n * function some1(hostObj) {\n *      inner(hostObj).someProperty = 1212;\n *      ...\n * }\n * function some2() {\n *      var fields = inner(this);\n *      fields.someProperty1 = 1212;\n *      fields.someProperty2 = 'xx';\n *      ...\n * }\n *\n * @return {Function}\n */\n\nfunction makeInner() {\n  // Consider different scope by es module import.\n  var key = '__\\0ec_inner_' + innerUniqueIndex++ + '_' + Math.random().toFixed(5);\n  return function (hostObj) {\n    return hostObj[key] || (hostObj[key] = {});\n  };\n}\nvar innerUniqueIndex = 0;\n/**\n * @param {module:echarts/model/Global} ecModel\n * @param {string|Object} finder\n *        If string, e.g., 'geo', means {geoIndex: 0}.\n *        If Object, could contain some of these properties below:\n *        {\n *            seriesIndex, seriesId, seriesName,\n *            geoIndex, geoId, geoName,\n *            bmapIndex, bmapId, bmapName,\n *            xAxisIndex, xAxisId, xAxisName,\n *            yAxisIndex, yAxisId, yAxisName,\n *            gridIndex, gridId, gridName,\n *            ... (can be extended)\n *        }\n *        Each properties can be number|string|Array.<number>|Array.<string>\n *        For example, a finder could be\n *        {\n *            seriesIndex: 3,\n *            geoId: ['aa', 'cc'],\n *            gridName: ['xx', 'rr']\n *        }\n *        xxxIndex can be set as 'all' (means all xxx) or 'none' (means not specify)\n *        If nothing or null/undefined specified, return nothing.\n * @param {Object} [opt]\n * @param {string} [opt.defaultMainType]\n * @param {Array.<string>} [opt.includeMainTypes]\n * @return {Object} result like:\n *        {\n *            seriesModels: [seriesModel1, seriesModel2],\n *            seriesModel: seriesModel1, // The first model\n *            geoModels: [geoModel1, geoModel2],\n *            geoModel: geoModel1, // The first model\n *            ...\n *        }\n */\n\nfunction parseFinder(ecModel, finder, opt) {\n  if (zrUtil.isString(finder)) {\n    var obj = {};\n    obj[finder + 'Index'] = 0;\n    finder = obj;\n  }\n  var defaultMainType = opt && opt.defaultMainType;\n  if (defaultMainType && !has(finder, defaultMainType + 'Index') && !has(finder, defaultMainType + 'Id') && !has(finder, defaultMainType + 'Name')) {\n    finder[defaultMainType + 'Index'] = 0;\n  }\n  var result = {};\n  each(finder, function (value, key) {\n    var value = finder[key]; // Exclude 'dataIndex' and other illgal keys.\n\n    if (key === 'dataIndex' || key === 'dataIndexInside') {\n      result[key] = value;\n      return;\n    }\n    var parsedKey = key.match(/^(\\w+)(Index|Id|Name)$/) || [];\n    var mainType = parsedKey[1];\n    var queryType = (parsedKey[2] || '').toLowerCase();\n    if (!mainType || !queryType || value == null || queryType === 'index' && value === 'none' || opt && opt.includeMainTypes && zrUtil.indexOf(opt.includeMainTypes, mainType) < 0) {\n      return;\n    }\n    var queryParam = {\n      mainType: mainType\n    };\n    if (queryType !== 'index' || value !== 'all') {\n      queryParam[queryType] = value;\n    }\n    var models = ecModel.queryComponents(queryParam);\n    result[mainType + 'Models'] = models;\n    result[mainType + 'Model'] = models[0];\n  });\n  return result;\n}\nfunction has(obj, prop) {\n  return obj && obj.hasOwnProperty(prop);\n}\nfunction setAttribute(dom, key, value) {\n  dom.setAttribute ? dom.setAttribute(key, value) : dom[key] = value;\n}\nfunction getAttribute(dom, key) {\n  return dom.getAttribute ? dom.getAttribute(key) : dom[key];\n}\nfunction getTooltipRenderMode(renderModeOption) {\n  if (renderModeOption === 'auto') {\n    // Using html when `document` exists, use richText otherwise\n    return env.domSupported ? 'html' : 'richText';\n  } else {\n    return renderModeOption || 'html';\n  }\n}\n/**\n * Group a list by key.\n *\n * @param {Array} array\n * @param {Function} getKey\n *        param {*} Array item\n *        return {string} key\n * @return {Object} Result\n *        {Array}: keys,\n *        {module:zrender/core/util/HashMap} buckets: {key -> Array}\n */\n\nfunction groupData(array, getKey) {\n  var buckets = zrUtil.createHashMap();\n  var keys = [];\n  zrUtil.each(array, function (item) {\n    var key = getKey(item);\n    (buckets.get(key) || (keys.push(key), buckets.set(key, []))).push(item);\n  });\n  return {\n    keys: keys,\n    buckets: buckets\n  };\n}\nexports.normalizeToArray = normalizeToArray;\nexports.defaultEmphasis = defaultEmphasis;\nexports.TEXT_STYLE_OPTIONS = TEXT_STYLE_OPTIONS;\nexports.getDataItemValue = getDataItemValue;\nexports.isDataItemOption = isDataItemOption;\nexports.mappingToExists = mappingToExists;\nexports.makeIdAndName = makeIdAndName;\nexports.isNameSpecified = isNameSpecified;\nexports.isIdInner = isIdInner;\nexports.compressBatches = compressBatches;\nexports.queryDataIndex = queryDataIndex;\nexports.makeInner = makeInner;\nexports.parseFinder = parseFinder;\nexports.setAttribute = setAttribute;\nexports.getAttribute = getAttribute;\nexports.getTooltipRenderMode = getTooltipRenderMode;\nexports.groupData = groupData;","map":{"version":3,"names":["zrUtil","require","env","each","isObject","isArray","DUMMY_COMPONENT_NAME_PREFIX","normalizeToArray","value","Array","defaultEmphasis","opt","key","subOpts","emphasis","i","len","length","subOptName","hasOwnProperty","TEXT_STYLE_OPTIONS","getDataItemValue","dataItem","Date","isDataItemOption","mappingToExists","exists","newCptOptions","slice","result","map","obj","index","exist","cptOption","option","id","name","isIdInner","push","makeIdAndName","mapResult","idMap","createHashMap","item","existCpt","set","assert","get","keyInfo","idNum","isNameSpecified","componentModel","indexOf","compressBatches","batchA","batchB","mapA","mapB","makeMap","mapToArray","sourceBatch","otherMap","seriesId","dataIndices","dataIndex","otherDataIndices","j","lenj","isData","queryDataIndex","data","payload","dataIndexInside","indexOfRawIndex","indexOfName","makeInner","innerUniqueIndex","Math","random","toFixed","hostObj","parseFinder","ecModel","finder","isString","defaultMainType","has","parsedKey","match","mainType","queryType","toLowerCase","includeMainTypes","queryParam","models","queryComponents","prop","setAttribute","dom","getAttribute","getTooltipRenderMode","renderModeOption","domSupported","groupData","array","getKey","buckets","keys","exports"],"sources":["/Users/mac/Desktop/vue_bsm/vue3_bsm/node_modules/echarts/lib/util/model.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar env = require(\"zrender/lib/core/env\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar each = zrUtil.each;\nvar isObject = zrUtil.isObject;\nvar isArray = zrUtil.isArray;\n/**\n * Make the name displayable. But we should\n * make sure it is not duplicated with user\n * specified name, so use '\\0';\n */\n\nvar DUMMY_COMPONENT_NAME_PREFIX = 'series\\0';\n/**\n * If value is not array, then translate it to array.\n * @param  {*} value\n * @return {Array} [value] or value\n */\n\nfunction normalizeToArray(value) {\n  return value instanceof Array ? value : value == null ? [] : [value];\n}\n/**\n * Sync default option between normal and emphasis like `position` and `show`\n * In case some one will write code like\n *     label: {\n *          show: false,\n *          position: 'outside',\n *          fontSize: 18\n *     },\n *     emphasis: {\n *          label: { show: true }\n *     }\n * @param {Object} opt\n * @param {string} key\n * @param {Array.<string>} subOpts\n */\n\n\nfunction defaultEmphasis(opt, key, subOpts) {\n  // Caution: performance sensitive.\n  if (opt) {\n    opt[key] = opt[key] || {};\n    opt.emphasis = opt.emphasis || {};\n    opt.emphasis[key] = opt.emphasis[key] || {}; // Default emphasis option from normal\n\n    for (var i = 0, len = subOpts.length; i < len; i++) {\n      var subOptName = subOpts[i];\n\n      if (!opt.emphasis[key].hasOwnProperty(subOptName) && opt[key].hasOwnProperty(subOptName)) {\n        opt.emphasis[key][subOptName] = opt[key][subOptName];\n      }\n    }\n  }\n}\n\nvar TEXT_STYLE_OPTIONS = ['fontStyle', 'fontWeight', 'fontSize', 'fontFamily', 'rich', 'tag', 'color', 'textBorderColor', 'textBorderWidth', 'width', 'height', 'lineHeight', 'align', 'verticalAlign', 'baseline', 'shadowColor', 'shadowBlur', 'shadowOffsetX', 'shadowOffsetY', 'textShadowColor', 'textShadowBlur', 'textShadowOffsetX', 'textShadowOffsetY', 'backgroundColor', 'borderColor', 'borderWidth', 'borderRadius', 'padding']; // modelUtil.LABEL_OPTIONS = modelUtil.TEXT_STYLE_OPTIONS.concat([\n//     'position', 'offset', 'rotate', 'origin', 'show', 'distance', 'formatter',\n//     'fontStyle', 'fontWeight', 'fontSize', 'fontFamily',\n//     // FIXME: deprecated, check and remove it.\n//     'textStyle'\n// ]);\n\n/**\n * The method do not ensure performance.\n * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]\n * This helper method retieves value from data.\n * @param {string|number|Date|Array|Object} dataItem\n * @return {number|string|Date|Array.<number|string|Date>}\n */\n\nfunction getDataItemValue(dataItem) {\n  return isObject(dataItem) && !isArray(dataItem) && !(dataItem instanceof Date) ? dataItem.value : dataItem;\n}\n/**\n * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]\n * This helper method determine if dataItem has extra option besides value\n * @param {string|number|Date|Array|Object} dataItem\n */\n\n\nfunction isDataItemOption(dataItem) {\n  return isObject(dataItem) && !(dataItem instanceof Array); // // markLine data can be array\n  // && !(dataItem[0] && isObject(dataItem[0]) && !(dataItem[0] instanceof Array));\n}\n/**\n * Mapping to exists for merge.\n *\n * @public\n * @param {Array.<Object>|Array.<module:echarts/model/Component>} exists\n * @param {Object|Array.<Object>} newCptOptions\n * @return {Array.<Object>} Result, like [{exist: ..., option: ...}, {}],\n *                          index of which is the same as exists.\n */\n\n\nfunction mappingToExists(exists, newCptOptions) {\n  // Mapping by the order by original option (but not order of\n  // new option) in merge mode. Because we should ensure\n  // some specified index (like xAxisIndex) is consistent with\n  // original option, which is easy to understand, espatially in\n  // media query. And in most case, merge option is used to\n  // update partial option but not be expected to change order.\n  newCptOptions = (newCptOptions || []).slice();\n  var result = zrUtil.map(exists || [], function (obj, index) {\n    return {\n      exist: obj\n    };\n  }); // Mapping by id or name if specified.\n\n  each(newCptOptions, function (cptOption, index) {\n    if (!isObject(cptOption)) {\n      return;\n    } // id has highest priority.\n\n\n    for (var i = 0; i < result.length; i++) {\n      if (!result[i].option // Consider name: two map to one.\n      && cptOption.id != null && result[i].exist.id === cptOption.id + '') {\n        result[i].option = cptOption;\n        newCptOptions[index] = null;\n        return;\n      }\n    }\n\n    for (var i = 0; i < result.length; i++) {\n      var exist = result[i].exist;\n\n      if (!result[i].option // Consider name: two map to one.\n      // Can not match when both ids exist but different.\n      && (exist.id == null || cptOption.id == null) && cptOption.name != null && !isIdInner(cptOption) && !isIdInner(exist) && exist.name === cptOption.name + '') {\n        result[i].option = cptOption;\n        newCptOptions[index] = null;\n        return;\n      }\n    }\n  }); // Otherwise mapping by index.\n\n  each(newCptOptions, function (cptOption, index) {\n    if (!isObject(cptOption)) {\n      return;\n    }\n\n    var i = 0;\n\n    for (; i < result.length; i++) {\n      var exist = result[i].exist;\n\n      if (!result[i].option // Existing model that already has id should be able to\n      // mapped to (because after mapping performed model may\n      // be assigned with a id, whish should not affect next\n      // mapping), except those has inner id.\n      && !isIdInner(exist) // Caution:\n      // Do not overwrite id. But name can be overwritten,\n      // because axis use name as 'show label text'.\n      // 'exist' always has id and name and we dont\n      // need to check it.\n      && cptOption.id == null) {\n        result[i].option = cptOption;\n        break;\n      }\n    }\n\n    if (i >= result.length) {\n      result.push({\n        option: cptOption\n      });\n    }\n  });\n  return result;\n}\n/**\n * Make id and name for mapping result (result of mappingToExists)\n * into `keyInfo` field.\n *\n * @public\n * @param {Array.<Object>} Result, like [{exist: ..., option: ...}, {}],\n *                          which order is the same as exists.\n * @return {Array.<Object>} The input.\n */\n\n\nfunction makeIdAndName(mapResult) {\n  // We use this id to hash component models and view instances\n  // in echarts. id can be specified by user, or auto generated.\n  // The id generation rule ensures new view instance are able\n  // to mapped to old instance when setOption are called in\n  // no-merge mode. So we generate model id by name and plus\n  // type in view id.\n  // name can be duplicated among components, which is convenient\n  // to specify multi components (like series) by one name.\n  // Ensure that each id is distinct.\n  var idMap = zrUtil.createHashMap();\n  each(mapResult, function (item, index) {\n    var existCpt = item.exist;\n    existCpt && idMap.set(existCpt.id, item);\n  });\n  each(mapResult, function (item, index) {\n    var opt = item.option;\n    zrUtil.assert(!opt || opt.id == null || !idMap.get(opt.id) || idMap.get(opt.id) === item, 'id duplicates: ' + (opt && opt.id));\n    opt && opt.id != null && idMap.set(opt.id, item);\n    !item.keyInfo && (item.keyInfo = {});\n  }); // Make name and id.\n\n  each(mapResult, function (item, index) {\n    var existCpt = item.exist;\n    var opt = item.option;\n    var keyInfo = item.keyInfo;\n\n    if (!isObject(opt)) {\n      return;\n    } // name can be overwitten. Consider case: axis.name = '20km'.\n    // But id generated by name will not be changed, which affect\n    // only in that case: setOption with 'not merge mode' and view\n    // instance will be recreated, which can be accepted.\n\n\n    keyInfo.name = opt.name != null ? opt.name + '' : existCpt ? existCpt.name // Avoid diffferent series has the same name,\n    // because name may be used like in color pallet.\n    : DUMMY_COMPONENT_NAME_PREFIX + index;\n\n    if (existCpt) {\n      keyInfo.id = existCpt.id;\n    } else if (opt.id != null) {\n      keyInfo.id = opt.id + '';\n    } else {\n      // Consider this situatoin:\n      //  optionA: [{name: 'a'}, {name: 'a'}, {..}]\n      //  optionB [{..}, {name: 'a'}, {name: 'a'}]\n      // Series with the same name between optionA and optionB\n      // should be mapped.\n      var idNum = 0;\n\n      do {\n        keyInfo.id = '\\0' + keyInfo.name + '\\0' + idNum++;\n      } while (idMap.get(keyInfo.id));\n    }\n\n    idMap.set(keyInfo.id, item);\n  });\n}\n\nfunction isNameSpecified(componentModel) {\n  var name = componentModel.name; // Is specified when `indexOf` get -1 or > 0.\n\n  return !!(name && name.indexOf(DUMMY_COMPONENT_NAME_PREFIX));\n}\n/**\n * @public\n * @param {Object} cptOption\n * @return {boolean}\n */\n\n\nfunction isIdInner(cptOption) {\n  return isObject(cptOption) && cptOption.id && (cptOption.id + '').indexOf('\\0_ec_\\0') === 0;\n}\n/**\n * A helper for removing duplicate items between batchA and batchB,\n * and in themselves, and categorize by series.\n *\n * @param {Array.<Object>} batchA Like: [{seriesId: 2, dataIndex: [32, 4, 5]}, ...]\n * @param {Array.<Object>} batchB Like: [{seriesId: 2, dataIndex: [32, 4, 5]}, ...]\n * @return {Array.<Array.<Object>, Array.<Object>>} result: [resultBatchA, resultBatchB]\n */\n\n\nfunction compressBatches(batchA, batchB) {\n  var mapA = {};\n  var mapB = {};\n  makeMap(batchA || [], mapA);\n  makeMap(batchB || [], mapB, mapA);\n  return [mapToArray(mapA), mapToArray(mapB)];\n\n  function makeMap(sourceBatch, map, otherMap) {\n    for (var i = 0, len = sourceBatch.length; i < len; i++) {\n      var seriesId = sourceBatch[i].seriesId;\n      var dataIndices = normalizeToArray(sourceBatch[i].dataIndex);\n      var otherDataIndices = otherMap && otherMap[seriesId];\n\n      for (var j = 0, lenj = dataIndices.length; j < lenj; j++) {\n        var dataIndex = dataIndices[j];\n\n        if (otherDataIndices && otherDataIndices[dataIndex]) {\n          otherDataIndices[dataIndex] = null;\n        } else {\n          (map[seriesId] || (map[seriesId] = {}))[dataIndex] = 1;\n        }\n      }\n    }\n  }\n\n  function mapToArray(map, isData) {\n    var result = [];\n\n    for (var i in map) {\n      if (map.hasOwnProperty(i) && map[i] != null) {\n        if (isData) {\n          result.push(+i);\n        } else {\n          var dataIndices = mapToArray(map[i], true);\n          dataIndices.length && result.push({\n            seriesId: i,\n            dataIndex: dataIndices\n          });\n        }\n      }\n    }\n\n    return result;\n  }\n}\n/**\n * @param {module:echarts/data/List} data\n * @param {Object} payload Contains dataIndex (means rawIndex) / dataIndexInside / name\n *                         each of which can be Array or primary type.\n * @return {number|Array.<number>} dataIndex If not found, return undefined/null.\n */\n\n\nfunction queryDataIndex(data, payload) {\n  if (payload.dataIndexInside != null) {\n    return payload.dataIndexInside;\n  } else if (payload.dataIndex != null) {\n    return zrUtil.isArray(payload.dataIndex) ? zrUtil.map(payload.dataIndex, function (value) {\n      return data.indexOfRawIndex(value);\n    }) : data.indexOfRawIndex(payload.dataIndex);\n  } else if (payload.name != null) {\n    return zrUtil.isArray(payload.name) ? zrUtil.map(payload.name, function (value) {\n      return data.indexOfName(value);\n    }) : data.indexOfName(payload.name);\n  }\n}\n/**\n * Enable property storage to any host object.\n * Notice: Serialization is not supported.\n *\n * For example:\n * var inner = zrUitl.makeInner();\n *\n * function some1(hostObj) {\n *      inner(hostObj).someProperty = 1212;\n *      ...\n * }\n * function some2() {\n *      var fields = inner(this);\n *      fields.someProperty1 = 1212;\n *      fields.someProperty2 = 'xx';\n *      ...\n * }\n *\n * @return {Function}\n */\n\n\nfunction makeInner() {\n  // Consider different scope by es module import.\n  var key = '__\\0ec_inner_' + innerUniqueIndex++ + '_' + Math.random().toFixed(5);\n  return function (hostObj) {\n    return hostObj[key] || (hostObj[key] = {});\n  };\n}\n\nvar innerUniqueIndex = 0;\n/**\n * @param {module:echarts/model/Global} ecModel\n * @param {string|Object} finder\n *        If string, e.g., 'geo', means {geoIndex: 0}.\n *        If Object, could contain some of these properties below:\n *        {\n *            seriesIndex, seriesId, seriesName,\n *            geoIndex, geoId, geoName,\n *            bmapIndex, bmapId, bmapName,\n *            xAxisIndex, xAxisId, xAxisName,\n *            yAxisIndex, yAxisId, yAxisName,\n *            gridIndex, gridId, gridName,\n *            ... (can be extended)\n *        }\n *        Each properties can be number|string|Array.<number>|Array.<string>\n *        For example, a finder could be\n *        {\n *            seriesIndex: 3,\n *            geoId: ['aa', 'cc'],\n *            gridName: ['xx', 'rr']\n *        }\n *        xxxIndex can be set as 'all' (means all xxx) or 'none' (means not specify)\n *        If nothing or null/undefined specified, return nothing.\n * @param {Object} [opt]\n * @param {string} [opt.defaultMainType]\n * @param {Array.<string>} [opt.includeMainTypes]\n * @return {Object} result like:\n *        {\n *            seriesModels: [seriesModel1, seriesModel2],\n *            seriesModel: seriesModel1, // The first model\n *            geoModels: [geoModel1, geoModel2],\n *            geoModel: geoModel1, // The first model\n *            ...\n *        }\n */\n\nfunction parseFinder(ecModel, finder, opt) {\n  if (zrUtil.isString(finder)) {\n    var obj = {};\n    obj[finder + 'Index'] = 0;\n    finder = obj;\n  }\n\n  var defaultMainType = opt && opt.defaultMainType;\n\n  if (defaultMainType && !has(finder, defaultMainType + 'Index') && !has(finder, defaultMainType + 'Id') && !has(finder, defaultMainType + 'Name')) {\n    finder[defaultMainType + 'Index'] = 0;\n  }\n\n  var result = {};\n  each(finder, function (value, key) {\n    var value = finder[key]; // Exclude 'dataIndex' and other illgal keys.\n\n    if (key === 'dataIndex' || key === 'dataIndexInside') {\n      result[key] = value;\n      return;\n    }\n\n    var parsedKey = key.match(/^(\\w+)(Index|Id|Name)$/) || [];\n    var mainType = parsedKey[1];\n    var queryType = (parsedKey[2] || '').toLowerCase();\n\n    if (!mainType || !queryType || value == null || queryType === 'index' && value === 'none' || opt && opt.includeMainTypes && zrUtil.indexOf(opt.includeMainTypes, mainType) < 0) {\n      return;\n    }\n\n    var queryParam = {\n      mainType: mainType\n    };\n\n    if (queryType !== 'index' || value !== 'all') {\n      queryParam[queryType] = value;\n    }\n\n    var models = ecModel.queryComponents(queryParam);\n    result[mainType + 'Models'] = models;\n    result[mainType + 'Model'] = models[0];\n  });\n  return result;\n}\n\nfunction has(obj, prop) {\n  return obj && obj.hasOwnProperty(prop);\n}\n\nfunction setAttribute(dom, key, value) {\n  dom.setAttribute ? dom.setAttribute(key, value) : dom[key] = value;\n}\n\nfunction getAttribute(dom, key) {\n  return dom.getAttribute ? dom.getAttribute(key) : dom[key];\n}\n\nfunction getTooltipRenderMode(renderModeOption) {\n  if (renderModeOption === 'auto') {\n    // Using html when `document` exists, use richText otherwise\n    return env.domSupported ? 'html' : 'richText';\n  } else {\n    return renderModeOption || 'html';\n  }\n}\n/**\n * Group a list by key.\n *\n * @param {Array} array\n * @param {Function} getKey\n *        param {*} Array item\n *        return {string} key\n * @return {Object} Result\n *        {Array}: keys,\n *        {module:zrender/core/util/HashMap} buckets: {key -> Array}\n */\n\n\nfunction groupData(array, getKey) {\n  var buckets = zrUtil.createHashMap();\n  var keys = [];\n  zrUtil.each(array, function (item) {\n    var key = getKey(item);\n    (buckets.get(key) || (keys.push(key), buckets.set(key, []))).push(item);\n  });\n  return {\n    keys: keys,\n    buckets: buckets\n  };\n}\n\nexports.normalizeToArray = normalizeToArray;\nexports.defaultEmphasis = defaultEmphasis;\nexports.TEXT_STYLE_OPTIONS = TEXT_STYLE_OPTIONS;\nexports.getDataItemValue = getDataItemValue;\nexports.isDataItemOption = isDataItemOption;\nexports.mappingToExists = mappingToExists;\nexports.makeIdAndName = makeIdAndName;\nexports.isNameSpecified = isNameSpecified;\nexports.isIdInner = isIdInner;\nexports.compressBatches = compressBatches;\nexports.queryDataIndex = queryDataIndex;\nexports.makeInner = makeInner;\nexports.parseFinder = parseFinder;\nexports.setAttribute = setAttribute;\nexports.getAttribute = getAttribute;\nexports.getTooltipRenderMode = getTooltipRenderMode;\nexports.groupData = groupData;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}