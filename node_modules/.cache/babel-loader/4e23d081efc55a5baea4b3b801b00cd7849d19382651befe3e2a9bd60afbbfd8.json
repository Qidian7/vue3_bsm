{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Link lists and struct (graph or tree)\n */\nvar each = zrUtil.each;\nvar DATAS = '\\0__link_datas';\nvar MAIN_DATA = '\\0__link_mainData'; // Caution:\n// In most case, either list or its shallow clones (see list.cloneShallow)\n// is active in echarts process. So considering heap memory consumption,\n// we do not clone tree or graph, but share them among list and its shallow clones.\n// But in some rare case, we have to keep old list (like do animation in chart). So\n// please take care that both the old list and the new list share the same tree/graph.\n\n/**\n * @param {Object} opt\n * @param {module:echarts/data/List} opt.mainData\n * @param {Object} [opt.struct] For example, instance of Graph or Tree.\n * @param {string} [opt.structAttr] designation: list[structAttr] = struct;\n * @param {Object} [opt.datas] {dataType: data},\n *                 like: {node: nodeList, edge: edgeList}.\n *                 Should contain mainData.\n * @param {Object} [opt.datasAttr] {dataType: attr},\n *                 designation: struct[datasAttr[dataType]] = list;\n */\n\nfunction linkList(opt) {\n  var mainData = opt.mainData;\n  var datas = opt.datas;\n  if (!datas) {\n    datas = {\n      main: mainData\n    };\n    opt.datasAttr = {\n      main: 'data'\n    };\n  }\n  opt.datas = opt.mainData = null;\n  linkAll(mainData, datas, opt); // Porxy data original methods.\n\n  each(datas, function (data) {\n    each(mainData.TRANSFERABLE_METHODS, function (methodName) {\n      data.wrapMethod(methodName, zrUtil.curry(transferInjection, opt));\n    });\n  }); // Beyond transfer, additional features should be added to `cloneShallow`.\n\n  mainData.wrapMethod('cloneShallow', zrUtil.curry(cloneShallowInjection, opt)); // Only mainData trigger change, because struct.update may trigger\n  // another changable methods, which may bring about dead lock.\n\n  each(mainData.CHANGABLE_METHODS, function (methodName) {\n    mainData.wrapMethod(methodName, zrUtil.curry(changeInjection, opt));\n  }); // Make sure datas contains mainData.\n\n  zrUtil.assert(datas[mainData.dataType] === mainData);\n}\nfunction transferInjection(opt, res) {\n  if (isMainData(this)) {\n    // Transfer datas to new main data.\n    var datas = zrUtil.extend({}, this[DATAS]);\n    datas[this.dataType] = res;\n    linkAll(res, datas, opt);\n  } else {\n    // Modify the reference in main data to point newData.\n    linkSingle(res, this.dataType, this[MAIN_DATA], opt);\n  }\n  return res;\n}\nfunction changeInjection(opt, res) {\n  opt.struct && opt.struct.update(this);\n  return res;\n}\nfunction cloneShallowInjection(opt, res) {\n  // cloneShallow, which brings about some fragilities, may be inappropriate\n  // to be exposed as an API. So for implementation simplicity we can make\n  // the restriction that cloneShallow of not-mainData should not be invoked\n  // outside, but only be invoked here.\n  each(res[DATAS], function (data, dataType) {\n    data !== res && linkSingle(data.cloneShallow(), dataType, res, opt);\n  });\n  return res;\n}\n/**\n * Supplement method to List.\n *\n * @public\n * @param {string} [dataType] If not specified, return mainData.\n * @return {module:echarts/data/List}\n */\n\nfunction getLinkedData(dataType) {\n  var mainData = this[MAIN_DATA];\n  return dataType == null || mainData == null ? mainData : mainData[DATAS][dataType];\n}\nfunction isMainData(data) {\n  return data[MAIN_DATA] === data;\n}\nfunction linkAll(mainData, datas, opt) {\n  mainData[DATAS] = {};\n  each(datas, function (data, dataType) {\n    linkSingle(data, dataType, mainData, opt);\n  });\n}\nfunction linkSingle(data, dataType, mainData, opt) {\n  mainData[DATAS][dataType] = data;\n  data[MAIN_DATA] = mainData;\n  data.dataType = dataType;\n  if (opt.struct) {\n    data[opt.structAttr] = opt.struct;\n    opt.struct[opt.datasAttr[dataType]] = data;\n  } // Supplement method.\n\n  data.getLinkedData = getLinkedData;\n}\nvar _default = linkList;\nmodule.exports = _default;","map":{"version":3,"names":["zrUtil","require","each","DATAS","MAIN_DATA","linkList","opt","mainData","datas","main","datasAttr","linkAll","data","TRANSFERABLE_METHODS","methodName","wrapMethod","curry","transferInjection","cloneShallowInjection","CHANGABLE_METHODS","changeInjection","assert","dataType","res","isMainData","extend","linkSingle","struct","update","cloneShallow","getLinkedData","structAttr","_default","module","exports"],"sources":["/Users/mac/Desktop/vue_bsm/vue3_bsm/node_modules/echarts/lib/data/helper/linkList.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Link lists and struct (graph or tree)\n */\nvar each = zrUtil.each;\nvar DATAS = '\\0__link_datas';\nvar MAIN_DATA = '\\0__link_mainData'; // Caution:\n// In most case, either list or its shallow clones (see list.cloneShallow)\n// is active in echarts process. So considering heap memory consumption,\n// we do not clone tree or graph, but share them among list and its shallow clones.\n// But in some rare case, we have to keep old list (like do animation in chart). So\n// please take care that both the old list and the new list share the same tree/graph.\n\n/**\n * @param {Object} opt\n * @param {module:echarts/data/List} opt.mainData\n * @param {Object} [opt.struct] For example, instance of Graph or Tree.\n * @param {string} [opt.structAttr] designation: list[structAttr] = struct;\n * @param {Object} [opt.datas] {dataType: data},\n *                 like: {node: nodeList, edge: edgeList}.\n *                 Should contain mainData.\n * @param {Object} [opt.datasAttr] {dataType: attr},\n *                 designation: struct[datasAttr[dataType]] = list;\n */\n\nfunction linkList(opt) {\n  var mainData = opt.mainData;\n  var datas = opt.datas;\n\n  if (!datas) {\n    datas = {\n      main: mainData\n    };\n    opt.datasAttr = {\n      main: 'data'\n    };\n  }\n\n  opt.datas = opt.mainData = null;\n  linkAll(mainData, datas, opt); // Porxy data original methods.\n\n  each(datas, function (data) {\n    each(mainData.TRANSFERABLE_METHODS, function (methodName) {\n      data.wrapMethod(methodName, zrUtil.curry(transferInjection, opt));\n    });\n  }); // Beyond transfer, additional features should be added to `cloneShallow`.\n\n  mainData.wrapMethod('cloneShallow', zrUtil.curry(cloneShallowInjection, opt)); // Only mainData trigger change, because struct.update may trigger\n  // another changable methods, which may bring about dead lock.\n\n  each(mainData.CHANGABLE_METHODS, function (methodName) {\n    mainData.wrapMethod(methodName, zrUtil.curry(changeInjection, opt));\n  }); // Make sure datas contains mainData.\n\n  zrUtil.assert(datas[mainData.dataType] === mainData);\n}\n\nfunction transferInjection(opt, res) {\n  if (isMainData(this)) {\n    // Transfer datas to new main data.\n    var datas = zrUtil.extend({}, this[DATAS]);\n    datas[this.dataType] = res;\n    linkAll(res, datas, opt);\n  } else {\n    // Modify the reference in main data to point newData.\n    linkSingle(res, this.dataType, this[MAIN_DATA], opt);\n  }\n\n  return res;\n}\n\nfunction changeInjection(opt, res) {\n  opt.struct && opt.struct.update(this);\n  return res;\n}\n\nfunction cloneShallowInjection(opt, res) {\n  // cloneShallow, which brings about some fragilities, may be inappropriate\n  // to be exposed as an API. So for implementation simplicity we can make\n  // the restriction that cloneShallow of not-mainData should not be invoked\n  // outside, but only be invoked here.\n  each(res[DATAS], function (data, dataType) {\n    data !== res && linkSingle(data.cloneShallow(), dataType, res, opt);\n  });\n  return res;\n}\n/**\n * Supplement method to List.\n *\n * @public\n * @param {string} [dataType] If not specified, return mainData.\n * @return {module:echarts/data/List}\n */\n\n\nfunction getLinkedData(dataType) {\n  var mainData = this[MAIN_DATA];\n  return dataType == null || mainData == null ? mainData : mainData[DATAS][dataType];\n}\n\nfunction isMainData(data) {\n  return data[MAIN_DATA] === data;\n}\n\nfunction linkAll(mainData, datas, opt) {\n  mainData[DATAS] = {};\n  each(datas, function (data, dataType) {\n    linkSingle(data, dataType, mainData, opt);\n  });\n}\n\nfunction linkSingle(data, dataType, mainData, opt) {\n  mainData[DATAS][dataType] = data;\n  data[MAIN_DATA] = mainData;\n  data.dataType = dataType;\n\n  if (opt.struct) {\n    data[opt.structAttr] = opt.struct;\n    opt.struct[opt.datasAttr[dataType]] = data;\n  } // Supplement method.\n\n\n  data.getLinkedData = getLinkedData;\n}\n\nvar _default = linkList;\nmodule.exports = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}