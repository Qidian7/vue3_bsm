{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar _config = require(\"../../config\");\nvar __DEV__ = _config.__DEV__;\nvar _util = require(\"zrender/lib/core/util\");\nvar isTypedArray = _util.isTypedArray;\nvar extend = _util.extend;\nvar assert = _util.assert;\nvar each = _util.each;\nvar isObject = _util.isObject;\nvar _model = require(\"../../util/model\");\nvar getDataItemValue = _model.getDataItemValue;\nvar isDataItemOption = _model.isDataItemOption;\nvar _number = require(\"../../util/number\");\nvar parseDate = _number.parseDate;\nvar Source = require(\"../Source\");\nvar _sourceType = require(\"./sourceType\");\nvar SOURCE_FORMAT_TYPED_ARRAY = _sourceType.SOURCE_FORMAT_TYPED_ARRAY;\nvar SOURCE_FORMAT_ARRAY_ROWS = _sourceType.SOURCE_FORMAT_ARRAY_ROWS;\nvar SOURCE_FORMAT_ORIGINAL = _sourceType.SOURCE_FORMAT_ORIGINAL;\nvar SOURCE_FORMAT_OBJECT_ROWS = _sourceType.SOURCE_FORMAT_OBJECT_ROWS;\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n// TODO\n// ??? refactor? check the outer usage of data provider.\n// merge with defaultDimValueGetter?\n\n/**\n * If normal array used, mutable chunk size is supported.\n * If typed array used, chunk size must be fixed.\n */\nfunction DefaultDataProvider(source, dimSize) {\n  if (!Source.isInstance(source)) {\n    source = Source.seriesDataToSource(source);\n  }\n  this._source = source;\n  var data = this._data = source.data;\n  var sourceFormat = source.sourceFormat; // Typed array. TODO IE10+?\n\n  if (sourceFormat === SOURCE_FORMAT_TYPED_ARRAY) {\n    this._offset = 0;\n    this._dimSize = dimSize;\n    this._data = data;\n  }\n  var methods = providerMethods[sourceFormat === SOURCE_FORMAT_ARRAY_ROWS ? sourceFormat + '_' + source.seriesLayoutBy : sourceFormat];\n  extend(this, methods);\n}\nvar providerProto = DefaultDataProvider.prototype; // If data is pure without style configuration\n\nproviderProto.pure = false; // If data is persistent and will not be released after use.\n\nproviderProto.persistent = true; // ???! FIXME legacy data provider do not has method getSource\n\nproviderProto.getSource = function () {\n  return this._source;\n};\nvar providerMethods = {\n  'arrayRows_column': {\n    pure: true,\n    count: function () {\n      return Math.max(0, this._data.length - this._source.startIndex);\n    },\n    getItem: function (idx) {\n      return this._data[idx + this._source.startIndex];\n    },\n    appendData: appendDataSimply\n  },\n  'arrayRows_row': {\n    pure: true,\n    count: function () {\n      var row = this._data[0];\n      return row ? Math.max(0, row.length - this._source.startIndex) : 0;\n    },\n    getItem: function (idx) {\n      idx += this._source.startIndex;\n      var item = [];\n      var data = this._data;\n      for (var i = 0; i < data.length; i++) {\n        var row = data[i];\n        item.push(row ? row[idx] : null);\n      }\n      return item;\n    },\n    appendData: function () {\n      throw new Error('Do not support appendData when set seriesLayoutBy: \"row\".');\n    }\n  },\n  'objectRows': {\n    pure: true,\n    count: countSimply,\n    getItem: getItemSimply,\n    appendData: appendDataSimply\n  },\n  'keyedColumns': {\n    pure: true,\n    count: function () {\n      var dimName = this._source.dimensionsDefine[0].name;\n      var col = this._data[dimName];\n      return col ? col.length : 0;\n    },\n    getItem: function (idx) {\n      var item = [];\n      var dims = this._source.dimensionsDefine;\n      for (var i = 0; i < dims.length; i++) {\n        var col = this._data[dims[i].name];\n        item.push(col ? col[idx] : null);\n      }\n      return item;\n    },\n    appendData: function (newData) {\n      var data = this._data;\n      each(newData, function (newCol, key) {\n        var oldCol = data[key] || (data[key] = []);\n        for (var i = 0; i < (newCol || []).length; i++) {\n          oldCol.push(newCol[i]);\n        }\n      });\n    }\n  },\n  'original': {\n    count: countSimply,\n    getItem: getItemSimply,\n    appendData: appendDataSimply\n  },\n  'typedArray': {\n    persistent: false,\n    pure: true,\n    count: function () {\n      return this._data ? this._data.length / this._dimSize : 0;\n    },\n    getItem: function (idx, out) {\n      idx = idx - this._offset;\n      out = out || [];\n      var offset = this._dimSize * idx;\n      for (var i = 0; i < this._dimSize; i++) {\n        out[i] = this._data[offset + i];\n      }\n      return out;\n    },\n    appendData: function (newData) {\n      this._data = newData;\n    },\n    // Clean self if data is already used.\n    clean: function () {\n      // PENDING\n      this._offset += this.count();\n      this._data = null;\n    }\n  }\n};\nfunction countSimply() {\n  return this._data.length;\n}\nfunction getItemSimply(idx) {\n  return this._data[idx];\n}\nfunction appendDataSimply(newData) {\n  for (var i = 0; i < newData.length; i++) {\n    this._data.push(newData[i]);\n  }\n}\nvar rawValueGetters = {\n  arrayRows: getRawValueSimply,\n  objectRows: function (dataItem, dataIndex, dimIndex, dimName) {\n    return dimIndex != null ? dataItem[dimName] : dataItem;\n  },\n  keyedColumns: getRawValueSimply,\n  original: function (dataItem, dataIndex, dimIndex, dimName) {\n    // FIXME\n    // In some case (markpoint in geo (geo-map.html)), dataItem\n    // is {coord: [...]}\n    var value = getDataItemValue(dataItem);\n    return dimIndex == null || !(value instanceof Array) ? value : value[dimIndex];\n  },\n  typedArray: getRawValueSimply\n};\nfunction getRawValueSimply(dataItem, dataIndex, dimIndex, dimName) {\n  return dimIndex != null ? dataItem[dimIndex] : dataItem;\n}\nvar defaultDimValueGetters = {\n  arrayRows: getDimValueSimply,\n  objectRows: function (dataItem, dimName, dataIndex, dimIndex) {\n    return converDataValue(dataItem[dimName], this._dimensionInfos[dimName]);\n  },\n  keyedColumns: getDimValueSimply,\n  original: function (dataItem, dimName, dataIndex, dimIndex) {\n    // Performance sensitive, do not use modelUtil.getDataItemValue.\n    // If dataItem is an plain object with no value field, the var `value`\n    // will be assigned with the object, but it will be tread correctly\n    // in the `convertDataValue`.\n    var value = dataItem && (dataItem.value == null ? dataItem : dataItem.value); // If any dataItem is like { value: 10 }\n\n    if (!this._rawData.pure && isDataItemOption(dataItem)) {\n      this.hasItemOption = true;\n    }\n    return converDataValue(value instanceof Array ? value[dimIndex] // If value is a single number or something else not array.\n    : value, this._dimensionInfos[dimName]);\n  },\n  typedArray: function (dataItem, dimName, dataIndex, dimIndex) {\n    return dataItem[dimIndex];\n  }\n};\nfunction getDimValueSimply(dataItem, dimName, dataIndex, dimIndex) {\n  return converDataValue(dataItem[dimIndex], this._dimensionInfos[dimName]);\n}\n/**\n * This helper method convert value in data.\n * @param {string|number|Date} value\n * @param {Object|string} [dimInfo] If string (like 'x'), dimType defaults 'number'.\n *        If \"dimInfo.ordinalParseAndSave\", ordinal value can be parsed.\n */\n\nfunction converDataValue(value, dimInfo) {\n  // Performance sensitive.\n  var dimType = dimInfo && dimInfo.type;\n  if (dimType === 'ordinal') {\n    // If given value is a category string\n    var ordinalMeta = dimInfo && dimInfo.ordinalMeta;\n    return ordinalMeta ? ordinalMeta.parseAndCollect(value) : value;\n  }\n  if (dimType === 'time' // spead up when using timestamp\n  && typeof value !== 'number' && value != null && value !== '-') {\n    value = +parseDate(value);\n  } // dimType defaults 'number'.\n  // If dimType is not ordinal and value is null or undefined or NaN or '-',\n  // parse to NaN.\n\n  return value == null || value === '' ? NaN // If string (like '-'), using '+' parse to NaN\n  // If object, also parse to NaN\n  : +value;\n} // ??? FIXME can these logic be more neat: getRawValue, getRawDataItem,\n// Consider persistent.\n// Caution: why use raw value to display on label or tooltip?\n// A reason is to avoid format. For example time value we do not know\n// how to format is expected. More over, if stack is used, calculated\n// value may be 0.91000000001, which have brings trouble to display.\n// TODO: consider how to treat null/undefined/NaN when display?\n\n/**\n * @param {module:echarts/data/List} data\n * @param {number} dataIndex\n * @param {string|number} [dim] dimName or dimIndex\n * @return {Array.<number>|string|number} can be null/undefined.\n */\n\nfunction retrieveRawValue(data, dataIndex, dim) {\n  if (!data) {\n    return;\n  } // Consider data may be not persistent.\n\n  var dataItem = data.getRawDataItem(dataIndex);\n  if (dataItem == null) {\n    return;\n  }\n  var sourceFormat = data.getProvider().getSource().sourceFormat;\n  var dimName;\n  var dimIndex;\n  var dimInfo = data.getDimensionInfo(dim);\n  if (dimInfo) {\n    dimName = dimInfo.name;\n    dimIndex = dimInfo.index;\n  }\n  return rawValueGetters[sourceFormat](dataItem, dataIndex, dimIndex, dimName);\n}\n/**\n * Compatible with some cases (in pie, map) like:\n * data: [{name: 'xx', value: 5, selected: true}, ...]\n * where only sourceFormat is 'original' and 'objectRows' supported.\n *\n * ??? TODO\n * Supported detail options in data item when using 'arrayRows'.\n *\n * @param {module:echarts/data/List} data\n * @param {number} dataIndex\n * @param {string} attr like 'selected'\n */\n\nfunction retrieveRawAttr(data, dataIndex, attr) {\n  if (!data) {\n    return;\n  }\n  var sourceFormat = data.getProvider().getSource().sourceFormat;\n  if (sourceFormat !== SOURCE_FORMAT_ORIGINAL && sourceFormat !== SOURCE_FORMAT_OBJECT_ROWS) {\n    return;\n  }\n  var dataItem = data.getRawDataItem(dataIndex);\n  if (sourceFormat === SOURCE_FORMAT_ORIGINAL && !isObject(dataItem)) {\n    dataItem = null;\n  }\n  if (dataItem) {\n    return dataItem[attr];\n  }\n}\nexports.DefaultDataProvider = DefaultDataProvider;\nexports.defaultDimValueGetters = defaultDimValueGetters;\nexports.retrieveRawValue = retrieveRawValue;\nexports.retrieveRawAttr = retrieveRawAttr;","map":{"version":3,"names":["_config","require","__DEV__","_util","isTypedArray","extend","assert","each","isObject","_model","getDataItemValue","isDataItemOption","_number","parseDate","Source","_sourceType","SOURCE_FORMAT_TYPED_ARRAY","SOURCE_FORMAT_ARRAY_ROWS","SOURCE_FORMAT_ORIGINAL","SOURCE_FORMAT_OBJECT_ROWS","DefaultDataProvider","source","dimSize","isInstance","seriesDataToSource","_source","data","_data","sourceFormat","_offset","_dimSize","methods","providerMethods","seriesLayoutBy","providerProto","prototype","pure","persistent","getSource","count","Math","max","length","startIndex","getItem","idx","appendData","appendDataSimply","row","item","i","push","Error","countSimply","getItemSimply","dimName","dimensionsDefine","name","col","dims","newData","newCol","key","oldCol","out","offset","clean","rawValueGetters","arrayRows","getRawValueSimply","objectRows","dataItem","dataIndex","dimIndex","keyedColumns","original","value","Array","typedArray","defaultDimValueGetters","getDimValueSimply","converDataValue","_dimensionInfos","_rawData","hasItemOption","dimInfo","dimType","type","ordinalMeta","parseAndCollect","NaN","retrieveRawValue","dim","getRawDataItem","getProvider","getDimensionInfo","index","retrieveRawAttr","attr","exports"],"sources":["/Users/mac/Desktop/vue_bsm/vue3_bsm/node_modules/echarts/lib/data/helper/dataProvider.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar _config = require(\"../../config\");\n\nvar __DEV__ = _config.__DEV__;\n\nvar _util = require(\"zrender/lib/core/util\");\n\nvar isTypedArray = _util.isTypedArray;\nvar extend = _util.extend;\nvar assert = _util.assert;\nvar each = _util.each;\nvar isObject = _util.isObject;\n\nvar _model = require(\"../../util/model\");\n\nvar getDataItemValue = _model.getDataItemValue;\nvar isDataItemOption = _model.isDataItemOption;\n\nvar _number = require(\"../../util/number\");\n\nvar parseDate = _number.parseDate;\n\nvar Source = require(\"../Source\");\n\nvar _sourceType = require(\"./sourceType\");\n\nvar SOURCE_FORMAT_TYPED_ARRAY = _sourceType.SOURCE_FORMAT_TYPED_ARRAY;\nvar SOURCE_FORMAT_ARRAY_ROWS = _sourceType.SOURCE_FORMAT_ARRAY_ROWS;\nvar SOURCE_FORMAT_ORIGINAL = _sourceType.SOURCE_FORMAT_ORIGINAL;\nvar SOURCE_FORMAT_OBJECT_ROWS = _sourceType.SOURCE_FORMAT_OBJECT_ROWS;\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n// TODO\n// ??? refactor? check the outer usage of data provider.\n// merge with defaultDimValueGetter?\n\n/**\n * If normal array used, mutable chunk size is supported.\n * If typed array used, chunk size must be fixed.\n */\nfunction DefaultDataProvider(source, dimSize) {\n  if (!Source.isInstance(source)) {\n    source = Source.seriesDataToSource(source);\n  }\n\n  this._source = source;\n  var data = this._data = source.data;\n  var sourceFormat = source.sourceFormat; // Typed array. TODO IE10+?\n\n  if (sourceFormat === SOURCE_FORMAT_TYPED_ARRAY) {\n    this._offset = 0;\n    this._dimSize = dimSize;\n    this._data = data;\n  }\n\n  var methods = providerMethods[sourceFormat === SOURCE_FORMAT_ARRAY_ROWS ? sourceFormat + '_' + source.seriesLayoutBy : sourceFormat];\n  extend(this, methods);\n}\n\nvar providerProto = DefaultDataProvider.prototype; // If data is pure without style configuration\n\nproviderProto.pure = false; // If data is persistent and will not be released after use.\n\nproviderProto.persistent = true; // ???! FIXME legacy data provider do not has method getSource\n\nproviderProto.getSource = function () {\n  return this._source;\n};\n\nvar providerMethods = {\n  'arrayRows_column': {\n    pure: true,\n    count: function () {\n      return Math.max(0, this._data.length - this._source.startIndex);\n    },\n    getItem: function (idx) {\n      return this._data[idx + this._source.startIndex];\n    },\n    appendData: appendDataSimply\n  },\n  'arrayRows_row': {\n    pure: true,\n    count: function () {\n      var row = this._data[0];\n      return row ? Math.max(0, row.length - this._source.startIndex) : 0;\n    },\n    getItem: function (idx) {\n      idx += this._source.startIndex;\n      var item = [];\n      var data = this._data;\n\n      for (var i = 0; i < data.length; i++) {\n        var row = data[i];\n        item.push(row ? row[idx] : null);\n      }\n\n      return item;\n    },\n    appendData: function () {\n      throw new Error('Do not support appendData when set seriesLayoutBy: \"row\".');\n    }\n  },\n  'objectRows': {\n    pure: true,\n    count: countSimply,\n    getItem: getItemSimply,\n    appendData: appendDataSimply\n  },\n  'keyedColumns': {\n    pure: true,\n    count: function () {\n      var dimName = this._source.dimensionsDefine[0].name;\n      var col = this._data[dimName];\n      return col ? col.length : 0;\n    },\n    getItem: function (idx) {\n      var item = [];\n      var dims = this._source.dimensionsDefine;\n\n      for (var i = 0; i < dims.length; i++) {\n        var col = this._data[dims[i].name];\n        item.push(col ? col[idx] : null);\n      }\n\n      return item;\n    },\n    appendData: function (newData) {\n      var data = this._data;\n      each(newData, function (newCol, key) {\n        var oldCol = data[key] || (data[key] = []);\n\n        for (var i = 0; i < (newCol || []).length; i++) {\n          oldCol.push(newCol[i]);\n        }\n      });\n    }\n  },\n  'original': {\n    count: countSimply,\n    getItem: getItemSimply,\n    appendData: appendDataSimply\n  },\n  'typedArray': {\n    persistent: false,\n    pure: true,\n    count: function () {\n      return this._data ? this._data.length / this._dimSize : 0;\n    },\n    getItem: function (idx, out) {\n      idx = idx - this._offset;\n      out = out || [];\n      var offset = this._dimSize * idx;\n\n      for (var i = 0; i < this._dimSize; i++) {\n        out[i] = this._data[offset + i];\n      }\n\n      return out;\n    },\n    appendData: function (newData) {\n      this._data = newData;\n    },\n    // Clean self if data is already used.\n    clean: function () {\n      // PENDING\n      this._offset += this.count();\n      this._data = null;\n    }\n  }\n};\n\nfunction countSimply() {\n  return this._data.length;\n}\n\nfunction getItemSimply(idx) {\n  return this._data[idx];\n}\n\nfunction appendDataSimply(newData) {\n  for (var i = 0; i < newData.length; i++) {\n    this._data.push(newData[i]);\n  }\n}\n\nvar rawValueGetters = {\n  arrayRows: getRawValueSimply,\n  objectRows: function (dataItem, dataIndex, dimIndex, dimName) {\n    return dimIndex != null ? dataItem[dimName] : dataItem;\n  },\n  keyedColumns: getRawValueSimply,\n  original: function (dataItem, dataIndex, dimIndex, dimName) {\n    // FIXME\n    // In some case (markpoint in geo (geo-map.html)), dataItem\n    // is {coord: [...]}\n    var value = getDataItemValue(dataItem);\n    return dimIndex == null || !(value instanceof Array) ? value : value[dimIndex];\n  },\n  typedArray: getRawValueSimply\n};\n\nfunction getRawValueSimply(dataItem, dataIndex, dimIndex, dimName) {\n  return dimIndex != null ? dataItem[dimIndex] : dataItem;\n}\n\nvar defaultDimValueGetters = {\n  arrayRows: getDimValueSimply,\n  objectRows: function (dataItem, dimName, dataIndex, dimIndex) {\n    return converDataValue(dataItem[dimName], this._dimensionInfos[dimName]);\n  },\n  keyedColumns: getDimValueSimply,\n  original: function (dataItem, dimName, dataIndex, dimIndex) {\n    // Performance sensitive, do not use modelUtil.getDataItemValue.\n    // If dataItem is an plain object with no value field, the var `value`\n    // will be assigned with the object, but it will be tread correctly\n    // in the `convertDataValue`.\n    var value = dataItem && (dataItem.value == null ? dataItem : dataItem.value); // If any dataItem is like { value: 10 }\n\n    if (!this._rawData.pure && isDataItemOption(dataItem)) {\n      this.hasItemOption = true;\n    }\n\n    return converDataValue(value instanceof Array ? value[dimIndex] // If value is a single number or something else not array.\n    : value, this._dimensionInfos[dimName]);\n  },\n  typedArray: function (dataItem, dimName, dataIndex, dimIndex) {\n    return dataItem[dimIndex];\n  }\n};\n\nfunction getDimValueSimply(dataItem, dimName, dataIndex, dimIndex) {\n  return converDataValue(dataItem[dimIndex], this._dimensionInfos[dimName]);\n}\n/**\n * This helper method convert value in data.\n * @param {string|number|Date} value\n * @param {Object|string} [dimInfo] If string (like 'x'), dimType defaults 'number'.\n *        If \"dimInfo.ordinalParseAndSave\", ordinal value can be parsed.\n */\n\n\nfunction converDataValue(value, dimInfo) {\n  // Performance sensitive.\n  var dimType = dimInfo && dimInfo.type;\n\n  if (dimType === 'ordinal') {\n    // If given value is a category string\n    var ordinalMeta = dimInfo && dimInfo.ordinalMeta;\n    return ordinalMeta ? ordinalMeta.parseAndCollect(value) : value;\n  }\n\n  if (dimType === 'time' // spead up when using timestamp\n  && typeof value !== 'number' && value != null && value !== '-') {\n    value = +parseDate(value);\n  } // dimType defaults 'number'.\n  // If dimType is not ordinal and value is null or undefined or NaN or '-',\n  // parse to NaN.\n\n\n  return value == null || value === '' ? NaN // If string (like '-'), using '+' parse to NaN\n  // If object, also parse to NaN\n  : +value;\n} // ??? FIXME can these logic be more neat: getRawValue, getRawDataItem,\n// Consider persistent.\n// Caution: why use raw value to display on label or tooltip?\n// A reason is to avoid format. For example time value we do not know\n// how to format is expected. More over, if stack is used, calculated\n// value may be 0.91000000001, which have brings trouble to display.\n// TODO: consider how to treat null/undefined/NaN when display?\n\n/**\n * @param {module:echarts/data/List} data\n * @param {number} dataIndex\n * @param {string|number} [dim] dimName or dimIndex\n * @return {Array.<number>|string|number} can be null/undefined.\n */\n\n\nfunction retrieveRawValue(data, dataIndex, dim) {\n  if (!data) {\n    return;\n  } // Consider data may be not persistent.\n\n\n  var dataItem = data.getRawDataItem(dataIndex);\n\n  if (dataItem == null) {\n    return;\n  }\n\n  var sourceFormat = data.getProvider().getSource().sourceFormat;\n  var dimName;\n  var dimIndex;\n  var dimInfo = data.getDimensionInfo(dim);\n\n  if (dimInfo) {\n    dimName = dimInfo.name;\n    dimIndex = dimInfo.index;\n  }\n\n  return rawValueGetters[sourceFormat](dataItem, dataIndex, dimIndex, dimName);\n}\n/**\n * Compatible with some cases (in pie, map) like:\n * data: [{name: 'xx', value: 5, selected: true}, ...]\n * where only sourceFormat is 'original' and 'objectRows' supported.\n *\n * ??? TODO\n * Supported detail options in data item when using 'arrayRows'.\n *\n * @param {module:echarts/data/List} data\n * @param {number} dataIndex\n * @param {string} attr like 'selected'\n */\n\n\nfunction retrieveRawAttr(data, dataIndex, attr) {\n  if (!data) {\n    return;\n  }\n\n  var sourceFormat = data.getProvider().getSource().sourceFormat;\n\n  if (sourceFormat !== SOURCE_FORMAT_ORIGINAL && sourceFormat !== SOURCE_FORMAT_OBJECT_ROWS) {\n    return;\n  }\n\n  var dataItem = data.getRawDataItem(dataIndex);\n\n  if (sourceFormat === SOURCE_FORMAT_ORIGINAL && !isObject(dataItem)) {\n    dataItem = null;\n  }\n\n  if (dataItem) {\n    return dataItem[attr];\n  }\n}\n\nexports.DefaultDataProvider = DefaultDataProvider;\nexports.defaultDimValueGetters = defaultDimValueGetters;\nexports.retrieveRawValue = retrieveRawValue;\nexports.retrieveRawAttr = retrieveRawAttr;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}