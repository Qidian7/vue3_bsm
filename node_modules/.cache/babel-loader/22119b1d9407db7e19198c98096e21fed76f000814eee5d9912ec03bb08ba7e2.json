{"ast":null,"code":"// Simple LRU cache use doubly linked list\n// @module zrender/core/LRU\n\n/**\n * Simple double linked list. Compared with array, it has O(1) remove operation.\n * @constructor\n */\nvar LinkedList = function () {\n  /**\n   * @type {module:zrender/core/LRU~Entry}\n   */\n  this.head = null;\n  /**\n   * @type {module:zrender/core/LRU~Entry}\n   */\n\n  this.tail = null;\n  this._len = 0;\n};\nvar linkedListProto = LinkedList.prototype;\n/**\n * Insert a new value at the tail\n * @param  {} val\n * @return {module:zrender/core/LRU~Entry}\n */\n\nlinkedListProto.insert = function (val) {\n  var entry = new Entry(val);\n  this.insertEntry(entry);\n  return entry;\n};\n/**\n * Insert an entry at the tail\n * @param  {module:zrender/core/LRU~Entry} entry\n */\n\nlinkedListProto.insertEntry = function (entry) {\n  if (!this.head) {\n    this.head = this.tail = entry;\n  } else {\n    this.tail.next = entry;\n    entry.prev = this.tail;\n    entry.next = null;\n    this.tail = entry;\n  }\n  this._len++;\n};\n/**\n * Remove entry.\n * @param  {module:zrender/core/LRU~Entry} entry\n */\n\nlinkedListProto.remove = function (entry) {\n  var prev = entry.prev;\n  var next = entry.next;\n  if (prev) {\n    prev.next = next;\n  } else {\n    // Is head\n    this.head = next;\n  }\n  if (next) {\n    next.prev = prev;\n  } else {\n    // Is tail\n    this.tail = prev;\n  }\n  entry.next = entry.prev = null;\n  this._len--;\n};\n/**\n * @return {number}\n */\n\nlinkedListProto.len = function () {\n  return this._len;\n};\n/**\n * Clear list\n */\n\nlinkedListProto.clear = function () {\n  this.head = this.tail = null;\n  this._len = 0;\n};\n/**\n * @constructor\n * @param {} val\n */\n\nvar Entry = function (val) {\n  /**\n   * @type {}\n   */\n  this.value = val;\n  /**\n   * @type {module:zrender/core/LRU~Entry}\n   */\n\n  this.next;\n  /**\n   * @type {module:zrender/core/LRU~Entry}\n   */\n\n  this.prev;\n};\n/**\n * LRU Cache\n * @constructor\n * @alias module:zrender/core/LRU\n */\n\nvar LRU = function (maxSize) {\n  this._list = new LinkedList();\n  this._map = {};\n  this._maxSize = maxSize || 10;\n  this._lastRemovedEntry = null;\n};\nvar LRUProto = LRU.prototype;\n/**\n * @param  {string} key\n * @param  {} value\n * @return {} Removed value\n */\n\nLRUProto.put = function (key, value) {\n  var list = this._list;\n  var map = this._map;\n  var removed = null;\n  if (map[key] == null) {\n    var len = list.len(); // Reuse last removed entry\n\n    var entry = this._lastRemovedEntry;\n    if (len >= this._maxSize && len > 0) {\n      // Remove the least recently used\n      var leastUsedEntry = list.head;\n      list.remove(leastUsedEntry);\n      delete map[leastUsedEntry.key];\n      removed = leastUsedEntry.value;\n      this._lastRemovedEntry = leastUsedEntry;\n    }\n    if (entry) {\n      entry.value = value;\n    } else {\n      entry = new Entry(value);\n    }\n    entry.key = key;\n    list.insertEntry(entry);\n    map[key] = entry;\n  }\n  return removed;\n};\n/**\n * @param  {string} key\n * @return {}\n */\n\nLRUProto.get = function (key) {\n  var entry = this._map[key];\n  var list = this._list;\n  if (entry != null) {\n    // Put the latest used entry in the tail\n    if (entry !== list.tail) {\n      list.remove(entry);\n      list.insertEntry(entry);\n    }\n    return entry.value;\n  }\n};\n/**\n * Clear the cache\n */\n\nLRUProto.clear = function () {\n  this._list.clear();\n  this._map = {};\n};\nvar _default = LRU;\nmodule.exports = _default;","map":{"version":3,"names":["LinkedList","head","tail","_len","linkedListProto","prototype","insert","val","entry","Entry","insertEntry","next","prev","remove","len","clear","value","LRU","maxSize","_list","_map","_maxSize","_lastRemovedEntry","LRUProto","put","key","list","map","removed","leastUsedEntry","get","_default","module","exports"],"sources":["/Users/mac/Desktop/vue_bsm/vue3_bsm/node_modules/zrender/lib/core/LRU.js"],"sourcesContent":["// Simple LRU cache use doubly linked list\n// @module zrender/core/LRU\n\n/**\n * Simple double linked list. Compared with array, it has O(1) remove operation.\n * @constructor\n */\nvar LinkedList = function () {\n  /**\n   * @type {module:zrender/core/LRU~Entry}\n   */\n  this.head = null;\n  /**\n   * @type {module:zrender/core/LRU~Entry}\n   */\n\n  this.tail = null;\n  this._len = 0;\n};\n\nvar linkedListProto = LinkedList.prototype;\n/**\n * Insert a new value at the tail\n * @param  {} val\n * @return {module:zrender/core/LRU~Entry}\n */\n\nlinkedListProto.insert = function (val) {\n  var entry = new Entry(val);\n  this.insertEntry(entry);\n  return entry;\n};\n/**\n * Insert an entry at the tail\n * @param  {module:zrender/core/LRU~Entry} entry\n */\n\n\nlinkedListProto.insertEntry = function (entry) {\n  if (!this.head) {\n    this.head = this.tail = entry;\n  } else {\n    this.tail.next = entry;\n    entry.prev = this.tail;\n    entry.next = null;\n    this.tail = entry;\n  }\n\n  this._len++;\n};\n/**\n * Remove entry.\n * @param  {module:zrender/core/LRU~Entry} entry\n */\n\n\nlinkedListProto.remove = function (entry) {\n  var prev = entry.prev;\n  var next = entry.next;\n\n  if (prev) {\n    prev.next = next;\n  } else {\n    // Is head\n    this.head = next;\n  }\n\n  if (next) {\n    next.prev = prev;\n  } else {\n    // Is tail\n    this.tail = prev;\n  }\n\n  entry.next = entry.prev = null;\n  this._len--;\n};\n/**\n * @return {number}\n */\n\n\nlinkedListProto.len = function () {\n  return this._len;\n};\n/**\n * Clear list\n */\n\n\nlinkedListProto.clear = function () {\n  this.head = this.tail = null;\n  this._len = 0;\n};\n/**\n * @constructor\n * @param {} val\n */\n\n\nvar Entry = function (val) {\n  /**\n   * @type {}\n   */\n  this.value = val;\n  /**\n   * @type {module:zrender/core/LRU~Entry}\n   */\n\n  this.next;\n  /**\n   * @type {module:zrender/core/LRU~Entry}\n   */\n\n  this.prev;\n};\n/**\n * LRU Cache\n * @constructor\n * @alias module:zrender/core/LRU\n */\n\n\nvar LRU = function (maxSize) {\n  this._list = new LinkedList();\n  this._map = {};\n  this._maxSize = maxSize || 10;\n  this._lastRemovedEntry = null;\n};\n\nvar LRUProto = LRU.prototype;\n/**\n * @param  {string} key\n * @param  {} value\n * @return {} Removed value\n */\n\nLRUProto.put = function (key, value) {\n  var list = this._list;\n  var map = this._map;\n  var removed = null;\n\n  if (map[key] == null) {\n    var len = list.len(); // Reuse last removed entry\n\n    var entry = this._lastRemovedEntry;\n\n    if (len >= this._maxSize && len > 0) {\n      // Remove the least recently used\n      var leastUsedEntry = list.head;\n      list.remove(leastUsedEntry);\n      delete map[leastUsedEntry.key];\n      removed = leastUsedEntry.value;\n      this._lastRemovedEntry = leastUsedEntry;\n    }\n\n    if (entry) {\n      entry.value = value;\n    } else {\n      entry = new Entry(value);\n    }\n\n    entry.key = key;\n    list.insertEntry(entry);\n    map[key] = entry;\n  }\n\n  return removed;\n};\n/**\n * @param  {string} key\n * @return {}\n */\n\n\nLRUProto.get = function (key) {\n  var entry = this._map[key];\n  var list = this._list;\n\n  if (entry != null) {\n    // Put the latest used entry in the tail\n    if (entry !== list.tail) {\n      list.remove(entry);\n      list.insertEntry(entry);\n    }\n\n    return entry.value;\n  }\n};\n/**\n * Clear the cache\n */\n\n\nLRUProto.clear = function () {\n  this._list.clear();\n\n  this._map = {};\n};\n\nvar _default = LRU;\nmodule.exports = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}