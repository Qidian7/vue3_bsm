{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar _util = require(\"zrender/lib/core/util\");\nvar createHashMap = _util.createHashMap;\nvar each = _util.each;\nvar isString = _util.isString;\nvar defaults = _util.defaults;\nvar extend = _util.extend;\nvar isObject = _util.isObject;\nvar clone = _util.clone;\nvar _model = require(\"../../util/model\");\nvar normalizeToArray = _model.normalizeToArray;\nvar _sourceHelper = require(\"./sourceHelper\");\nvar guessOrdinal = _sourceHelper.guessOrdinal;\nvar BE_ORDINAL = _sourceHelper.BE_ORDINAL;\nvar Source = require(\"../Source\");\nvar _dimensionHelper = require(\"./dimensionHelper\");\nvar OTHER_DIMENSIONS = _dimensionHelper.OTHER_DIMENSIONS;\nvar DataDimensionInfo = require(\"../DataDimensionInfo\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * @deprecated\n * Use `echarts/data/helper/createDimensions` instead.\n */\n\n/**\n * @see {module:echarts/test/ut/spec/data/completeDimensions}\n *\n * This method builds the relationship between:\n * + \"what the coord sys or series requires (see `sysDims`)\",\n * + \"what the user defines (in `encode` and `dimensions`, see `opt.dimsDef` and `opt.encodeDef`)\"\n * + \"what the data source provids (see `source`)\".\n *\n * Some guess strategy will be adapted if user does not define something.\n * If no 'value' dimension specified, the first no-named dimension will be\n * named as 'value'.\n *\n * @param {Array.<string>} sysDims Necessary dimensions, like ['x', 'y'], which\n *      provides not only dim template, but also default order.\n *      properties: 'name', 'type', 'displayName'.\n *      `name` of each item provides default coord name.\n *      [{dimsDef: [string|Object, ...]}, ...] dimsDef of sysDim item provides default dim name, and\n *                                    provide dims count that the sysDim required.\n *      [{ordinalMeta}] can be specified.\n * @param {module:echarts/data/Source|Array|Object} source or data (for compatibal with pervious)\n * @param {Object} [opt]\n * @param {Array.<Object|string>} [opt.dimsDef] option.series.dimensions User defined dimensions\n *      For example: ['asdf', {name, type}, ...].\n * @param {Object|HashMap} [opt.encodeDef] option.series.encode {x: 2, y: [3, 1], tooltip: [1, 2], label: 3}\n * @param {Function} [opt.encodeDefaulter] Called if no `opt.encodeDef` exists.\n *      If not specified, auto find the next available data dim.\n *      param source {module:data/Source}\n *      param dimCount {number}\n *      return {Object} encode Never be `null/undefined`.\n * @param {string} [opt.generateCoord] Generate coord dim with the given name.\n *      If not specified, extra dim names will be:\n *      'value', 'value0', 'value1', ...\n * @param {number} [opt.generateCoordCount] By default, the generated dim name is `generateCoord`.\n *      If `generateCoordCount` specified, the generated dim names will be:\n *      `generateCoord` + 0, `generateCoord` + 1, ...\n *      can be Infinity, indicate that use all of the remain columns.\n * @param {number} [opt.dimCount] If not specified, guess by the first data item.\n * @return {Array.<module:data/DataDimensionInfo>}\n */\nfunction completeDimensions(sysDims, source, opt) {\n  if (!Source.isInstance(source)) {\n    source = Source.seriesDataToSource(source);\n  }\n  opt = opt || {};\n  sysDims = (sysDims || []).slice();\n  var dimsDef = (opt.dimsDef || []).slice();\n  var dataDimNameMap = createHashMap();\n  var coordDimNameMap = createHashMap(); // var valueCandidate;\n\n  var result = [];\n  var dimCount = getDimCount(source, sysDims, dimsDef, opt.dimCount); // Apply user defined dims (`name` and `type`) and init result.\n\n  for (var i = 0; i < dimCount; i++) {\n    var dimDefItem = dimsDef[i] = extend({}, isObject(dimsDef[i]) ? dimsDef[i] : {\n      name: dimsDef[i]\n    });\n    var userDimName = dimDefItem.name;\n    var resultItem = result[i] = new DataDimensionInfo(); // Name will be applied later for avoiding duplication.\n\n    if (userDimName != null && dataDimNameMap.get(userDimName) == null) {\n      // Only if `series.dimensions` is defined in option\n      // displayName, will be set, and dimension will be diplayed vertically in\n      // tooltip by default.\n      resultItem.name = resultItem.displayName = userDimName;\n      dataDimNameMap.set(userDimName, i);\n    }\n    dimDefItem.type != null && (resultItem.type = dimDefItem.type);\n    dimDefItem.displayName != null && (resultItem.displayName = dimDefItem.displayName);\n  }\n  var encodeDef = opt.encodeDef;\n  if (!encodeDef && opt.encodeDefaulter) {\n    encodeDef = opt.encodeDefaulter(source, dimCount);\n  }\n  encodeDef = createHashMap(encodeDef); // Set `coordDim` and `coordDimIndex` by `encodeDef` and normalize `encodeDef`.\n\n  encodeDef.each(function (dataDims, coordDim) {\n    dataDims = normalizeToArray(dataDims).slice(); // Note: It is allowed that `dataDims.length` is `0`, e.g., options is\n    // `{encode: {x: -1, y: 1}}`. Should not filter anything in\n    // this case.\n\n    if (dataDims.length === 1 && !isString(dataDims[0]) && dataDims[0] < 0) {\n      encodeDef.set(coordDim, false);\n      return;\n    }\n    var validDataDims = encodeDef.set(coordDim, []);\n    each(dataDims, function (resultDimIdx, idx) {\n      // The input resultDimIdx can be dim name or index.\n      isString(resultDimIdx) && (resultDimIdx = dataDimNameMap.get(resultDimIdx));\n      if (resultDimIdx != null && resultDimIdx < dimCount) {\n        validDataDims[idx] = resultDimIdx;\n        applyDim(result[resultDimIdx], coordDim, idx);\n      }\n    });\n  }); // Apply templetes and default order from `sysDims`.\n\n  var availDimIdx = 0;\n  each(sysDims, function (sysDimItem, sysDimIndex) {\n    var coordDim;\n    var sysDimItem;\n    var sysDimItemDimsDef;\n    var sysDimItemOtherDims;\n    if (isString(sysDimItem)) {\n      coordDim = sysDimItem;\n      sysDimItem = {};\n    } else {\n      coordDim = sysDimItem.name;\n      var ordinalMeta = sysDimItem.ordinalMeta;\n      sysDimItem.ordinalMeta = null;\n      sysDimItem = clone(sysDimItem);\n      sysDimItem.ordinalMeta = ordinalMeta; // `coordDimIndex` should not be set directly.\n\n      sysDimItemDimsDef = sysDimItem.dimsDef;\n      sysDimItemOtherDims = sysDimItem.otherDims;\n      sysDimItem.name = sysDimItem.coordDim = sysDimItem.coordDimIndex = sysDimItem.dimsDef = sysDimItem.otherDims = null;\n    }\n    var dataDims = encodeDef.get(coordDim); // negative resultDimIdx means no need to mapping.\n\n    if (dataDims === false) {\n      return;\n    }\n    var dataDims = normalizeToArray(dataDims); // dimensions provides default dim sequences.\n\n    if (!dataDims.length) {\n      for (var i = 0; i < (sysDimItemDimsDef && sysDimItemDimsDef.length || 1); i++) {\n        while (availDimIdx < result.length && result[availDimIdx].coordDim != null) {\n          availDimIdx++;\n        }\n        availDimIdx < result.length && dataDims.push(availDimIdx++);\n      }\n    } // Apply templates.\n\n    each(dataDims, function (resultDimIdx, coordDimIndex) {\n      var resultItem = result[resultDimIdx];\n      applyDim(defaults(resultItem, sysDimItem), coordDim, coordDimIndex);\n      if (resultItem.name == null && sysDimItemDimsDef) {\n        var sysDimItemDimsDefItem = sysDimItemDimsDef[coordDimIndex];\n        !isObject(sysDimItemDimsDefItem) && (sysDimItemDimsDefItem = {\n          name: sysDimItemDimsDefItem\n        });\n        resultItem.name = resultItem.displayName = sysDimItemDimsDefItem.name;\n        resultItem.defaultTooltip = sysDimItemDimsDefItem.defaultTooltip;\n      } // FIXME refactor, currently only used in case: {otherDims: {tooltip: false}}\n\n      sysDimItemOtherDims && defaults(resultItem.otherDims, sysDimItemOtherDims);\n    });\n  });\n  function applyDim(resultItem, coordDim, coordDimIndex) {\n    if (OTHER_DIMENSIONS.get(coordDim) != null) {\n      resultItem.otherDims[coordDim] = coordDimIndex;\n    } else {\n      resultItem.coordDim = coordDim;\n      resultItem.coordDimIndex = coordDimIndex;\n      coordDimNameMap.set(coordDim, true);\n    }\n  } // Make sure the first extra dim is 'value'.\n\n  var generateCoord = opt.generateCoord;\n  var generateCoordCount = opt.generateCoordCount;\n  var fromZero = generateCoordCount != null;\n  generateCoordCount = generateCoord ? generateCoordCount || 1 : 0;\n  var extra = generateCoord || 'value'; // Set dim `name` and other `coordDim` and other props.\n\n  for (var resultDimIdx = 0; resultDimIdx < dimCount; resultDimIdx++) {\n    var resultItem = result[resultDimIdx] = result[resultDimIdx] || new DataDimensionInfo();\n    var coordDim = resultItem.coordDim;\n    if (coordDim == null) {\n      resultItem.coordDim = genName(extra, coordDimNameMap, fromZero);\n      resultItem.coordDimIndex = 0;\n      if (!generateCoord || generateCoordCount <= 0) {\n        resultItem.isExtraCoord = true;\n      }\n      generateCoordCount--;\n    }\n    resultItem.name == null && (resultItem.name = genName(resultItem.coordDim, dataDimNameMap));\n    if (resultItem.type == null && (guessOrdinal(source, resultDimIdx, resultItem.name) === BE_ORDINAL.Must // Consider the case:\n    // {\n    //    dataset: {source: [\n    //        ['2001', 123],\n    //        ['2002', 456],\n    //        ...\n    //        ['The others', 987],\n    //    ]},\n    //    series: {type: 'pie'}\n    // }\n    // The first colum should better be treated as a \"ordinal\" although it\n    // might not able to be detected as an \"ordinal\" by `guessOrdinal`.\n    || resultItem.isExtraCoord && (resultItem.otherDims.itemName != null || resultItem.otherDims.seriesName != null))) {\n      resultItem.type = 'ordinal';\n    }\n  }\n  return result;\n} // ??? TODO\n// Originally detect dimCount by data[0]. Should we\n// optimize it to only by sysDims and dimensions and encode.\n// So only necessary dims will be initialized.\n// But\n// (1) custom series should be considered. where other dims\n// may be visited.\n// (2) sometimes user need to calcualte bubble size or use visualMap\n// on other dimensions besides coordSys needed.\n// So, dims that is not used by system, should be shared in storage?\n\nfunction getDimCount(source, sysDims, dimsDef, optDimCount) {\n  // Note that the result dimCount should not small than columns count\n  // of data, otherwise `dataDimNameMap` checking will be incorrect.\n  var dimCount = Math.max(source.dimensionsDetectCount || 1, sysDims.length, dimsDef.length, optDimCount || 0);\n  each(sysDims, function (sysDimItem) {\n    var sysDimItemDimsDef = sysDimItem.dimsDef;\n    sysDimItemDimsDef && (dimCount = Math.max(dimCount, sysDimItemDimsDef.length));\n  });\n  return dimCount;\n}\nfunction genName(name, map, fromZero) {\n  if (fromZero || map.get(name) != null) {\n    var i = 0;\n    while (map.get(name + i) != null) {\n      i++;\n    }\n    name += i;\n  }\n  map.set(name, true);\n  return name;\n}\nvar _default = completeDimensions;\nmodule.exports = _default;","map":{"version":3,"names":["_util","require","createHashMap","each","isString","defaults","extend","isObject","clone","_model","normalizeToArray","_sourceHelper","guessOrdinal","BE_ORDINAL","Source","_dimensionHelper","OTHER_DIMENSIONS","DataDimensionInfo","completeDimensions","sysDims","source","opt","isInstance","seriesDataToSource","slice","dimsDef","dataDimNameMap","coordDimNameMap","result","dimCount","getDimCount","i","dimDefItem","name","userDimName","resultItem","get","displayName","set","type","encodeDef","encodeDefaulter","dataDims","coordDim","length","validDataDims","resultDimIdx","idx","applyDim","availDimIdx","sysDimItem","sysDimIndex","sysDimItemDimsDef","sysDimItemOtherDims","ordinalMeta","otherDims","coordDimIndex","push","sysDimItemDimsDefItem","defaultTooltip","generateCoord","generateCoordCount","fromZero","extra","genName","isExtraCoord","Must","itemName","seriesName","optDimCount","Math","max","dimensionsDetectCount","map","_default","module","exports"],"sources":["/Users/mac/Desktop/vue_bsm/vue3_bsm/node_modules/echarts/lib/data/helper/completeDimensions.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar _util = require(\"zrender/lib/core/util\");\n\nvar createHashMap = _util.createHashMap;\nvar each = _util.each;\nvar isString = _util.isString;\nvar defaults = _util.defaults;\nvar extend = _util.extend;\nvar isObject = _util.isObject;\nvar clone = _util.clone;\n\nvar _model = require(\"../../util/model\");\n\nvar normalizeToArray = _model.normalizeToArray;\n\nvar _sourceHelper = require(\"./sourceHelper\");\n\nvar guessOrdinal = _sourceHelper.guessOrdinal;\nvar BE_ORDINAL = _sourceHelper.BE_ORDINAL;\n\nvar Source = require(\"../Source\");\n\nvar _dimensionHelper = require(\"./dimensionHelper\");\n\nvar OTHER_DIMENSIONS = _dimensionHelper.OTHER_DIMENSIONS;\n\nvar DataDimensionInfo = require(\"../DataDimensionInfo\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * @deprecated\n * Use `echarts/data/helper/createDimensions` instead.\n */\n\n/**\n * @see {module:echarts/test/ut/spec/data/completeDimensions}\n *\n * This method builds the relationship between:\n * + \"what the coord sys or series requires (see `sysDims`)\",\n * + \"what the user defines (in `encode` and `dimensions`, see `opt.dimsDef` and `opt.encodeDef`)\"\n * + \"what the data source provids (see `source`)\".\n *\n * Some guess strategy will be adapted if user does not define something.\n * If no 'value' dimension specified, the first no-named dimension will be\n * named as 'value'.\n *\n * @param {Array.<string>} sysDims Necessary dimensions, like ['x', 'y'], which\n *      provides not only dim template, but also default order.\n *      properties: 'name', 'type', 'displayName'.\n *      `name` of each item provides default coord name.\n *      [{dimsDef: [string|Object, ...]}, ...] dimsDef of sysDim item provides default dim name, and\n *                                    provide dims count that the sysDim required.\n *      [{ordinalMeta}] can be specified.\n * @param {module:echarts/data/Source|Array|Object} source or data (for compatibal with pervious)\n * @param {Object} [opt]\n * @param {Array.<Object|string>} [opt.dimsDef] option.series.dimensions User defined dimensions\n *      For example: ['asdf', {name, type}, ...].\n * @param {Object|HashMap} [opt.encodeDef] option.series.encode {x: 2, y: [3, 1], tooltip: [1, 2], label: 3}\n * @param {Function} [opt.encodeDefaulter] Called if no `opt.encodeDef` exists.\n *      If not specified, auto find the next available data dim.\n *      param source {module:data/Source}\n *      param dimCount {number}\n *      return {Object} encode Never be `null/undefined`.\n * @param {string} [opt.generateCoord] Generate coord dim with the given name.\n *      If not specified, extra dim names will be:\n *      'value', 'value0', 'value1', ...\n * @param {number} [opt.generateCoordCount] By default, the generated dim name is `generateCoord`.\n *      If `generateCoordCount` specified, the generated dim names will be:\n *      `generateCoord` + 0, `generateCoord` + 1, ...\n *      can be Infinity, indicate that use all of the remain columns.\n * @param {number} [opt.dimCount] If not specified, guess by the first data item.\n * @return {Array.<module:data/DataDimensionInfo>}\n */\nfunction completeDimensions(sysDims, source, opt) {\n  if (!Source.isInstance(source)) {\n    source = Source.seriesDataToSource(source);\n  }\n\n  opt = opt || {};\n  sysDims = (sysDims || []).slice();\n  var dimsDef = (opt.dimsDef || []).slice();\n  var dataDimNameMap = createHashMap();\n  var coordDimNameMap = createHashMap(); // var valueCandidate;\n\n  var result = [];\n  var dimCount = getDimCount(source, sysDims, dimsDef, opt.dimCount); // Apply user defined dims (`name` and `type`) and init result.\n\n  for (var i = 0; i < dimCount; i++) {\n    var dimDefItem = dimsDef[i] = extend({}, isObject(dimsDef[i]) ? dimsDef[i] : {\n      name: dimsDef[i]\n    });\n    var userDimName = dimDefItem.name;\n    var resultItem = result[i] = new DataDimensionInfo(); // Name will be applied later for avoiding duplication.\n\n    if (userDimName != null && dataDimNameMap.get(userDimName) == null) {\n      // Only if `series.dimensions` is defined in option\n      // displayName, will be set, and dimension will be diplayed vertically in\n      // tooltip by default.\n      resultItem.name = resultItem.displayName = userDimName;\n      dataDimNameMap.set(userDimName, i);\n    }\n\n    dimDefItem.type != null && (resultItem.type = dimDefItem.type);\n    dimDefItem.displayName != null && (resultItem.displayName = dimDefItem.displayName);\n  }\n\n  var encodeDef = opt.encodeDef;\n\n  if (!encodeDef && opt.encodeDefaulter) {\n    encodeDef = opt.encodeDefaulter(source, dimCount);\n  }\n\n  encodeDef = createHashMap(encodeDef); // Set `coordDim` and `coordDimIndex` by `encodeDef` and normalize `encodeDef`.\n\n  encodeDef.each(function (dataDims, coordDim) {\n    dataDims = normalizeToArray(dataDims).slice(); // Note: It is allowed that `dataDims.length` is `0`, e.g., options is\n    // `{encode: {x: -1, y: 1}}`. Should not filter anything in\n    // this case.\n\n    if (dataDims.length === 1 && !isString(dataDims[0]) && dataDims[0] < 0) {\n      encodeDef.set(coordDim, false);\n      return;\n    }\n\n    var validDataDims = encodeDef.set(coordDim, []);\n    each(dataDims, function (resultDimIdx, idx) {\n      // The input resultDimIdx can be dim name or index.\n      isString(resultDimIdx) && (resultDimIdx = dataDimNameMap.get(resultDimIdx));\n\n      if (resultDimIdx != null && resultDimIdx < dimCount) {\n        validDataDims[idx] = resultDimIdx;\n        applyDim(result[resultDimIdx], coordDim, idx);\n      }\n    });\n  }); // Apply templetes and default order from `sysDims`.\n\n  var availDimIdx = 0;\n  each(sysDims, function (sysDimItem, sysDimIndex) {\n    var coordDim;\n    var sysDimItem;\n    var sysDimItemDimsDef;\n    var sysDimItemOtherDims;\n\n    if (isString(sysDimItem)) {\n      coordDim = sysDimItem;\n      sysDimItem = {};\n    } else {\n      coordDim = sysDimItem.name;\n      var ordinalMeta = sysDimItem.ordinalMeta;\n      sysDimItem.ordinalMeta = null;\n      sysDimItem = clone(sysDimItem);\n      sysDimItem.ordinalMeta = ordinalMeta; // `coordDimIndex` should not be set directly.\n\n      sysDimItemDimsDef = sysDimItem.dimsDef;\n      sysDimItemOtherDims = sysDimItem.otherDims;\n      sysDimItem.name = sysDimItem.coordDim = sysDimItem.coordDimIndex = sysDimItem.dimsDef = sysDimItem.otherDims = null;\n    }\n\n    var dataDims = encodeDef.get(coordDim); // negative resultDimIdx means no need to mapping.\n\n    if (dataDims === false) {\n      return;\n    }\n\n    var dataDims = normalizeToArray(dataDims); // dimensions provides default dim sequences.\n\n    if (!dataDims.length) {\n      for (var i = 0; i < (sysDimItemDimsDef && sysDimItemDimsDef.length || 1); i++) {\n        while (availDimIdx < result.length && result[availDimIdx].coordDim != null) {\n          availDimIdx++;\n        }\n\n        availDimIdx < result.length && dataDims.push(availDimIdx++);\n      }\n    } // Apply templates.\n\n\n    each(dataDims, function (resultDimIdx, coordDimIndex) {\n      var resultItem = result[resultDimIdx];\n      applyDim(defaults(resultItem, sysDimItem), coordDim, coordDimIndex);\n\n      if (resultItem.name == null && sysDimItemDimsDef) {\n        var sysDimItemDimsDefItem = sysDimItemDimsDef[coordDimIndex];\n        !isObject(sysDimItemDimsDefItem) && (sysDimItemDimsDefItem = {\n          name: sysDimItemDimsDefItem\n        });\n        resultItem.name = resultItem.displayName = sysDimItemDimsDefItem.name;\n        resultItem.defaultTooltip = sysDimItemDimsDefItem.defaultTooltip;\n      } // FIXME refactor, currently only used in case: {otherDims: {tooltip: false}}\n\n\n      sysDimItemOtherDims && defaults(resultItem.otherDims, sysDimItemOtherDims);\n    });\n  });\n\n  function applyDim(resultItem, coordDim, coordDimIndex) {\n    if (OTHER_DIMENSIONS.get(coordDim) != null) {\n      resultItem.otherDims[coordDim] = coordDimIndex;\n    } else {\n      resultItem.coordDim = coordDim;\n      resultItem.coordDimIndex = coordDimIndex;\n      coordDimNameMap.set(coordDim, true);\n    }\n  } // Make sure the first extra dim is 'value'.\n\n\n  var generateCoord = opt.generateCoord;\n  var generateCoordCount = opt.generateCoordCount;\n  var fromZero = generateCoordCount != null;\n  generateCoordCount = generateCoord ? generateCoordCount || 1 : 0;\n  var extra = generateCoord || 'value'; // Set dim `name` and other `coordDim` and other props.\n\n  for (var resultDimIdx = 0; resultDimIdx < dimCount; resultDimIdx++) {\n    var resultItem = result[resultDimIdx] = result[resultDimIdx] || new DataDimensionInfo();\n    var coordDim = resultItem.coordDim;\n\n    if (coordDim == null) {\n      resultItem.coordDim = genName(extra, coordDimNameMap, fromZero);\n      resultItem.coordDimIndex = 0;\n\n      if (!generateCoord || generateCoordCount <= 0) {\n        resultItem.isExtraCoord = true;\n      }\n\n      generateCoordCount--;\n    }\n\n    resultItem.name == null && (resultItem.name = genName(resultItem.coordDim, dataDimNameMap));\n\n    if (resultItem.type == null && (guessOrdinal(source, resultDimIdx, resultItem.name) === BE_ORDINAL.Must // Consider the case:\n    // {\n    //    dataset: {source: [\n    //        ['2001', 123],\n    //        ['2002', 456],\n    //        ...\n    //        ['The others', 987],\n    //    ]},\n    //    series: {type: 'pie'}\n    // }\n    // The first colum should better be treated as a \"ordinal\" although it\n    // might not able to be detected as an \"ordinal\" by `guessOrdinal`.\n    || resultItem.isExtraCoord && (resultItem.otherDims.itemName != null || resultItem.otherDims.seriesName != null))) {\n      resultItem.type = 'ordinal';\n    }\n  }\n\n  return result;\n} // ??? TODO\n// Originally detect dimCount by data[0]. Should we\n// optimize it to only by sysDims and dimensions and encode.\n// So only necessary dims will be initialized.\n// But\n// (1) custom series should be considered. where other dims\n// may be visited.\n// (2) sometimes user need to calcualte bubble size or use visualMap\n// on other dimensions besides coordSys needed.\n// So, dims that is not used by system, should be shared in storage?\n\n\nfunction getDimCount(source, sysDims, dimsDef, optDimCount) {\n  // Note that the result dimCount should not small than columns count\n  // of data, otherwise `dataDimNameMap` checking will be incorrect.\n  var dimCount = Math.max(source.dimensionsDetectCount || 1, sysDims.length, dimsDef.length, optDimCount || 0);\n  each(sysDims, function (sysDimItem) {\n    var sysDimItemDimsDef = sysDimItem.dimsDef;\n    sysDimItemDimsDef && (dimCount = Math.max(dimCount, sysDimItemDimsDef.length));\n  });\n  return dimCount;\n}\n\nfunction genName(name, map, fromZero) {\n  if (fromZero || map.get(name) != null) {\n    var i = 0;\n\n    while (map.get(name + i) != null) {\n      i++;\n    }\n\n    name += i;\n  }\n\n  map.set(name, true);\n  return name;\n}\n\nvar _default = completeDimensions;\nmodule.exports = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}