{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar zrUtil = require(\"zrender/lib/core/util\");\nvar ComponentModel = require(\"../../model/Component\");\nvar axisModelCreator = require(\"../axisModelCreator\");\nvar axisModelCommonMixin = require(\"../axisModelCommonMixin\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar PolarAxisModel = ComponentModel.extend({\n  type: 'polarAxis',\n  /**\n   * @type {module:echarts/coord/polar/AngleAxis|module:echarts/coord/polar/RadiusAxis}\n   */\n  axis: null,\n  /**\n   * @override\n   */\n  getCoordSysModel: function () {\n    return this.ecModel.queryComponents({\n      mainType: 'polar',\n      index: this.option.polarIndex,\n      id: this.option.polarId\n    })[0];\n  }\n});\nzrUtil.merge(PolarAxisModel.prototype, axisModelCommonMixin);\nvar polarAxisDefaultExtendedOption = {\n  angle: {\n    // polarIndex: 0,\n    // polarId: '',\n    startAngle: 90,\n    clockwise: true,\n    splitNumber: 12,\n    axisLabel: {\n      rotate: false\n    }\n  },\n  radius: {\n    // polarIndex: 0,\n    // polarId: '',\n    splitNumber: 5\n  }\n};\nfunction getAxisType(axisDim, option) {\n  // Default axis with data is category axis\n  return option.type || (option.data ? 'category' : 'value');\n}\naxisModelCreator('angle', PolarAxisModel, getAxisType, polarAxisDefaultExtendedOption.angle);\naxisModelCreator('radius', PolarAxisModel, getAxisType, polarAxisDefaultExtendedOption.radius);","map":{"version":3,"names":["zrUtil","require","ComponentModel","axisModelCreator","axisModelCommonMixin","PolarAxisModel","extend","type","axis","getCoordSysModel","ecModel","queryComponents","mainType","index","option","polarIndex","id","polarId","merge","prototype","polarAxisDefaultExtendedOption","angle","startAngle","clockwise","splitNumber","axisLabel","rotate","radius","getAxisType","axisDim","data"],"sources":["/Users/mac/Desktop/vue_bsm/vue3_bsm/node_modules/echarts/lib/coord/polar/AxisModel.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar ComponentModel = require(\"../../model/Component\");\n\nvar axisModelCreator = require(\"../axisModelCreator\");\n\nvar axisModelCommonMixin = require(\"../axisModelCommonMixin\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar PolarAxisModel = ComponentModel.extend({\n  type: 'polarAxis',\n\n  /**\n   * @type {module:echarts/coord/polar/AngleAxis|module:echarts/coord/polar/RadiusAxis}\n   */\n  axis: null,\n\n  /**\n   * @override\n   */\n  getCoordSysModel: function () {\n    return this.ecModel.queryComponents({\n      mainType: 'polar',\n      index: this.option.polarIndex,\n      id: this.option.polarId\n    })[0];\n  }\n});\nzrUtil.merge(PolarAxisModel.prototype, axisModelCommonMixin);\nvar polarAxisDefaultExtendedOption = {\n  angle: {\n    // polarIndex: 0,\n    // polarId: '',\n    startAngle: 90,\n    clockwise: true,\n    splitNumber: 12,\n    axisLabel: {\n      rotate: false\n    }\n  },\n  radius: {\n    // polarIndex: 0,\n    // polarId: '',\n    splitNumber: 5\n  }\n};\n\nfunction getAxisType(axisDim, option) {\n  // Default axis with data is category axis\n  return option.type || (option.data ? 'category' : 'value');\n}\n\naxisModelCreator('angle', PolarAxisModel, getAxisType, polarAxisDefaultExtendedOption.angle);\naxisModelCreator('radius', PolarAxisModel, getAxisType, polarAxisDefaultExtendedOption.radius);"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AAE7C,IAAIC,cAAc,GAAGD,OAAO,CAAC,uBAAuB,CAAC;AAErD,IAAIE,gBAAgB,GAAGF,OAAO,CAAC,qBAAqB,CAAC;AAErD,IAAIG,oBAAoB,GAAGH,OAAO,CAAC,yBAAyB,CAAC;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAII,cAAc,GAAGH,cAAc,CAACI,MAAM,CAAC;EACzCC,IAAI,EAAE,WAAW;EAEjB;AACF;AACA;EACEC,IAAI,EAAE,IAAI;EAEV;AACF;AACA;EACEC,gBAAgB,EAAE,SAAAA,CAAA,EAAY;IAC5B,OAAO,IAAI,CAACC,OAAO,CAACC,eAAe,CAAC;MAClCC,QAAQ,EAAE,OAAO;MACjBC,KAAK,EAAE,IAAI,CAACC,MAAM,CAACC,UAAU;MAC7BC,EAAE,EAAE,IAAI,CAACF,MAAM,CAACG;IAClB,CAAC,CAAC,CAAC,CAAC,CAAC;EACP;AACF,CAAC,CAAC;AACFjB,MAAM,CAACkB,KAAK,CAACb,cAAc,CAACc,SAAS,EAAEf,oBAAoB,CAAC;AAC5D,IAAIgB,8BAA8B,GAAG;EACnCC,KAAK,EAAE;IACL;IACA;IACAC,UAAU,EAAE,EAAE;IACdC,SAAS,EAAE,IAAI;IACfC,WAAW,EAAE,EAAE;IACfC,SAAS,EAAE;MACTC,MAAM,EAAE;IACV;EACF,CAAC;EACDC,MAAM,EAAE;IACN;IACA;IACAH,WAAW,EAAE;EACf;AACF,CAAC;AAED,SAASI,WAAWA,CAACC,OAAO,EAAEf,MAAM,EAAE;EACpC;EACA,OAAOA,MAAM,CAACP,IAAI,KAAKO,MAAM,CAACgB,IAAI,GAAG,UAAU,GAAG,OAAO,CAAC;AAC5D;AAEA3B,gBAAgB,CAAC,OAAO,EAAEE,cAAc,EAAEuB,WAAW,EAAER,8BAA8B,CAACC,KAAK,CAAC;AAC5FlB,gBAAgB,CAAC,QAAQ,EAAEE,cAAc,EAAEuB,WAAW,EAAER,8BAA8B,CAACO,MAAM,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}