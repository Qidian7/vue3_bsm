{"ast":null,"code":"var _event = require(\"../core/event\");\nvar addEventListener = _event.addEventListener;\nvar removeEventListener = _event.removeEventListener;\nvar normalizeEvent = _event.normalizeEvent;\nvar getNativeEvent = _event.getNativeEvent;\nvar zrUtil = require(\"../core/util\");\nvar Eventful = require(\"../mixin/Eventful\");\nvar env = require(\"../core/env\");\n\n/* global document */\nvar TOUCH_CLICK_DELAY = 300;\nvar globalEventSupported = env.domSupported;\nvar localNativeListenerNames = function () {\n  var mouseHandlerNames = ['click', 'dblclick', 'mousewheel', 'mouseout', 'mouseup', 'mousedown', 'mousemove', 'contextmenu'];\n  var touchHandlerNames = ['touchstart', 'touchend', 'touchmove'];\n  var pointerEventNameMap = {\n    pointerdown: 1,\n    pointerup: 1,\n    pointermove: 1,\n    pointerout: 1\n  };\n  var pointerHandlerNames = zrUtil.map(mouseHandlerNames, function (name) {\n    var nm = name.replace('mouse', 'pointer');\n    return pointerEventNameMap.hasOwnProperty(nm) ? nm : name;\n  });\n  return {\n    mouse: mouseHandlerNames,\n    touch: touchHandlerNames,\n    pointer: pointerHandlerNames\n  };\n}();\nvar globalNativeListenerNames = {\n  mouse: ['mousemove', 'mouseup'],\n  pointer: ['pointermove', 'pointerup']\n};\nfunction eventNameFix(name) {\n  return name === 'mousewheel' && env.browser.firefox ? 'DOMMouseScroll' : name;\n}\nfunction isPointerFromTouch(event) {\n  var pointerType = event.pointerType;\n  return pointerType === 'pen' || pointerType === 'touch';\n} // function useMSGuesture(handlerProxy, event) {\n//     return isPointerFromTouch(event) && !!handlerProxy._msGesture;\n// }\n// function onMSGestureChange(proxy, event) {\n//     if (event.translationX || event.translationY) {\n//         // mousemove is carried by MSGesture to reduce the sensitivity.\n//         proxy.handler.dispatchToElement(event.target, 'mousemove', event);\n//     }\n//     if (event.scale !== 1) {\n//         event.pinchX = event.offsetX;\n//         event.pinchY = event.offsetY;\n//         event.pinchScale = event.scale;\n//         proxy.handler.dispatchToElement(event.target, 'pinch', event);\n//     }\n// }\n\n/**\n * Prevent mouse event from being dispatched after Touch Events action\n * @see <https://github.com/deltakosh/handjs/blob/master/src/hand.base.js>\n * 1. Mobile browsers dispatch mouse events 300ms after touchend.\n * 2. Chrome for Android dispatch mousedown for long-touch about 650ms\n * Result: Blocking Mouse Events for 700ms.\n *\n * @param {DOMHandlerScope} scope\n */\n\nfunction setTouchTimer(scope) {\n  scope.touching = true;\n  if (scope.touchTimer != null) {\n    clearTimeout(scope.touchTimer);\n    scope.touchTimer = null;\n  }\n  scope.touchTimer = setTimeout(function () {\n    scope.touching = false;\n    scope.touchTimer = null;\n  }, 700);\n} // Mark touch, which is useful in distinguish touch and\n// mouse event in upper applicatoin.\n\nfunction markTouch(event) {\n  event && (event.zrByTouch = true);\n} // function markTriggeredFromLocal(event) {\n//     event && (event.__zrIsFromLocal = true);\n// }\n// function isTriggeredFromLocal(instance, event) {\n//     return !!(event && event.__zrIsFromLocal);\n// }\n\nfunction normalizeGlobalEvent(instance, event) {\n  // offsetX, offsetY still need to be calculated. They are necessary in the event\n  // handlers of the upper applications. Set `true` to force calculate them.\n  return normalizeEvent(instance.dom, new FakeGlobalEvent(instance, event), true);\n}\n/**\n * Detect whether the given el is in `painterRoot`.\n */\n\nfunction isLocalEl(instance, el) {\n  var elTmp = el;\n  var isLocal = false;\n  while (elTmp && elTmp.nodeType !== 9 && !(isLocal = elTmp.domBelongToZr || elTmp !== el && elTmp === instance.painterRoot)) {\n    elTmp = elTmp.parentNode;\n  }\n  return isLocal;\n}\n/**\n * Make a fake event but not change the original event,\n * becuase the global event probably be used by other\n * listeners not belonging to zrender.\n * @class\n */\n\nfunction FakeGlobalEvent(instance, event) {\n  this.type = event.type;\n  this.target = this.currentTarget = instance.dom;\n  this.pointerType = event.pointerType; // Necessray for the force calculation of zrX, zrY\n\n  this.clientX = event.clientX;\n  this.clientY = event.clientY; // Because we do not mount global listeners to touch events,\n  // we do not copy `targetTouches` and `changedTouches` here.\n}\n\nvar fakeGlobalEventProto = FakeGlobalEvent.prototype; // we make the default methods on the event do nothing,\n// otherwise it is dangerous. See more details in\n// [Drag outside] in `Handler.js`.\n\nfakeGlobalEventProto.stopPropagation = fakeGlobalEventProto.stopImmediatePropagation = fakeGlobalEventProto.preventDefault = zrUtil.noop;\n/**\n * Local DOM Handlers\n * @this {HandlerProxy}\n */\n\nvar localDOMHandlers = {\n  mousedown: function (event) {\n    event = normalizeEvent(this.dom, event);\n    this._mayPointerCapture = [event.zrX, event.zrY];\n    this.trigger('mousedown', event);\n  },\n  mousemove: function (event) {\n    event = normalizeEvent(this.dom, event);\n    var downPoint = this._mayPointerCapture;\n    if (downPoint && (event.zrX !== downPoint[0] || event.zrY !== downPoint[1])) {\n      togglePointerCapture(this, true);\n    }\n    this.trigger('mousemove', event);\n  },\n  mouseup: function (event) {\n    event = normalizeEvent(this.dom, event);\n    togglePointerCapture(this, false);\n    this.trigger('mouseup', event);\n  },\n  mouseout: function (event) {\n    event = normalizeEvent(this.dom, event); // Similarly to the browser did on `document` and touch event,\n    // `globalout` will be delayed to final pointer cature release.\n\n    if (this._pointerCapturing) {\n      event.zrEventControl = 'no_globalout';\n    } // There might be some doms created by upper layer application\n    // at the same level of painter.getViewportRoot() (e.g., tooltip\n    // dom created by echarts), where 'globalout' event should not\n    // be triggered when mouse enters these doms. (But 'mouseout'\n    // should be triggered at the original hovered element as usual).\n\n    var element = event.toElement || event.relatedTarget;\n    event.zrIsToLocalDOM = isLocalEl(this, element);\n    this.trigger('mouseout', event);\n  },\n  touchstart: function (event) {\n    // Default mouse behaviour should not be disabled here.\n    // For example, page may needs to be slided.\n    event = normalizeEvent(this.dom, event);\n    markTouch(event);\n    this._lastTouchMoment = new Date();\n    this.handler.processGesture(event, 'start'); // For consistent event listener for both touch device and mouse device,\n    // we simulate \"mouseover-->mousedown\" in touch device. So we trigger\n    // `mousemove` here (to trigger `mouseover` inside), and then trigger\n    // `mousedown`.\n\n    localDOMHandlers.mousemove.call(this, event);\n    localDOMHandlers.mousedown.call(this, event);\n  },\n  touchmove: function (event) {\n    event = normalizeEvent(this.dom, event);\n    markTouch(event);\n    this.handler.processGesture(event, 'change'); // Mouse move should always be triggered no matter whether\n    // there is gestrue event, because mouse move and pinch may\n    // be used at the same time.\n\n    localDOMHandlers.mousemove.call(this, event);\n  },\n  touchend: function (event) {\n    event = normalizeEvent(this.dom, event);\n    markTouch(event);\n    this.handler.processGesture(event, 'end');\n    localDOMHandlers.mouseup.call(this, event); // Do not trigger `mouseout` here, in spite of `mousemove`(`mouseover`) is\n    // triggered in `touchstart`. This seems to be illogical, but by this mechanism,\n    // we can conveniently implement \"hover style\" in both PC and touch device just\n    // by listening to `mouseover` to add \"hover style\" and listening to `mouseout`\n    // to remove \"hover style\" on an element, without any additional code for\n    // compatibility. (`mouseout` will not be triggered in `touchend`, so \"hover\n    // style\" will remain for user view)\n    // click event should always be triggered no matter whether\n    // there is gestrue event. System click can not be prevented.\n\n    if (+new Date() - this._lastTouchMoment < TOUCH_CLICK_DELAY) {\n      localDOMHandlers.click.call(this, event);\n    }\n  },\n  pointerdown: function (event) {\n    localDOMHandlers.mousedown.call(this, event); // if (useMSGuesture(this, event)) {\n    //     this._msGesture.addPointer(event.pointerId);\n    // }\n  },\n\n  pointermove: function (event) {\n    // FIXME\n    // pointermove is so sensitive that it always triggered when\n    // tap(click) on touch screen, which affect some judgement in\n    // upper application. So, we dont support mousemove on MS touch\n    // device yet.\n    if (!isPointerFromTouch(event)) {\n      localDOMHandlers.mousemove.call(this, event);\n    }\n  },\n  pointerup: function (event) {\n    localDOMHandlers.mouseup.call(this, event);\n  },\n  pointerout: function (event) {\n    // pointerout will be triggered when tap on touch screen\n    // (IE11+/Edge on MS Surface) after click event triggered,\n    // which is inconsistent with the mousout behavior we defined\n    // in touchend. So we unify them.\n    // (check localDOMHandlers.touchend for detailed explanation)\n    if (!isPointerFromTouch(event)) {\n      localDOMHandlers.mouseout.call(this, event);\n    }\n  }\n};\n/**\n * Othere DOM UI Event handlers for zr dom.\n * @this {HandlerProxy}\n */\n\nzrUtil.each(['click', 'mousewheel', 'dblclick', 'contextmenu'], function (name) {\n  localDOMHandlers[name] = function (event) {\n    event = normalizeEvent(this.dom, event);\n    this.trigger(name, event);\n  };\n});\n/**\n * DOM UI Event handlers for global page.\n *\n * [Caution]:\n * those handlers should both support in capture phase and bubble phase!\n *\n * @this {HandlerProxy}\n */\n\nvar globalDOMHandlers = {\n  pointermove: function (event) {\n    // FIXME\n    // pointermove is so sensitive that it always triggered when\n    // tap(click) on touch screen, which affect some judgement in\n    // upper application. So, we dont support mousemove on MS touch\n    // device yet.\n    if (!isPointerFromTouch(event)) {\n      globalDOMHandlers.mousemove.call(this, event);\n    }\n  },\n  pointerup: function (event) {\n    globalDOMHandlers.mouseup.call(this, event);\n  },\n  mousemove: function (event) {\n    this.trigger('mousemove', event);\n  },\n  mouseup: function (event) {\n    var pointerCaptureReleasing = this._pointerCapturing;\n    togglePointerCapture(this, false);\n    this.trigger('mouseup', event);\n    if (pointerCaptureReleasing) {\n      event.zrEventControl = 'only_globalout';\n      this.trigger('mouseout', event);\n    }\n  }\n};\n/**\n * @param {HandlerProxy} instance\n * @param {DOMHandlerScope} scope\n */\n\nfunction mountLocalDOMEventListeners(instance, scope) {\n  var domHandlers = scope.domHandlers;\n  if (env.pointerEventsSupported) {\n    // Only IE11+/Edge\n    // 1. On devices that both enable touch and mouse (e.g., MS Surface and lenovo X240),\n    // IE11+/Edge do not trigger touch event, but trigger pointer event and mouse event\n    // at the same time.\n    // 2. On MS Surface, it probablely only trigger mousedown but no mouseup when tap on\n    // screen, which do not occurs in pointer event.\n    // So we use pointer event to both detect touch gesture and mouse behavior.\n    zrUtil.each(localNativeListenerNames.pointer, function (nativeEventName) {\n      mountSingleDOMEventListener(scope, nativeEventName, function (event) {\n        // markTriggeredFromLocal(event);\n        domHandlers[nativeEventName].call(instance, event);\n      });\n    }); // FIXME\n    // Note: MS Gesture require CSS touch-action set. But touch-action is not reliable,\n    // which does not prevent defuault behavior occasionally (which may cause view port\n    // zoomed in but use can not zoom it back). And event.preventDefault() does not work.\n    // So we have to not to use MSGesture and not to support touchmove and pinch on MS\n    // touch screen. And we only support click behavior on MS touch screen now.\n    // MS Gesture Event is only supported on IE11+/Edge and on Windows 8+.\n    // We dont support touch on IE on win7.\n    // See <https://msdn.microsoft.com/en-us/library/dn433243(v=vs.85).aspx>\n    // if (typeof MSGesture === 'function') {\n    //     (this._msGesture = new MSGesture()).target = dom; // jshint ignore:line\n    //     dom.addEventListener('MSGestureChange', onMSGestureChange);\n    // }\n  } else {\n    if (env.touchEventsSupported) {\n      zrUtil.each(localNativeListenerNames.touch, function (nativeEventName) {\n        mountSingleDOMEventListener(scope, nativeEventName, function (event) {\n          // markTriggeredFromLocal(event);\n          domHandlers[nativeEventName].call(instance, event);\n          setTouchTimer(scope);\n        });\n      }); // Handler of 'mouseout' event is needed in touch mode, which will be mounted below.\n      // addEventListener(root, 'mouseout', this._mouseoutHandler);\n    } // 1. Considering some devices that both enable touch and mouse event (like on MS Surface\n    // and lenovo X240, @see #2350), we make mouse event be always listened, otherwise\n    // mouse event can not be handle in those devices.\n    // 2. On MS Surface, Chrome will trigger both touch event and mouse event. How to prevent\n    // mouseevent after touch event triggered, see `setTouchTimer`.\n\n    zrUtil.each(localNativeListenerNames.mouse, function (nativeEventName) {\n      mountSingleDOMEventListener(scope, nativeEventName, function (event) {\n        event = getNativeEvent(event);\n        if (!scope.touching) {\n          // markTriggeredFromLocal(event);\n          domHandlers[nativeEventName].call(instance, event);\n        }\n      });\n    });\n  }\n}\n/**\n * @param {HandlerProxy} instance\n * @param {DOMHandlerScope} scope\n */\n\nfunction mountGlobalDOMEventListeners(instance, scope) {\n  // Only IE11+/Edge. See the comment in `mountLocalDOMEventListeners`.\n  if (env.pointerEventsSupported) {\n    zrUtil.each(globalNativeListenerNames.pointer, mount);\n  } // Touch event has implemented \"drag outside\" so we do not mount global listener for touch event.\n  // (see https://www.w3.org/TR/touch-events/#the-touchmove-event)\n  // We do not consider \"both-support-touch-and-mouse device\" for this feature (see the comment of\n  // `mountLocalDOMEventListeners`) to avoid bugs util some requirements come.\n  else if (!env.touchEventsSupported) {\n    zrUtil.each(globalNativeListenerNames.mouse, mount);\n  }\n  function mount(nativeEventName) {\n    function nativeEventListener(event) {\n      event = getNativeEvent(event); // See the reason in [Drag outside] in `Handler.js`\n      // This checking supports both `useCapture` or not.\n      // PENDING: if there is performance issue in some devices,\n      // we probably can not use `useCapture` and change a easier\n      // to judes whether local (mark).\n\n      if (!isLocalEl(instance, event.target)) {\n        event = normalizeGlobalEvent(instance, event);\n        scope.domHandlers[nativeEventName].call(instance, event);\n      }\n    }\n    mountSingleDOMEventListener(scope, nativeEventName, nativeEventListener, {\n      capture: true\n    } // See [Drag Outside] in `Handler.js`\n    );\n  }\n}\n\nfunction mountSingleDOMEventListener(scope, nativeEventName, listener, opt) {\n  scope.mounted[nativeEventName] = listener;\n  scope.listenerOpts[nativeEventName] = opt;\n  addEventListener(scope.domTarget, eventNameFix(nativeEventName), listener, opt);\n}\nfunction unmountDOMEventListeners(scope) {\n  var mounted = scope.mounted;\n  for (var nativeEventName in mounted) {\n    if (mounted.hasOwnProperty(nativeEventName)) {\n      removeEventListener(scope.domTarget, eventNameFix(nativeEventName), mounted[nativeEventName], scope.listenerOpts[nativeEventName]);\n    }\n  }\n  scope.mounted = {};\n}\n/**\n * See [Drag Outside] in `Handler.js`.\n * @implement\n * @param {boolean} isPointerCapturing Should never be `null`/`undefined`.\n *        `true`: start to capture pointer if it is not capturing.\n *        `false`: end the capture if it is capturing.\n */\n\nfunction togglePointerCapture(instance, isPointerCapturing) {\n  instance._mayPointerCapture = null;\n  if (globalEventSupported && instance._pointerCapturing ^ isPointerCapturing) {\n    instance._pointerCapturing = isPointerCapturing;\n    var globalHandlerScope = instance._globalHandlerScope;\n    isPointerCapturing ? mountGlobalDOMEventListeners(instance, globalHandlerScope) : unmountDOMEventListeners(globalHandlerScope);\n  }\n}\n/**\n * @inner\n * @class\n */\n\nfunction DOMHandlerScope(domTarget, domHandlers) {\n  this.domTarget = domTarget;\n  this.domHandlers = domHandlers; // Key: eventName, value: mounted handler funcitons.\n  // Used for unmount.\n\n  this.mounted = {};\n  this.listenerOpts = {};\n  this.touchTimer = null;\n  this.touching = false;\n}\n/**\n * @public\n * @class\n */\n\nfunction HandlerDomProxy(dom, painterRoot) {\n  Eventful.call(this);\n  this.dom = dom;\n  this.painterRoot = painterRoot;\n  this._localHandlerScope = new DOMHandlerScope(dom, localDOMHandlers);\n  if (globalEventSupported) {\n    this._globalHandlerScope = new DOMHandlerScope(document, globalDOMHandlers);\n  }\n  /**\n   * @type {boolean}\n   */\n\n  this._pointerCapturing = false;\n  /**\n   * @type {Array.<number>} [x, y] or null.\n   */\n\n  this._mayPointerCapture = null;\n  mountLocalDOMEventListeners(this, this._localHandlerScope);\n}\nvar handlerDomProxyProto = HandlerDomProxy.prototype;\nhandlerDomProxyProto.dispose = function () {\n  unmountDOMEventListeners(this._localHandlerScope);\n  if (globalEventSupported) {\n    unmountDOMEventListeners(this._globalHandlerScope);\n  }\n};\nhandlerDomProxyProto.setCursor = function (cursorStyle) {\n  this.dom.style && (this.dom.style.cursor = cursorStyle || 'default');\n};\nzrUtil.mixin(HandlerDomProxy, Eventful);\nvar _default = HandlerDomProxy;\nmodule.exports = _default;","map":{"version":3,"names":["_event","require","addEventListener","removeEventListener","normalizeEvent","getNativeEvent","zrUtil","Eventful","env","TOUCH_CLICK_DELAY","globalEventSupported","domSupported","localNativeListenerNames","mouseHandlerNames","touchHandlerNames","pointerEventNameMap","pointerdown","pointerup","pointermove","pointerout","pointerHandlerNames","map","name","nm","replace","hasOwnProperty","mouse","touch","pointer","globalNativeListenerNames","eventNameFix","browser","firefox","isPointerFromTouch","event","pointerType","setTouchTimer","scope","touching","touchTimer","clearTimeout","setTimeout","markTouch","zrByTouch","normalizeGlobalEvent","instance","dom","FakeGlobalEvent","isLocalEl","el","elTmp","isLocal","nodeType","domBelongToZr","painterRoot","parentNode","type","target","currentTarget","clientX","clientY","fakeGlobalEventProto","prototype","stopPropagation","stopImmediatePropagation","preventDefault","noop","localDOMHandlers","mousedown","_mayPointerCapture","zrX","zrY","trigger","mousemove","downPoint","togglePointerCapture","mouseup","mouseout","_pointerCapturing","zrEventControl","element","toElement","relatedTarget","zrIsToLocalDOM","touchstart","_lastTouchMoment","Date","handler","processGesture","call","touchmove","touchend","click","each","globalDOMHandlers","pointerCaptureReleasing","mountLocalDOMEventListeners","domHandlers","pointerEventsSupported","nativeEventName","mountSingleDOMEventListener","touchEventsSupported","mountGlobalDOMEventListeners","mount","nativeEventListener","capture","listener","opt","mounted","listenerOpts","domTarget","unmountDOMEventListeners","isPointerCapturing","globalHandlerScope","_globalHandlerScope","DOMHandlerScope","HandlerDomProxy","_localHandlerScope","document","handlerDomProxyProto","dispose","setCursor","cursorStyle","style","cursor","mixin","_default","module","exports"],"sources":["/Users/mac/Desktop/vue_bsm/vue3_bsm/node_modules/zrender/lib/dom/HandlerProxy.js"],"sourcesContent":["var _event = require(\"../core/event\");\n\nvar addEventListener = _event.addEventListener;\nvar removeEventListener = _event.removeEventListener;\nvar normalizeEvent = _event.normalizeEvent;\nvar getNativeEvent = _event.getNativeEvent;\n\nvar zrUtil = require(\"../core/util\");\n\nvar Eventful = require(\"../mixin/Eventful\");\n\nvar env = require(\"../core/env\");\n\n/* global document */\nvar TOUCH_CLICK_DELAY = 300;\nvar globalEventSupported = env.domSupported;\n\nvar localNativeListenerNames = function () {\n  var mouseHandlerNames = ['click', 'dblclick', 'mousewheel', 'mouseout', 'mouseup', 'mousedown', 'mousemove', 'contextmenu'];\n  var touchHandlerNames = ['touchstart', 'touchend', 'touchmove'];\n  var pointerEventNameMap = {\n    pointerdown: 1,\n    pointerup: 1,\n    pointermove: 1,\n    pointerout: 1\n  };\n  var pointerHandlerNames = zrUtil.map(mouseHandlerNames, function (name) {\n    var nm = name.replace('mouse', 'pointer');\n    return pointerEventNameMap.hasOwnProperty(nm) ? nm : name;\n  });\n  return {\n    mouse: mouseHandlerNames,\n    touch: touchHandlerNames,\n    pointer: pointerHandlerNames\n  };\n}();\n\nvar globalNativeListenerNames = {\n  mouse: ['mousemove', 'mouseup'],\n  pointer: ['pointermove', 'pointerup']\n};\n\nfunction eventNameFix(name) {\n  return name === 'mousewheel' && env.browser.firefox ? 'DOMMouseScroll' : name;\n}\n\nfunction isPointerFromTouch(event) {\n  var pointerType = event.pointerType;\n  return pointerType === 'pen' || pointerType === 'touch';\n} // function useMSGuesture(handlerProxy, event) {\n//     return isPointerFromTouch(event) && !!handlerProxy._msGesture;\n// }\n// function onMSGestureChange(proxy, event) {\n//     if (event.translationX || event.translationY) {\n//         // mousemove is carried by MSGesture to reduce the sensitivity.\n//         proxy.handler.dispatchToElement(event.target, 'mousemove', event);\n//     }\n//     if (event.scale !== 1) {\n//         event.pinchX = event.offsetX;\n//         event.pinchY = event.offsetY;\n//         event.pinchScale = event.scale;\n//         proxy.handler.dispatchToElement(event.target, 'pinch', event);\n//     }\n// }\n\n/**\n * Prevent mouse event from being dispatched after Touch Events action\n * @see <https://github.com/deltakosh/handjs/blob/master/src/hand.base.js>\n * 1. Mobile browsers dispatch mouse events 300ms after touchend.\n * 2. Chrome for Android dispatch mousedown for long-touch about 650ms\n * Result: Blocking Mouse Events for 700ms.\n *\n * @param {DOMHandlerScope} scope\n */\n\n\nfunction setTouchTimer(scope) {\n  scope.touching = true;\n\n  if (scope.touchTimer != null) {\n    clearTimeout(scope.touchTimer);\n    scope.touchTimer = null;\n  }\n\n  scope.touchTimer = setTimeout(function () {\n    scope.touching = false;\n    scope.touchTimer = null;\n  }, 700);\n} // Mark touch, which is useful in distinguish touch and\n// mouse event in upper applicatoin.\n\n\nfunction markTouch(event) {\n  event && (event.zrByTouch = true);\n} // function markTriggeredFromLocal(event) {\n//     event && (event.__zrIsFromLocal = true);\n// }\n// function isTriggeredFromLocal(instance, event) {\n//     return !!(event && event.__zrIsFromLocal);\n// }\n\n\nfunction normalizeGlobalEvent(instance, event) {\n  // offsetX, offsetY still need to be calculated. They are necessary in the event\n  // handlers of the upper applications. Set `true` to force calculate them.\n  return normalizeEvent(instance.dom, new FakeGlobalEvent(instance, event), true);\n}\n/**\n * Detect whether the given el is in `painterRoot`.\n */\n\n\nfunction isLocalEl(instance, el) {\n  var elTmp = el;\n  var isLocal = false;\n\n  while (elTmp && elTmp.nodeType !== 9 && !(isLocal = elTmp.domBelongToZr || elTmp !== el && elTmp === instance.painterRoot)) {\n    elTmp = elTmp.parentNode;\n  }\n\n  return isLocal;\n}\n/**\n * Make a fake event but not change the original event,\n * becuase the global event probably be used by other\n * listeners not belonging to zrender.\n * @class\n */\n\n\nfunction FakeGlobalEvent(instance, event) {\n  this.type = event.type;\n  this.target = this.currentTarget = instance.dom;\n  this.pointerType = event.pointerType; // Necessray for the force calculation of zrX, zrY\n\n  this.clientX = event.clientX;\n  this.clientY = event.clientY; // Because we do not mount global listeners to touch events,\n  // we do not copy `targetTouches` and `changedTouches` here.\n}\n\nvar fakeGlobalEventProto = FakeGlobalEvent.prototype; // we make the default methods on the event do nothing,\n// otherwise it is dangerous. See more details in\n// [Drag outside] in `Handler.js`.\n\nfakeGlobalEventProto.stopPropagation = fakeGlobalEventProto.stopImmediatePropagation = fakeGlobalEventProto.preventDefault = zrUtil.noop;\n/**\n * Local DOM Handlers\n * @this {HandlerProxy}\n */\n\nvar localDOMHandlers = {\n  mousedown: function (event) {\n    event = normalizeEvent(this.dom, event);\n    this._mayPointerCapture = [event.zrX, event.zrY];\n    this.trigger('mousedown', event);\n  },\n  mousemove: function (event) {\n    event = normalizeEvent(this.dom, event);\n    var downPoint = this._mayPointerCapture;\n\n    if (downPoint && (event.zrX !== downPoint[0] || event.zrY !== downPoint[1])) {\n      togglePointerCapture(this, true);\n    }\n\n    this.trigger('mousemove', event);\n  },\n  mouseup: function (event) {\n    event = normalizeEvent(this.dom, event);\n    togglePointerCapture(this, false);\n    this.trigger('mouseup', event);\n  },\n  mouseout: function (event) {\n    event = normalizeEvent(this.dom, event); // Similarly to the browser did on `document` and touch event,\n    // `globalout` will be delayed to final pointer cature release.\n\n    if (this._pointerCapturing) {\n      event.zrEventControl = 'no_globalout';\n    } // There might be some doms created by upper layer application\n    // at the same level of painter.getViewportRoot() (e.g., tooltip\n    // dom created by echarts), where 'globalout' event should not\n    // be triggered when mouse enters these doms. (But 'mouseout'\n    // should be triggered at the original hovered element as usual).\n\n\n    var element = event.toElement || event.relatedTarget;\n    event.zrIsToLocalDOM = isLocalEl(this, element);\n    this.trigger('mouseout', event);\n  },\n  touchstart: function (event) {\n    // Default mouse behaviour should not be disabled here.\n    // For example, page may needs to be slided.\n    event = normalizeEvent(this.dom, event);\n    markTouch(event);\n    this._lastTouchMoment = new Date();\n    this.handler.processGesture(event, 'start'); // For consistent event listener for both touch device and mouse device,\n    // we simulate \"mouseover-->mousedown\" in touch device. So we trigger\n    // `mousemove` here (to trigger `mouseover` inside), and then trigger\n    // `mousedown`.\n\n    localDOMHandlers.mousemove.call(this, event);\n    localDOMHandlers.mousedown.call(this, event);\n  },\n  touchmove: function (event) {\n    event = normalizeEvent(this.dom, event);\n    markTouch(event);\n    this.handler.processGesture(event, 'change'); // Mouse move should always be triggered no matter whether\n    // there is gestrue event, because mouse move and pinch may\n    // be used at the same time.\n\n    localDOMHandlers.mousemove.call(this, event);\n  },\n  touchend: function (event) {\n    event = normalizeEvent(this.dom, event);\n    markTouch(event);\n    this.handler.processGesture(event, 'end');\n    localDOMHandlers.mouseup.call(this, event); // Do not trigger `mouseout` here, in spite of `mousemove`(`mouseover`) is\n    // triggered in `touchstart`. This seems to be illogical, but by this mechanism,\n    // we can conveniently implement \"hover style\" in both PC and touch device just\n    // by listening to `mouseover` to add \"hover style\" and listening to `mouseout`\n    // to remove \"hover style\" on an element, without any additional code for\n    // compatibility. (`mouseout` will not be triggered in `touchend`, so \"hover\n    // style\" will remain for user view)\n    // click event should always be triggered no matter whether\n    // there is gestrue event. System click can not be prevented.\n\n    if (+new Date() - this._lastTouchMoment < TOUCH_CLICK_DELAY) {\n      localDOMHandlers.click.call(this, event);\n    }\n  },\n  pointerdown: function (event) {\n    localDOMHandlers.mousedown.call(this, event); // if (useMSGuesture(this, event)) {\n    //     this._msGesture.addPointer(event.pointerId);\n    // }\n  },\n  pointermove: function (event) {\n    // FIXME\n    // pointermove is so sensitive that it always triggered when\n    // tap(click) on touch screen, which affect some judgement in\n    // upper application. So, we dont support mousemove on MS touch\n    // device yet.\n    if (!isPointerFromTouch(event)) {\n      localDOMHandlers.mousemove.call(this, event);\n    }\n  },\n  pointerup: function (event) {\n    localDOMHandlers.mouseup.call(this, event);\n  },\n  pointerout: function (event) {\n    // pointerout will be triggered when tap on touch screen\n    // (IE11+/Edge on MS Surface) after click event triggered,\n    // which is inconsistent with the mousout behavior we defined\n    // in touchend. So we unify them.\n    // (check localDOMHandlers.touchend for detailed explanation)\n    if (!isPointerFromTouch(event)) {\n      localDOMHandlers.mouseout.call(this, event);\n    }\n  }\n};\n/**\n * Othere DOM UI Event handlers for zr dom.\n * @this {HandlerProxy}\n */\n\nzrUtil.each(['click', 'mousewheel', 'dblclick', 'contextmenu'], function (name) {\n  localDOMHandlers[name] = function (event) {\n    event = normalizeEvent(this.dom, event);\n    this.trigger(name, event);\n  };\n});\n/**\n * DOM UI Event handlers for global page.\n *\n * [Caution]:\n * those handlers should both support in capture phase and bubble phase!\n *\n * @this {HandlerProxy}\n */\n\nvar globalDOMHandlers = {\n  pointermove: function (event) {\n    // FIXME\n    // pointermove is so sensitive that it always triggered when\n    // tap(click) on touch screen, which affect some judgement in\n    // upper application. So, we dont support mousemove on MS touch\n    // device yet.\n    if (!isPointerFromTouch(event)) {\n      globalDOMHandlers.mousemove.call(this, event);\n    }\n  },\n  pointerup: function (event) {\n    globalDOMHandlers.mouseup.call(this, event);\n  },\n  mousemove: function (event) {\n    this.trigger('mousemove', event);\n  },\n  mouseup: function (event) {\n    var pointerCaptureReleasing = this._pointerCapturing;\n    togglePointerCapture(this, false);\n    this.trigger('mouseup', event);\n\n    if (pointerCaptureReleasing) {\n      event.zrEventControl = 'only_globalout';\n      this.trigger('mouseout', event);\n    }\n  }\n};\n/**\n * @param {HandlerProxy} instance\n * @param {DOMHandlerScope} scope\n */\n\nfunction mountLocalDOMEventListeners(instance, scope) {\n  var domHandlers = scope.domHandlers;\n\n  if (env.pointerEventsSupported) {\n    // Only IE11+/Edge\n    // 1. On devices that both enable touch and mouse (e.g., MS Surface and lenovo X240),\n    // IE11+/Edge do not trigger touch event, but trigger pointer event and mouse event\n    // at the same time.\n    // 2. On MS Surface, it probablely only trigger mousedown but no mouseup when tap on\n    // screen, which do not occurs in pointer event.\n    // So we use pointer event to both detect touch gesture and mouse behavior.\n    zrUtil.each(localNativeListenerNames.pointer, function (nativeEventName) {\n      mountSingleDOMEventListener(scope, nativeEventName, function (event) {\n        // markTriggeredFromLocal(event);\n        domHandlers[nativeEventName].call(instance, event);\n      });\n    }); // FIXME\n    // Note: MS Gesture require CSS touch-action set. But touch-action is not reliable,\n    // which does not prevent defuault behavior occasionally (which may cause view port\n    // zoomed in but use can not zoom it back). And event.preventDefault() does not work.\n    // So we have to not to use MSGesture and not to support touchmove and pinch on MS\n    // touch screen. And we only support click behavior on MS touch screen now.\n    // MS Gesture Event is only supported on IE11+/Edge and on Windows 8+.\n    // We dont support touch on IE on win7.\n    // See <https://msdn.microsoft.com/en-us/library/dn433243(v=vs.85).aspx>\n    // if (typeof MSGesture === 'function') {\n    //     (this._msGesture = new MSGesture()).target = dom; // jshint ignore:line\n    //     dom.addEventListener('MSGestureChange', onMSGestureChange);\n    // }\n  } else {\n    if (env.touchEventsSupported) {\n      zrUtil.each(localNativeListenerNames.touch, function (nativeEventName) {\n        mountSingleDOMEventListener(scope, nativeEventName, function (event) {\n          // markTriggeredFromLocal(event);\n          domHandlers[nativeEventName].call(instance, event);\n          setTouchTimer(scope);\n        });\n      }); // Handler of 'mouseout' event is needed in touch mode, which will be mounted below.\n      // addEventListener(root, 'mouseout', this._mouseoutHandler);\n    } // 1. Considering some devices that both enable touch and mouse event (like on MS Surface\n    // and lenovo X240, @see #2350), we make mouse event be always listened, otherwise\n    // mouse event can not be handle in those devices.\n    // 2. On MS Surface, Chrome will trigger both touch event and mouse event. How to prevent\n    // mouseevent after touch event triggered, see `setTouchTimer`.\n\n\n    zrUtil.each(localNativeListenerNames.mouse, function (nativeEventName) {\n      mountSingleDOMEventListener(scope, nativeEventName, function (event) {\n        event = getNativeEvent(event);\n\n        if (!scope.touching) {\n          // markTriggeredFromLocal(event);\n          domHandlers[nativeEventName].call(instance, event);\n        }\n      });\n    });\n  }\n}\n/**\n * @param {HandlerProxy} instance\n * @param {DOMHandlerScope} scope\n */\n\n\nfunction mountGlobalDOMEventListeners(instance, scope) {\n  // Only IE11+/Edge. See the comment in `mountLocalDOMEventListeners`.\n  if (env.pointerEventsSupported) {\n    zrUtil.each(globalNativeListenerNames.pointer, mount);\n  } // Touch event has implemented \"drag outside\" so we do not mount global listener for touch event.\n  // (see https://www.w3.org/TR/touch-events/#the-touchmove-event)\n  // We do not consider \"both-support-touch-and-mouse device\" for this feature (see the comment of\n  // `mountLocalDOMEventListeners`) to avoid bugs util some requirements come.\n  else if (!env.touchEventsSupported) {\n      zrUtil.each(globalNativeListenerNames.mouse, mount);\n    }\n\n  function mount(nativeEventName) {\n    function nativeEventListener(event) {\n      event = getNativeEvent(event); // See the reason in [Drag outside] in `Handler.js`\n      // This checking supports both `useCapture` or not.\n      // PENDING: if there is performance issue in some devices,\n      // we probably can not use `useCapture` and change a easier\n      // to judes whether local (mark).\n\n      if (!isLocalEl(instance, event.target)) {\n        event = normalizeGlobalEvent(instance, event);\n        scope.domHandlers[nativeEventName].call(instance, event);\n      }\n    }\n\n    mountSingleDOMEventListener(scope, nativeEventName, nativeEventListener, {\n      capture: true\n    } // See [Drag Outside] in `Handler.js`\n    );\n  }\n}\n\nfunction mountSingleDOMEventListener(scope, nativeEventName, listener, opt) {\n  scope.mounted[nativeEventName] = listener;\n  scope.listenerOpts[nativeEventName] = opt;\n  addEventListener(scope.domTarget, eventNameFix(nativeEventName), listener, opt);\n}\n\nfunction unmountDOMEventListeners(scope) {\n  var mounted = scope.mounted;\n\n  for (var nativeEventName in mounted) {\n    if (mounted.hasOwnProperty(nativeEventName)) {\n      removeEventListener(scope.domTarget, eventNameFix(nativeEventName), mounted[nativeEventName], scope.listenerOpts[nativeEventName]);\n    }\n  }\n\n  scope.mounted = {};\n}\n/**\n * See [Drag Outside] in `Handler.js`.\n * @implement\n * @param {boolean} isPointerCapturing Should never be `null`/`undefined`.\n *        `true`: start to capture pointer if it is not capturing.\n *        `false`: end the capture if it is capturing.\n */\n\n\nfunction togglePointerCapture(instance, isPointerCapturing) {\n  instance._mayPointerCapture = null;\n\n  if (globalEventSupported && instance._pointerCapturing ^ isPointerCapturing) {\n    instance._pointerCapturing = isPointerCapturing;\n    var globalHandlerScope = instance._globalHandlerScope;\n    isPointerCapturing ? mountGlobalDOMEventListeners(instance, globalHandlerScope) : unmountDOMEventListeners(globalHandlerScope);\n  }\n}\n/**\n * @inner\n * @class\n */\n\n\nfunction DOMHandlerScope(domTarget, domHandlers) {\n  this.domTarget = domTarget;\n  this.domHandlers = domHandlers; // Key: eventName, value: mounted handler funcitons.\n  // Used for unmount.\n\n  this.mounted = {};\n  this.listenerOpts = {};\n  this.touchTimer = null;\n  this.touching = false;\n}\n/**\n * @public\n * @class\n */\n\n\nfunction HandlerDomProxy(dom, painterRoot) {\n  Eventful.call(this);\n  this.dom = dom;\n  this.painterRoot = painterRoot;\n  this._localHandlerScope = new DOMHandlerScope(dom, localDOMHandlers);\n\n  if (globalEventSupported) {\n    this._globalHandlerScope = new DOMHandlerScope(document, globalDOMHandlers);\n  }\n  /**\n   * @type {boolean}\n   */\n\n\n  this._pointerCapturing = false;\n  /**\n   * @type {Array.<number>} [x, y] or null.\n   */\n\n  this._mayPointerCapture = null;\n  mountLocalDOMEventListeners(this, this._localHandlerScope);\n}\n\nvar handlerDomProxyProto = HandlerDomProxy.prototype;\n\nhandlerDomProxyProto.dispose = function () {\n  unmountDOMEventListeners(this._localHandlerScope);\n\n  if (globalEventSupported) {\n    unmountDOMEventListeners(this._globalHandlerScope);\n  }\n};\n\nhandlerDomProxyProto.setCursor = function (cursorStyle) {\n  this.dom.style && (this.dom.style.cursor = cursorStyle || 'default');\n};\n\nzrUtil.mixin(HandlerDomProxy, Eventful);\nvar _default = HandlerDomProxy;\nmodule.exports = _default;"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,eAAe,CAAC;AAErC,IAAIC,gBAAgB,GAAGF,MAAM,CAACE,gBAAgB;AAC9C,IAAIC,mBAAmB,GAAGH,MAAM,CAACG,mBAAmB;AACpD,IAAIC,cAAc,GAAGJ,MAAM,CAACI,cAAc;AAC1C,IAAIC,cAAc,GAAGL,MAAM,CAACK,cAAc;AAE1C,IAAIC,MAAM,GAAGL,OAAO,CAAC,cAAc,CAAC;AAEpC,IAAIM,QAAQ,GAAGN,OAAO,CAAC,mBAAmB,CAAC;AAE3C,IAAIO,GAAG,GAAGP,OAAO,CAAC,aAAa,CAAC;;AAEhC;AACA,IAAIQ,iBAAiB,GAAG,GAAG;AAC3B,IAAIC,oBAAoB,GAAGF,GAAG,CAACG,YAAY;AAE3C,IAAIC,wBAAwB,GAAG,YAAY;EACzC,IAAIC,iBAAiB,GAAG,CAAC,OAAO,EAAE,UAAU,EAAE,YAAY,EAAE,UAAU,EAAE,SAAS,EAAE,WAAW,EAAE,WAAW,EAAE,aAAa,CAAC;EAC3H,IAAIC,iBAAiB,GAAG,CAAC,YAAY,EAAE,UAAU,EAAE,WAAW,CAAC;EAC/D,IAAIC,mBAAmB,GAAG;IACxBC,WAAW,EAAE,CAAC;IACdC,SAAS,EAAE,CAAC;IACZC,WAAW,EAAE,CAAC;IACdC,UAAU,EAAE;EACd,CAAC;EACD,IAAIC,mBAAmB,GAAGd,MAAM,CAACe,GAAG,CAACR,iBAAiB,EAAE,UAAUS,IAAI,EAAE;IACtE,IAAIC,EAAE,GAAGD,IAAI,CAACE,OAAO,CAAC,OAAO,EAAE,SAAS,CAAC;IACzC,OAAOT,mBAAmB,CAACU,cAAc,CAACF,EAAE,CAAC,GAAGA,EAAE,GAAGD,IAAI;EAC3D,CAAC,CAAC;EACF,OAAO;IACLI,KAAK,EAAEb,iBAAiB;IACxBc,KAAK,EAAEb,iBAAiB;IACxBc,OAAO,EAAER;EACX,CAAC;AACH,CAAC,EAAE;AAEH,IAAIS,yBAAyB,GAAG;EAC9BH,KAAK,EAAE,CAAC,WAAW,EAAE,SAAS,CAAC;EAC/BE,OAAO,EAAE,CAAC,aAAa,EAAE,WAAW;AACtC,CAAC;AAED,SAASE,YAAYA,CAACR,IAAI,EAAE;EAC1B,OAAOA,IAAI,KAAK,YAAY,IAAId,GAAG,CAACuB,OAAO,CAACC,OAAO,GAAG,gBAAgB,GAAGV,IAAI;AAC/E;AAEA,SAASW,kBAAkBA,CAACC,KAAK,EAAE;EACjC,IAAIC,WAAW,GAAGD,KAAK,CAACC,WAAW;EACnC,OAAOA,WAAW,KAAK,KAAK,IAAIA,WAAW,KAAK,OAAO;AACzD,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASC,aAAaA,CAACC,KAAK,EAAE;EAC5BA,KAAK,CAACC,QAAQ,GAAG,IAAI;EAErB,IAAID,KAAK,CAACE,UAAU,IAAI,IAAI,EAAE;IAC5BC,YAAY,CAACH,KAAK,CAACE,UAAU,CAAC;IAC9BF,KAAK,CAACE,UAAU,GAAG,IAAI;EACzB;EAEAF,KAAK,CAACE,UAAU,GAAGE,UAAU,CAAC,YAAY;IACxCJ,KAAK,CAACC,QAAQ,GAAG,KAAK;IACtBD,KAAK,CAACE,UAAU,GAAG,IAAI;EACzB,CAAC,EAAE,GAAG,CAAC;AACT,CAAC,CAAC;AACF;;AAGA,SAASG,SAASA,CAACR,KAAK,EAAE;EACxBA,KAAK,KAAKA,KAAK,CAACS,SAAS,GAAG,IAAI,CAAC;AACnC,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;;AAGA,SAASC,oBAAoBA,CAACC,QAAQ,EAAEX,KAAK,EAAE;EAC7C;EACA;EACA,OAAO9B,cAAc,CAACyC,QAAQ,CAACC,GAAG,EAAE,IAAIC,eAAe,CAACF,QAAQ,EAAEX,KAAK,CAAC,EAAE,IAAI,CAAC;AACjF;AACA;AACA;AACA;;AAGA,SAASc,SAASA,CAACH,QAAQ,EAAEI,EAAE,EAAE;EAC/B,IAAIC,KAAK,GAAGD,EAAE;EACd,IAAIE,OAAO,GAAG,KAAK;EAEnB,OAAOD,KAAK,IAAIA,KAAK,CAACE,QAAQ,KAAK,CAAC,IAAI,EAAED,OAAO,GAAGD,KAAK,CAACG,aAAa,IAAIH,KAAK,KAAKD,EAAE,IAAIC,KAAK,KAAKL,QAAQ,CAACS,WAAW,CAAC,EAAE;IAC1HJ,KAAK,GAAGA,KAAK,CAACK,UAAU;EAC1B;EAEA,OAAOJ,OAAO;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASJ,eAAeA,CAACF,QAAQ,EAAEX,KAAK,EAAE;EACxC,IAAI,CAACsB,IAAI,GAAGtB,KAAK,CAACsB,IAAI;EACtB,IAAI,CAACC,MAAM,GAAG,IAAI,CAACC,aAAa,GAAGb,QAAQ,CAACC,GAAG;EAC/C,IAAI,CAACX,WAAW,GAAGD,KAAK,CAACC,WAAW,CAAC,CAAC;;EAEtC,IAAI,CAACwB,OAAO,GAAGzB,KAAK,CAACyB,OAAO;EAC5B,IAAI,CAACC,OAAO,GAAG1B,KAAK,CAAC0B,OAAO,CAAC,CAAC;EAC9B;AACF;;AAEA,IAAIC,oBAAoB,GAAGd,eAAe,CAACe,SAAS,CAAC,CAAC;AACtD;AACA;;AAEAD,oBAAoB,CAACE,eAAe,GAAGF,oBAAoB,CAACG,wBAAwB,GAAGH,oBAAoB,CAACI,cAAc,GAAG3D,MAAM,CAAC4D,IAAI;AACxI;AACA;AACA;AACA;;AAEA,IAAIC,gBAAgB,GAAG;EACrBC,SAAS,EAAE,SAAAA,CAAUlC,KAAK,EAAE;IAC1BA,KAAK,GAAG9B,cAAc,CAAC,IAAI,CAAC0C,GAAG,EAAEZ,KAAK,CAAC;IACvC,IAAI,CAACmC,kBAAkB,GAAG,CAACnC,KAAK,CAACoC,GAAG,EAAEpC,KAAK,CAACqC,GAAG,CAAC;IAChD,IAAI,CAACC,OAAO,CAAC,WAAW,EAAEtC,KAAK,CAAC;EAClC,CAAC;EACDuC,SAAS,EAAE,SAAAA,CAAUvC,KAAK,EAAE;IAC1BA,KAAK,GAAG9B,cAAc,CAAC,IAAI,CAAC0C,GAAG,EAAEZ,KAAK,CAAC;IACvC,IAAIwC,SAAS,GAAG,IAAI,CAACL,kBAAkB;IAEvC,IAAIK,SAAS,KAAKxC,KAAK,CAACoC,GAAG,KAAKI,SAAS,CAAC,CAAC,CAAC,IAAIxC,KAAK,CAACqC,GAAG,KAAKG,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE;MAC3EC,oBAAoB,CAAC,IAAI,EAAE,IAAI,CAAC;IAClC;IAEA,IAAI,CAACH,OAAO,CAAC,WAAW,EAAEtC,KAAK,CAAC;EAClC,CAAC;EACD0C,OAAO,EAAE,SAAAA,CAAU1C,KAAK,EAAE;IACxBA,KAAK,GAAG9B,cAAc,CAAC,IAAI,CAAC0C,GAAG,EAAEZ,KAAK,CAAC;IACvCyC,oBAAoB,CAAC,IAAI,EAAE,KAAK,CAAC;IACjC,IAAI,CAACH,OAAO,CAAC,SAAS,EAAEtC,KAAK,CAAC;EAChC,CAAC;EACD2C,QAAQ,EAAE,SAAAA,CAAU3C,KAAK,EAAE;IACzBA,KAAK,GAAG9B,cAAc,CAAC,IAAI,CAAC0C,GAAG,EAAEZ,KAAK,CAAC,CAAC,CAAC;IACzC;;IAEA,IAAI,IAAI,CAAC4C,iBAAiB,EAAE;MAC1B5C,KAAK,CAAC6C,cAAc,GAAG,cAAc;IACvC,CAAC,CAAC;IACF;IACA;IACA;IACA;;IAGA,IAAIC,OAAO,GAAG9C,KAAK,CAAC+C,SAAS,IAAI/C,KAAK,CAACgD,aAAa;IACpDhD,KAAK,CAACiD,cAAc,GAAGnC,SAAS,CAAC,IAAI,EAAEgC,OAAO,CAAC;IAC/C,IAAI,CAACR,OAAO,CAAC,UAAU,EAAEtC,KAAK,CAAC;EACjC,CAAC;EACDkD,UAAU,EAAE,SAAAA,CAAUlD,KAAK,EAAE;IAC3B;IACA;IACAA,KAAK,GAAG9B,cAAc,CAAC,IAAI,CAAC0C,GAAG,EAAEZ,KAAK,CAAC;IACvCQ,SAAS,CAACR,KAAK,CAAC;IAChB,IAAI,CAACmD,gBAAgB,GAAG,IAAIC,IAAI,EAAE;IAClC,IAAI,CAACC,OAAO,CAACC,cAAc,CAACtD,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC;IAC7C;IACA;IACA;;IAEAiC,gBAAgB,CAACM,SAAS,CAACgB,IAAI,CAAC,IAAI,EAAEvD,KAAK,CAAC;IAC5CiC,gBAAgB,CAACC,SAAS,CAACqB,IAAI,CAAC,IAAI,EAAEvD,KAAK,CAAC;EAC9C,CAAC;EACDwD,SAAS,EAAE,SAAAA,CAAUxD,KAAK,EAAE;IAC1BA,KAAK,GAAG9B,cAAc,CAAC,IAAI,CAAC0C,GAAG,EAAEZ,KAAK,CAAC;IACvCQ,SAAS,CAACR,KAAK,CAAC;IAChB,IAAI,CAACqD,OAAO,CAACC,cAAc,CAACtD,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC;IAC9C;IACA;;IAEAiC,gBAAgB,CAACM,SAAS,CAACgB,IAAI,CAAC,IAAI,EAAEvD,KAAK,CAAC;EAC9C,CAAC;EACDyD,QAAQ,EAAE,SAAAA,CAAUzD,KAAK,EAAE;IACzBA,KAAK,GAAG9B,cAAc,CAAC,IAAI,CAAC0C,GAAG,EAAEZ,KAAK,CAAC;IACvCQ,SAAS,CAACR,KAAK,CAAC;IAChB,IAAI,CAACqD,OAAO,CAACC,cAAc,CAACtD,KAAK,EAAE,KAAK,CAAC;IACzCiC,gBAAgB,CAACS,OAAO,CAACa,IAAI,CAAC,IAAI,EAAEvD,KAAK,CAAC,CAAC,CAAC;IAC5C;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA,IAAI,CAAC,IAAIoD,IAAI,EAAE,GAAG,IAAI,CAACD,gBAAgB,GAAG5E,iBAAiB,EAAE;MAC3D0D,gBAAgB,CAACyB,KAAK,CAACH,IAAI,CAAC,IAAI,EAAEvD,KAAK,CAAC;IAC1C;EACF,CAAC;EACDlB,WAAW,EAAE,SAAAA,CAAUkB,KAAK,EAAE;IAC5BiC,gBAAgB,CAACC,SAAS,CAACqB,IAAI,CAAC,IAAI,EAAEvD,KAAK,CAAC,CAAC,CAAC;IAC9C;IACA;EACF,CAAC;;EACDhB,WAAW,EAAE,SAAAA,CAAUgB,KAAK,EAAE;IAC5B;IACA;IACA;IACA;IACA;IACA,IAAI,CAACD,kBAAkB,CAACC,KAAK,CAAC,EAAE;MAC9BiC,gBAAgB,CAACM,SAAS,CAACgB,IAAI,CAAC,IAAI,EAAEvD,KAAK,CAAC;IAC9C;EACF,CAAC;EACDjB,SAAS,EAAE,SAAAA,CAAUiB,KAAK,EAAE;IAC1BiC,gBAAgB,CAACS,OAAO,CAACa,IAAI,CAAC,IAAI,EAAEvD,KAAK,CAAC;EAC5C,CAAC;EACDf,UAAU,EAAE,SAAAA,CAAUe,KAAK,EAAE;IAC3B;IACA;IACA;IACA;IACA;IACA,IAAI,CAACD,kBAAkB,CAACC,KAAK,CAAC,EAAE;MAC9BiC,gBAAgB,CAACU,QAAQ,CAACY,IAAI,CAAC,IAAI,EAAEvD,KAAK,CAAC;IAC7C;EACF;AACF,CAAC;AACD;AACA;AACA;AACA;;AAEA5B,MAAM,CAACuF,IAAI,CAAC,CAAC,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,aAAa,CAAC,EAAE,UAAUvE,IAAI,EAAE;EAC9E6C,gBAAgB,CAAC7C,IAAI,CAAC,GAAG,UAAUY,KAAK,EAAE;IACxCA,KAAK,GAAG9B,cAAc,CAAC,IAAI,CAAC0C,GAAG,EAAEZ,KAAK,CAAC;IACvC,IAAI,CAACsC,OAAO,CAAClD,IAAI,EAAEY,KAAK,CAAC;EAC3B,CAAC;AACH,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAI4D,iBAAiB,GAAG;EACtB5E,WAAW,EAAE,SAAAA,CAAUgB,KAAK,EAAE;IAC5B;IACA;IACA;IACA;IACA;IACA,IAAI,CAACD,kBAAkB,CAACC,KAAK,CAAC,EAAE;MAC9B4D,iBAAiB,CAACrB,SAAS,CAACgB,IAAI,CAAC,IAAI,EAAEvD,KAAK,CAAC;IAC/C;EACF,CAAC;EACDjB,SAAS,EAAE,SAAAA,CAAUiB,KAAK,EAAE;IAC1B4D,iBAAiB,CAAClB,OAAO,CAACa,IAAI,CAAC,IAAI,EAAEvD,KAAK,CAAC;EAC7C,CAAC;EACDuC,SAAS,EAAE,SAAAA,CAAUvC,KAAK,EAAE;IAC1B,IAAI,CAACsC,OAAO,CAAC,WAAW,EAAEtC,KAAK,CAAC;EAClC,CAAC;EACD0C,OAAO,EAAE,SAAAA,CAAU1C,KAAK,EAAE;IACxB,IAAI6D,uBAAuB,GAAG,IAAI,CAACjB,iBAAiB;IACpDH,oBAAoB,CAAC,IAAI,EAAE,KAAK,CAAC;IACjC,IAAI,CAACH,OAAO,CAAC,SAAS,EAAEtC,KAAK,CAAC;IAE9B,IAAI6D,uBAAuB,EAAE;MAC3B7D,KAAK,CAAC6C,cAAc,GAAG,gBAAgB;MACvC,IAAI,CAACP,OAAO,CAAC,UAAU,EAAEtC,KAAK,CAAC;IACjC;EACF;AACF,CAAC;AACD;AACA;AACA;AACA;;AAEA,SAAS8D,2BAA2BA,CAACnD,QAAQ,EAAER,KAAK,EAAE;EACpD,IAAI4D,WAAW,GAAG5D,KAAK,CAAC4D,WAAW;EAEnC,IAAIzF,GAAG,CAAC0F,sBAAsB,EAAE;IAC9B;IACA;IACA;IACA;IACA;IACA;IACA;IACA5F,MAAM,CAACuF,IAAI,CAACjF,wBAAwB,CAACgB,OAAO,EAAE,UAAUuE,eAAe,EAAE;MACvEC,2BAA2B,CAAC/D,KAAK,EAAE8D,eAAe,EAAE,UAAUjE,KAAK,EAAE;QACnE;QACA+D,WAAW,CAACE,eAAe,CAAC,CAACV,IAAI,CAAC5C,QAAQ,EAAEX,KAAK,CAAC;MACpD,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC,CAAC;IACJ;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF,CAAC,MAAM;IACL,IAAI1B,GAAG,CAAC6F,oBAAoB,EAAE;MAC5B/F,MAAM,CAACuF,IAAI,CAACjF,wBAAwB,CAACe,KAAK,EAAE,UAAUwE,eAAe,EAAE;QACrEC,2BAA2B,CAAC/D,KAAK,EAAE8D,eAAe,EAAE,UAAUjE,KAAK,EAAE;UACnE;UACA+D,WAAW,CAACE,eAAe,CAAC,CAACV,IAAI,CAAC5C,QAAQ,EAAEX,KAAK,CAAC;UAClDE,aAAa,CAACC,KAAK,CAAC;QACtB,CAAC,CAAC;MACJ,CAAC,CAAC,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;IACF;IACA;IACA;IACA;;IAGA/B,MAAM,CAACuF,IAAI,CAACjF,wBAAwB,CAACc,KAAK,EAAE,UAAUyE,eAAe,EAAE;MACrEC,2BAA2B,CAAC/D,KAAK,EAAE8D,eAAe,EAAE,UAAUjE,KAAK,EAAE;QACnEA,KAAK,GAAG7B,cAAc,CAAC6B,KAAK,CAAC;QAE7B,IAAI,CAACG,KAAK,CAACC,QAAQ,EAAE;UACnB;UACA2D,WAAW,CAACE,eAAe,CAAC,CAACV,IAAI,CAAC5C,QAAQ,EAAEX,KAAK,CAAC;QACpD;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;AACF;AACA;AACA;AACA;AACA;;AAGA,SAASoE,4BAA4BA,CAACzD,QAAQ,EAAER,KAAK,EAAE;EACrD;EACA,IAAI7B,GAAG,CAAC0F,sBAAsB,EAAE;IAC9B5F,MAAM,CAACuF,IAAI,CAAChE,yBAAyB,CAACD,OAAO,EAAE2E,KAAK,CAAC;EACvD,CAAC,CAAC;EACF;EACA;EACA;EAAA,KACK,IAAI,CAAC/F,GAAG,CAAC6F,oBAAoB,EAAE;IAChC/F,MAAM,CAACuF,IAAI,CAAChE,yBAAyB,CAACH,KAAK,EAAE6E,KAAK,CAAC;EACrD;EAEF,SAASA,KAAKA,CAACJ,eAAe,EAAE;IAC9B,SAASK,mBAAmBA,CAACtE,KAAK,EAAE;MAClCA,KAAK,GAAG7B,cAAc,CAAC6B,KAAK,CAAC,CAAC,CAAC;MAC/B;MACA;MACA;MACA;;MAEA,IAAI,CAACc,SAAS,CAACH,QAAQ,EAAEX,KAAK,CAACuB,MAAM,CAAC,EAAE;QACtCvB,KAAK,GAAGU,oBAAoB,CAACC,QAAQ,EAAEX,KAAK,CAAC;QAC7CG,KAAK,CAAC4D,WAAW,CAACE,eAAe,CAAC,CAACV,IAAI,CAAC5C,QAAQ,EAAEX,KAAK,CAAC;MAC1D;IACF;IAEAkE,2BAA2B,CAAC/D,KAAK,EAAE8D,eAAe,EAAEK,mBAAmB,EAAE;MACvEC,OAAO,EAAE;IACX,CAAC,CAAC;IAAA,CACD;EACH;AACF;;AAEA,SAASL,2BAA2BA,CAAC/D,KAAK,EAAE8D,eAAe,EAAEO,QAAQ,EAAEC,GAAG,EAAE;EAC1EtE,KAAK,CAACuE,OAAO,CAACT,eAAe,CAAC,GAAGO,QAAQ;EACzCrE,KAAK,CAACwE,YAAY,CAACV,eAAe,CAAC,GAAGQ,GAAG;EACzCzG,gBAAgB,CAACmC,KAAK,CAACyE,SAAS,EAAEhF,YAAY,CAACqE,eAAe,CAAC,EAAEO,QAAQ,EAAEC,GAAG,CAAC;AACjF;AAEA,SAASI,wBAAwBA,CAAC1E,KAAK,EAAE;EACvC,IAAIuE,OAAO,GAAGvE,KAAK,CAACuE,OAAO;EAE3B,KAAK,IAAIT,eAAe,IAAIS,OAAO,EAAE;IACnC,IAAIA,OAAO,CAACnF,cAAc,CAAC0E,eAAe,CAAC,EAAE;MAC3ChG,mBAAmB,CAACkC,KAAK,CAACyE,SAAS,EAAEhF,YAAY,CAACqE,eAAe,CAAC,EAAES,OAAO,CAACT,eAAe,CAAC,EAAE9D,KAAK,CAACwE,YAAY,CAACV,eAAe,CAAC,CAAC;IACpI;EACF;EAEA9D,KAAK,CAACuE,OAAO,GAAG,CAAC,CAAC;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASjC,oBAAoBA,CAAC9B,QAAQ,EAAEmE,kBAAkB,EAAE;EAC1DnE,QAAQ,CAACwB,kBAAkB,GAAG,IAAI;EAElC,IAAI3D,oBAAoB,IAAImC,QAAQ,CAACiC,iBAAiB,GAAGkC,kBAAkB,EAAE;IAC3EnE,QAAQ,CAACiC,iBAAiB,GAAGkC,kBAAkB;IAC/C,IAAIC,kBAAkB,GAAGpE,QAAQ,CAACqE,mBAAmB;IACrDF,kBAAkB,GAAGV,4BAA4B,CAACzD,QAAQ,EAAEoE,kBAAkB,CAAC,GAAGF,wBAAwB,CAACE,kBAAkB,CAAC;EAChI;AACF;AACA;AACA;AACA;AACA;;AAGA,SAASE,eAAeA,CAACL,SAAS,EAAEb,WAAW,EAAE;EAC/C,IAAI,CAACa,SAAS,GAAGA,SAAS;EAC1B,IAAI,CAACb,WAAW,GAAGA,WAAW,CAAC,CAAC;EAChC;;EAEA,IAAI,CAACW,OAAO,GAAG,CAAC,CAAC;EACjB,IAAI,CAACC,YAAY,GAAG,CAAC,CAAC;EACtB,IAAI,CAACtE,UAAU,GAAG,IAAI;EACtB,IAAI,CAACD,QAAQ,GAAG,KAAK;AACvB;AACA;AACA;AACA;AACA;;AAGA,SAAS8E,eAAeA,CAACtE,GAAG,EAAEQ,WAAW,EAAE;EACzC/C,QAAQ,CAACkF,IAAI,CAAC,IAAI,CAAC;EACnB,IAAI,CAAC3C,GAAG,GAAGA,GAAG;EACd,IAAI,CAACQ,WAAW,GAAGA,WAAW;EAC9B,IAAI,CAAC+D,kBAAkB,GAAG,IAAIF,eAAe,CAACrE,GAAG,EAAEqB,gBAAgB,CAAC;EAEpE,IAAIzD,oBAAoB,EAAE;IACxB,IAAI,CAACwG,mBAAmB,GAAG,IAAIC,eAAe,CAACG,QAAQ,EAAExB,iBAAiB,CAAC;EAC7E;EACA;AACF;AACA;;EAGE,IAAI,CAAChB,iBAAiB,GAAG,KAAK;EAC9B;AACF;AACA;;EAEE,IAAI,CAACT,kBAAkB,GAAG,IAAI;EAC9B2B,2BAA2B,CAAC,IAAI,EAAE,IAAI,CAACqB,kBAAkB,CAAC;AAC5D;AAEA,IAAIE,oBAAoB,GAAGH,eAAe,CAACtD,SAAS;AAEpDyD,oBAAoB,CAACC,OAAO,GAAG,YAAY;EACzCT,wBAAwB,CAAC,IAAI,CAACM,kBAAkB,CAAC;EAEjD,IAAI3G,oBAAoB,EAAE;IACxBqG,wBAAwB,CAAC,IAAI,CAACG,mBAAmB,CAAC;EACpD;AACF,CAAC;AAEDK,oBAAoB,CAACE,SAAS,GAAG,UAAUC,WAAW,EAAE;EACtD,IAAI,CAAC5E,GAAG,CAAC6E,KAAK,KAAK,IAAI,CAAC7E,GAAG,CAAC6E,KAAK,CAACC,MAAM,GAAGF,WAAW,IAAI,SAAS,CAAC;AACtE,CAAC;AAEDpH,MAAM,CAACuH,KAAK,CAACT,eAAe,EAAE7G,QAAQ,CAAC;AACvC,IAAIuH,QAAQ,GAAGV,eAAe;AAC9BW,MAAM,CAACC,OAAO,GAAGF,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}