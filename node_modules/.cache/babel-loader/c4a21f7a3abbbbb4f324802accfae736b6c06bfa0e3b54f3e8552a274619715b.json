{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineComponent, useAttrs, ref, computed, nextTick, watch, onMounted, openBlock, createBlock, unref, withCtx, withDirectives, createElementBlock, normalizeClass, normalizeStyle, createVNode, withModifiers, Fragment, renderList, toDisplayString, createElementVNode, withKeys, vModelText, createCommentVNode, isRef, vShow, renderSlot } from 'vue';\nimport { isPromise } from '@vue/shared';\nimport { cloneDeep, debounce } from 'lodash-unified';\nimport { isClient, useCssVar, useResizeObserver } from '@vueuse/core';\nimport _CascaderPanel from '../../cascader-panel/index.mjs';\nimport { ElInput } from '../../input/index.mjs';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport { ElScrollbar } from '../../scrollbar/index.mjs';\nimport { ElTag } from '../../tag/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../form/index.mjs';\nimport '../../../directives/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport { CircleClose, ArrowDown, Check } from '@element-plus/icons-vue';\nimport { cascaderProps, cascaderEmits } from './cascader.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useFormItem } from '../../form/src/hooks/use-form-item.mjs';\nimport { useFormSize } from '../../form/src/hooks/use-form-common-props.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../constants/event.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { isKorean } from '../../../utils/i18n.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nimport { focusNode, getSibling } from '../../../utils/dom/aria.mjs';\nimport ClickOutside from '../../../directives/click-outside/index.mjs';\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = [\"placeholder\", \"onKeydown\"];\nconst _hoisted_3 = [\"onClick\"];\nconst COMPONENT_NAME = \"ElCascader\";\nconst __default__ = defineComponent({\n  name: COMPONENT_NAME\n});\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  ...__default__,\n  props: cascaderProps,\n  emits: cascaderEmits,\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const popperOptions = {\n      modifiers: [{\n        name: \"arrowPosition\",\n        enabled: true,\n        phase: \"main\",\n        fn: ({\n          state\n        }) => {\n          const {\n            modifiersData,\n            placement\n          } = state;\n          if ([\"right\", \"left\", \"bottom\", \"top\"].includes(placement)) return;\n          modifiersData.arrow.x = 35;\n        },\n        requires: [\"arrow\"]\n      }]\n    };\n    const attrs = useAttrs();\n    let inputInitialHeight = 0;\n    let pressDeleteCount = 0;\n    const nsCascader = useNamespace(\"cascader\");\n    const nsInput = useNamespace(\"input\");\n    const {\n      t\n    } = useLocale();\n    const {\n      form,\n      formItem\n    } = useFormItem();\n    const tooltipRef = ref(null);\n    const input = ref(null);\n    const tagWrapper = ref(null);\n    const cascaderPanelRef = ref(null);\n    const suggestionPanel = ref(null);\n    const popperVisible = ref(false);\n    const inputHover = ref(false);\n    const filtering = ref(false);\n    const filterFocus = ref(false);\n    const inputValue = ref(\"\");\n    const searchInputValue = ref(\"\");\n    const presentTags = ref([]);\n    const allPresentTags = ref([]);\n    const suggestions = ref([]);\n    const isOnComposition = ref(false);\n    const cascaderStyle = computed(() => {\n      return attrs.style;\n    });\n    const isDisabled = computed(() => props.disabled || (form == null ? void 0 : form.disabled));\n    const inputPlaceholder = computed(() => props.placeholder || t(\"el.cascader.placeholder\"));\n    const currentPlaceholder = computed(() => searchInputValue.value || presentTags.value.length > 0 || isOnComposition.value ? \"\" : inputPlaceholder.value);\n    const realSize = useFormSize();\n    const tagSize = computed(() => [\"small\"].includes(realSize.value) ? \"small\" : \"default\");\n    const multiple = computed(() => !!props.props.multiple);\n    const readonly = computed(() => !props.filterable || multiple.value);\n    const searchKeyword = computed(() => multiple.value ? searchInputValue.value : inputValue.value);\n    const checkedNodes = computed(() => {\n      var _a;\n      return ((_a = cascaderPanelRef.value) == null ? void 0 : _a.checkedNodes) || [];\n    });\n    const clearBtnVisible = computed(() => {\n      if (!props.clearable || isDisabled.value || filtering.value || !inputHover.value) return false;\n      return !!checkedNodes.value.length;\n    });\n    const presentText = computed(() => {\n      const {\n        showAllLevels,\n        separator\n      } = props;\n      const nodes = checkedNodes.value;\n      return nodes.length ? multiple.value ? \"\" : nodes[0].calcText(showAllLevels, separator) : \"\";\n    });\n    const checkedValue = computed({\n      get() {\n        return cloneDeep(props.modelValue);\n      },\n      set(val) {\n        emit(UPDATE_MODEL_EVENT, val);\n        emit(CHANGE_EVENT, val);\n        if (props.validateEvent) {\n          formItem == null ? void 0 : formItem.validate(\"change\").catch(err => debugWarn(err));\n        }\n      }\n    });\n    const cascaderKls = computed(() => {\n      return [nsCascader.b(), nsCascader.m(realSize.value), nsCascader.is(\"disabled\", isDisabled.value), attrs.class];\n    });\n    const cascaderIconKls = computed(() => {\n      return [nsInput.e(\"icon\"), \"icon-arrow-down\", nsCascader.is(\"reverse\", popperVisible.value)];\n    });\n    const inputClass = computed(() => {\n      return nsCascader.is(\"focus\", popperVisible.value || filterFocus.value);\n    });\n    const togglePopperVisible = visible => {\n      var _a, _b, _c;\n      if (isDisabled.value) return;\n      visible = visible != null ? visible : !popperVisible.value;\n      if (visible !== popperVisible.value) {\n        popperVisible.value = visible;\n        (_b = (_a = input.value) == null ? void 0 : _a.input) == null ? void 0 : _b.setAttribute(\"aria-expanded\", `${visible}`);\n        if (visible) {\n          updatePopperPosition();\n          nextTick((_c = cascaderPanelRef.value) == null ? void 0 : _c.scrollToExpandingNode);\n        } else if (props.filterable) {\n          syncPresentTextValue();\n        }\n        emit(\"visibleChange\", visible);\n      }\n    };\n    const updatePopperPosition = () => {\n      nextTick(() => {\n        var _a;\n        (_a = tooltipRef.value) == null ? void 0 : _a.updatePopper();\n      });\n    };\n    const hideSuggestionPanel = () => {\n      filtering.value = false;\n    };\n    const genTag = node => {\n      const {\n        showAllLevels,\n        separator\n      } = props;\n      return {\n        node,\n        key: node.uid,\n        text: node.calcText(showAllLevels, separator),\n        hitState: false,\n        closable: !isDisabled.value && !node.isDisabled,\n        isCollapseTag: false\n      };\n    };\n    const deleteTag = tag => {\n      var _a;\n      const node = tag.node;\n      node.doCheck(false);\n      (_a = cascaderPanelRef.value) == null ? void 0 : _a.calculateCheckedValue();\n      emit(\"removeTag\", node.valueByOption);\n    };\n    const calculatePresentTags = () => {\n      if (!multiple.value) return;\n      const nodes = checkedNodes.value;\n      const tags = [];\n      const allTags = [];\n      nodes.forEach(node => allTags.push(genTag(node)));\n      allPresentTags.value = allTags;\n      if (nodes.length) {\n        const [first, ...rest] = nodes;\n        const restCount = rest.length;\n        tags.push(genTag(first));\n        if (restCount) {\n          if (props.collapseTags) {\n            tags.push({\n              key: -1,\n              text: `+ ${restCount}`,\n              closable: false,\n              isCollapseTag: true\n            });\n          } else {\n            rest.forEach(node => tags.push(genTag(node)));\n          }\n        }\n      }\n      presentTags.value = tags;\n    };\n    const calculateSuggestions = () => {\n      var _a, _b;\n      const {\n        filterMethod,\n        showAllLevels,\n        separator\n      } = props;\n      const res = (_b = (_a = cascaderPanelRef.value) == null ? void 0 : _a.getFlattedNodes(!props.props.checkStrictly)) == null ? void 0 : _b.filter(node => {\n        if (node.isDisabled) return false;\n        node.calcText(showAllLevels, separator);\n        return filterMethod(node, searchKeyword.value);\n      });\n      if (multiple.value) {\n        presentTags.value.forEach(tag => {\n          tag.hitState = false;\n        });\n        allPresentTags.value.forEach(tag => {\n          tag.hitState = false;\n        });\n      }\n      filtering.value = true;\n      suggestions.value = res;\n      updatePopperPosition();\n    };\n    const focusFirstNode = () => {\n      var _a;\n      let firstNode;\n      if (filtering.value && suggestionPanel.value) {\n        firstNode = suggestionPanel.value.$el.querySelector(`.${nsCascader.e(\"suggestion-item\")}`);\n      } else {\n        firstNode = (_a = cascaderPanelRef.value) == null ? void 0 : _a.$el.querySelector(`.${nsCascader.b(\"node\")}[tabindex=\"-1\"]`);\n      }\n      if (firstNode) {\n        firstNode.focus();\n        !filtering.value && firstNode.click();\n      }\n    };\n    const updateStyle = () => {\n      var _a, _b;\n      const inputInner = (_a = input.value) == null ? void 0 : _a.input;\n      const tagWrapperEl = tagWrapper.value;\n      const suggestionPanelEl = (_b = suggestionPanel.value) == null ? void 0 : _b.$el;\n      if (!isClient || !inputInner) return;\n      if (suggestionPanelEl) {\n        const suggestionList = suggestionPanelEl.querySelector(`.${nsCascader.e(\"suggestion-list\")}`);\n        suggestionList.style.minWidth = `${inputInner.offsetWidth}px`;\n      }\n      if (tagWrapperEl) {\n        const {\n          offsetHeight\n        } = tagWrapperEl;\n        const height = presentTags.value.length > 0 ? `${Math.max(offsetHeight + 6, inputInitialHeight)}px` : `${inputInitialHeight}px`;\n        inputInner.style.height = height;\n        updatePopperPosition();\n      }\n    };\n    const getCheckedNodes = leafOnly => {\n      var _a;\n      return (_a = cascaderPanelRef.value) == null ? void 0 : _a.getCheckedNodes(leafOnly);\n    };\n    const handleExpandChange = value => {\n      updatePopperPosition();\n      emit(\"expandChange\", value);\n    };\n    const handleComposition = event => {\n      var _a;\n      const text = (_a = event.target) == null ? void 0 : _a.value;\n      if (event.type === \"compositionend\") {\n        isOnComposition.value = false;\n        nextTick(() => handleInput(text));\n      } else {\n        const lastCharacter = text[text.length - 1] || \"\";\n        isOnComposition.value = !isKorean(lastCharacter);\n      }\n    };\n    const handleKeyDown = e => {\n      if (isOnComposition.value) return;\n      switch (e.code) {\n        case EVENT_CODE.enter:\n          togglePopperVisible();\n          break;\n        case EVENT_CODE.down:\n          togglePopperVisible(true);\n          nextTick(focusFirstNode);\n          e.preventDefault();\n          break;\n        case EVENT_CODE.esc:\n          if (popperVisible.value === true) {\n            e.preventDefault();\n            e.stopPropagation();\n            togglePopperVisible(false);\n          }\n          break;\n        case EVENT_CODE.tab:\n          togglePopperVisible(false);\n          break;\n      }\n    };\n    const handleClear = () => {\n      var _a;\n      (_a = cascaderPanelRef.value) == null ? void 0 : _a.clearCheckedNodes();\n      if (!popperVisible.value && props.filterable) {\n        syncPresentTextValue();\n      }\n      togglePopperVisible(false);\n    };\n    const syncPresentTextValue = () => {\n      const {\n        value\n      } = presentText;\n      inputValue.value = value;\n      searchInputValue.value = value;\n    };\n    const handleSuggestionClick = node => {\n      var _a, _b;\n      const {\n        checked\n      } = node;\n      if (multiple.value) {\n        (_a = cascaderPanelRef.value) == null ? void 0 : _a.handleCheckChange(node, !checked, false);\n      } else {\n        !checked && ((_b = cascaderPanelRef.value) == null ? void 0 : _b.handleCheckChange(node, true, false));\n        togglePopperVisible(false);\n      }\n    };\n    const handleSuggestionKeyDown = e => {\n      const target = e.target;\n      const {\n        code\n      } = e;\n      switch (code) {\n        case EVENT_CODE.up:\n        case EVENT_CODE.down:\n          {\n            const distance = code === EVENT_CODE.up ? -1 : 1;\n            focusNode(getSibling(target, distance, `.${nsCascader.e(\"suggestion-item\")}[tabindex=\"-1\"]`));\n            break;\n          }\n        case EVENT_CODE.enter:\n          target.click();\n          break;\n      }\n    };\n    const handleDelete = () => {\n      const tags = presentTags.value;\n      const lastTag = tags[tags.length - 1];\n      pressDeleteCount = searchInputValue.value ? 0 : pressDeleteCount + 1;\n      if (!lastTag || !pressDeleteCount || props.collapseTags && tags.length > 1) return;\n      if (lastTag.hitState) {\n        deleteTag(lastTag);\n      } else {\n        lastTag.hitState = true;\n      }\n    };\n    const handleFocus = e => {\n      const el = e.target;\n      const name = nsCascader.e(\"search-input\");\n      if (el.className === name) {\n        filterFocus.value = true;\n      }\n      emit(\"focus\", e);\n    };\n    const handleBlur = e => {\n      filterFocus.value = false;\n      emit(\"blur\", e);\n    };\n    const handleFilter = debounce(() => {\n      const {\n        value\n      } = searchKeyword;\n      if (!value) return;\n      const passed = props.beforeFilter(value);\n      if (isPromise(passed)) {\n        passed.then(calculateSuggestions).catch(() => {});\n      } else if (passed !== false) {\n        calculateSuggestions();\n      } else {\n        hideSuggestionPanel();\n      }\n    }, props.debounce);\n    const handleInput = (val, e) => {\n      !popperVisible.value && togglePopperVisible(true);\n      if (e == null ? void 0 : e.isComposing) return;\n      val ? handleFilter() : hideSuggestionPanel();\n    };\n    watch(filtering, updatePopperPosition);\n    watch([checkedNodes, isDisabled], calculatePresentTags);\n    watch(presentTags, () => {\n      nextTick(() => updateStyle());\n    });\n    watch(presentText, syncPresentTextValue, {\n      immediate: true\n    });\n    onMounted(() => {\n      const inputInner = input.value.input;\n      const inputInnerHeight = Number.parseFloat(useCssVar(nsInput.cssVarName(\"input-height\"), inputInner).value) - 2;\n      inputInitialHeight = inputInner.offsetHeight || inputInnerHeight;\n      useResizeObserver(inputInner, updateStyle);\n    });\n    expose({\n      getCheckedNodes,\n      cascaderPanelRef,\n      togglePopperVisible\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createBlock(unref(ElTooltip), {\n        ref_key: \"tooltipRef\",\n        ref: tooltipRef,\n        visible: popperVisible.value,\n        teleported: _ctx.teleported,\n        \"popper-class\": [unref(nsCascader).e(\"dropdown\"), _ctx.popperClass],\n        \"popper-options\": popperOptions,\n        \"fallback-placements\": [\"bottom-start\", \"bottom\", \"top-start\", \"top\", \"right\", \"left\"],\n        \"stop-popper-mouse-event\": false,\n        \"gpu-acceleration\": false,\n        placement: \"bottom-start\",\n        transition: `${unref(nsCascader).namespace.value}-zoom-in-top`,\n        effect: \"light\",\n        pure: \"\",\n        persistent: \"\",\n        onHide: hideSuggestionPanel\n      }, {\n        default: withCtx(() => [withDirectives((openBlock(), createElementBlock(\"div\", {\n          class: normalizeClass(unref(cascaderKls)),\n          style: normalizeStyle(unref(cascaderStyle)),\n          onClick: _cache[5] || (_cache[5] = () => togglePopperVisible(unref(readonly) ? void 0 : true)),\n          onKeydown: handleKeyDown,\n          onMouseenter: _cache[6] || (_cache[6] = $event => inputHover.value = true),\n          onMouseleave: _cache[7] || (_cache[7] = $event => inputHover.value = false)\n        }, [createVNode(unref(ElInput), {\n          ref_key: \"input\",\n          ref: input,\n          modelValue: inputValue.value,\n          \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => inputValue.value = $event),\n          placeholder: unref(currentPlaceholder),\n          readonly: unref(readonly),\n          disabled: unref(isDisabled),\n          \"validate-event\": false,\n          size: unref(realSize),\n          class: normalizeClass(unref(inputClass)),\n          tabindex: unref(multiple) && _ctx.filterable && !unref(isDisabled) ? -1 : void 0,\n          onCompositionstart: handleComposition,\n          onCompositionupdate: handleComposition,\n          onCompositionend: handleComposition,\n          onFocus: handleFocus,\n          onBlur: handleBlur,\n          onInput: handleInput\n        }, {\n          suffix: withCtx(() => [unref(clearBtnVisible) ? (openBlock(), createBlock(unref(ElIcon), {\n            key: \"clear\",\n            class: normalizeClass([unref(nsInput).e(\"icon\"), \"icon-circle-close\"]),\n            onClick: withModifiers(handleClear, [\"stop\"])\n          }, {\n            default: withCtx(() => [createVNode(unref(CircleClose))]),\n            _: 1\n          }, 8, [\"class\", \"onClick\"])) : (openBlock(), createBlock(unref(ElIcon), {\n            key: \"arrow-down\",\n            class: normalizeClass(unref(cascaderIconKls)),\n            onClick: _cache[0] || (_cache[0] = withModifiers($event => togglePopperVisible(), [\"stop\"]))\n          }, {\n            default: withCtx(() => [createVNode(unref(ArrowDown))]),\n            _: 1\n          }, 8, [\"class\"]))]),\n          _: 1\n        }, 8, [\"modelValue\", \"placeholder\", \"readonly\", \"disabled\", \"size\", \"class\", \"tabindex\"]), unref(multiple) ? (openBlock(), createElementBlock(\"div\", {\n          key: 0,\n          ref_key: \"tagWrapper\",\n          ref: tagWrapper,\n          class: normalizeClass(unref(nsCascader).e(\"tags\"))\n        }, [(openBlock(true), createElementBlock(Fragment, null, renderList(presentTags.value, tag => {\n          return openBlock(), createBlock(unref(ElTag), {\n            key: tag.key,\n            type: _ctx.tagType,\n            size: unref(tagSize),\n            hit: tag.hitState,\n            closable: tag.closable,\n            \"disable-transitions\": \"\",\n            onClose: $event => deleteTag(tag)\n          }, {\n            default: withCtx(() => [tag.isCollapseTag === false ? (openBlock(), createElementBlock(\"span\", _hoisted_1, toDisplayString(tag.text), 1)) : (openBlock(), createBlock(unref(ElTooltip), {\n              key: 1,\n              disabled: popperVisible.value || !_ctx.collapseTagsTooltip,\n              \"fallback-placements\": [\"bottom\", \"top\", \"right\", \"left\"],\n              placement: \"bottom\",\n              effect: \"light\"\n            }, {\n              default: withCtx(() => [createElementVNode(\"span\", null, toDisplayString(tag.text), 1)]),\n              content: withCtx(() => [createElementVNode(\"div\", {\n                class: normalizeClass(unref(nsCascader).e(\"collapse-tags\"))\n              }, [(openBlock(true), createElementBlock(Fragment, null, renderList(allPresentTags.value.slice(1), (tag2, idx) => {\n                return openBlock(), createElementBlock(\"div\", {\n                  key: idx,\n                  class: normalizeClass(unref(nsCascader).e(\"collapse-tag\"))\n                }, [(openBlock(), createBlock(unref(ElTag), {\n                  key: tag2.key,\n                  class: \"in-tooltip\",\n                  type: _ctx.tagType,\n                  size: unref(tagSize),\n                  hit: tag2.hitState,\n                  closable: tag2.closable,\n                  \"disable-transitions\": \"\",\n                  onClose: $event => deleteTag(tag2)\n                }, {\n                  default: withCtx(() => [createElementVNode(\"span\", null, toDisplayString(tag2.text), 1)]),\n                  _: 2\n                }, 1032, [\"type\", \"size\", \"hit\", \"closable\", \"onClose\"]))], 2);\n              }), 128))], 2)]),\n              _: 2\n            }, 1032, [\"disabled\"]))]),\n            _: 2\n          }, 1032, [\"type\", \"size\", \"hit\", \"closable\", \"onClose\"]);\n        }), 128)), _ctx.filterable && !unref(isDisabled) ? withDirectives((openBlock(), createElementBlock(\"input\", {\n          key: 0,\n          \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => searchInputValue.value = $event),\n          type: \"text\",\n          class: normalizeClass(unref(nsCascader).e(\"search-input\")),\n          placeholder: unref(presentText) ? \"\" : unref(inputPlaceholder),\n          onInput: _cache[3] || (_cache[3] = e => handleInput(searchInputValue.value, e)),\n          onClick: _cache[4] || (_cache[4] = withModifiers($event => togglePopperVisible(true), [\"stop\"])),\n          onKeydown: withKeys(handleDelete, [\"delete\"]),\n          onCompositionstart: handleComposition,\n          onCompositionupdate: handleComposition,\n          onCompositionend: handleComposition,\n          onFocus: handleFocus,\n          onBlur: handleBlur\n        }, null, 42, _hoisted_2)), [[vModelText, searchInputValue.value]]) : createCommentVNode(\"v-if\", true)], 2)) : createCommentVNode(\"v-if\", true)], 38)), [[unref(ClickOutside), () => togglePopperVisible(false), cascaderPanelRef.value]])]),\n        content: withCtx(() => [withDirectives(createVNode(unref(_CascaderPanel), {\n          ref_key: \"cascaderPanelRef\",\n          ref: cascaderPanelRef,\n          modelValue: unref(checkedValue),\n          \"onUpdate:modelValue\": _cache[8] || (_cache[8] = $event => isRef(checkedValue) ? checkedValue.value = $event : null),\n          options: _ctx.options,\n          props: props.props,\n          border: false,\n          \"render-label\": _ctx.$slots.default,\n          onExpandChange: handleExpandChange,\n          onClose: _cache[9] || (_cache[9] = $event => _ctx.$nextTick(() => togglePopperVisible(false)))\n        }, null, 8, [\"modelValue\", \"options\", \"props\", \"render-label\"]), [[vShow, !filtering.value]]), _ctx.filterable ? withDirectives((openBlock(), createBlock(unref(ElScrollbar), {\n          key: 0,\n          ref_key: \"suggestionPanel\",\n          ref: suggestionPanel,\n          tag: \"ul\",\n          class: normalizeClass(unref(nsCascader).e(\"suggestion-panel\")),\n          \"view-class\": unref(nsCascader).e(\"suggestion-list\"),\n          onKeydown: handleSuggestionKeyDown\n        }, {\n          default: withCtx(() => [suggestions.value.length ? (openBlock(true), createElementBlock(Fragment, {\n            key: 0\n          }, renderList(suggestions.value, item => {\n            return openBlock(), createElementBlock(\"li\", {\n              key: item.uid,\n              class: normalizeClass([unref(nsCascader).e(\"suggestion-item\"), unref(nsCascader).is(\"checked\", item.checked)]),\n              tabindex: -1,\n              onClick: $event => handleSuggestionClick(item)\n            }, [createElementVNode(\"span\", null, toDisplayString(item.text), 1), item.checked ? (openBlock(), createBlock(unref(ElIcon), {\n              key: 0\n            }, {\n              default: withCtx(() => [createVNode(unref(Check))]),\n              _: 1\n            })) : createCommentVNode(\"v-if\", true)], 10, _hoisted_3);\n          }), 128)) : renderSlot(_ctx.$slots, \"empty\", {\n            key: 1\n          }, () => [createElementVNode(\"li\", {\n            class: normalizeClass(unref(nsCascader).e(\"empty-text\"))\n          }, toDisplayString(unref(t)(\"el.cascader.noMatch\")), 3)])]),\n          _: 3\n        }, 8, [\"class\", \"view-class\"])), [[vShow, filtering.value]]) : createCommentVNode(\"v-if\", true)]),\n        _: 3\n      }, 8, [\"visible\", \"teleported\", \"popper-class\", \"transition\"]);\n    };\n  }\n});\nvar Cascader = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/cascader/src/cascader.vue\"]]);\nexport { Cascader as default };","map":{"version":3,"names":["name","COMPONENT_NAME","popperOptions","modifiers","enabled","phase","fn","state","modifiersData","placement","includes","arrow","x","requires","attrs","useAttrs","inputInitialHeight","pressDeleteCount","nsCascader","useNamespace","nsInput","t","useLocale","form","formItem","useFormItem","tooltipRef","ref","input","tagWrapper","cascaderPanelRef","suggestionPanel","popperVisible","inputHover","filtering","filterFocus","inputValue","searchInputValue","presentTags","allPresentTags","suggestions","isOnComposition","cascaderStyle","computed","style","isDisabled","props","disabled","inputPlaceholder","placeholder","currentPlaceholder","value","length","realSize","useFormSize","tagSize","multiple","readonly","filterable","searchKeyword","checkedNodes","_a","clearBtnVisible","clearable","presentText","showAllLevels","separator","nodes","calcText","checkedValue","get","cloneDeep","modelValue","set","val","emit","UPDATE_MODEL_EVENT","CHANGE_EVENT","validateEvent","validate","catch","err","debugWarn","cascaderKls","b","m","is","class","cascaderIconKls","e","inputClass","togglePopperVisible","visible","_b","_c","setAttribute","updatePopperPosition","nextTick","scrollToExpandingNode","syncPresentTextValue","updatePopper","hideSuggestionPanel","genTag","node","key","uid","text","hitState","closable","isCollapseTag","deleteTag","tag","doCheck","calculateCheckedValue","valueByOption","calculatePresentTags","tags","allTags","forEach","push","first","rest","restCount","collapseTags","calculateSuggestions","filterMethod","res","getFlattedNodes","checkStrictly","filter","focusFirstNode","firstNode","$el","querySelector","focus","click","updateStyle","inputInner","tagWrapperEl","suggestionPanelEl","isClient","suggestionList","minWidth","offsetWidth","offsetHeight","height","Math","max","getCheckedNodes","leafOnly","handleExpandChange","handleComposition","event","target","type","handleInput","lastCharacter","isKorean","handleKeyDown","code","EVENT_CODE","enter","down","preventDefault","esc","stopPropagation","tab","handleClear","clearCheckedNodes","handleSuggestionClick","checked","handleCheckChange","handleSuggestionKeyDown","up","distance","focusNode","getSibling","handleDelete","lastTag","handleFocus","el","className","handleBlur","handleFilter","debounce","passed","beforeFilter","isPromise","then","isComposing","watch"],"sources":["../../../../../../packages/components/cascader/src/cascader.vue"],"sourcesContent":["<template>\n  <el-tooltip\n    ref=\"tooltipRef\"\n    :visible=\"popperVisible\"\n    :teleported=\"teleported\"\n    :popper-class=\"[nsCascader.e('dropdown'), popperClass]\"\n    :popper-options=\"popperOptions\"\n    :fallback-placements=\"[\n      'bottom-start',\n      'bottom',\n      'top-start',\n      'top',\n      'right',\n      'left',\n    ]\"\n    :stop-popper-mouse-event=\"false\"\n    :gpu-acceleration=\"false\"\n    placement=\"bottom-start\"\n    :transition=\"`${nsCascader.namespace.value}-zoom-in-top`\"\n    effect=\"light\"\n    pure\n    persistent\n    @hide=\"hideSuggestionPanel\"\n  >\n    <template #default>\n      <div\n        v-clickoutside:[cascaderPanelRef]=\"() => togglePopperVisible(false)\"\n        :class=\"cascaderKls\"\n        :style=\"cascaderStyle\"\n        @click=\"() => togglePopperVisible(readonly ? undefined : true)\"\n        @keydown=\"handleKeyDown\"\n        @mouseenter=\"inputHover = true\"\n        @mouseleave=\"inputHover = false\"\n      >\n        <el-input\n          ref=\"input\"\n          v-model=\"inputValue\"\n          :placeholder=\"currentPlaceholder\"\n          :readonly=\"readonly\"\n          :disabled=\"isDisabled\"\n          :validate-event=\"false\"\n          :size=\"realSize\"\n          :class=\"inputClass\"\n          :tabindex=\"multiple && filterable && !isDisabled ? -1 : undefined\"\n          @compositionstart=\"handleComposition\"\n          @compositionupdate=\"handleComposition\"\n          @compositionend=\"handleComposition\"\n          @focus=\"handleFocus\"\n          @blur=\"handleBlur\"\n          @input=\"handleInput\"\n        >\n          <template #suffix>\n            <el-icon\n              v-if=\"clearBtnVisible\"\n              key=\"clear\"\n              :class=\"[nsInput.e('icon'), 'icon-circle-close']\"\n              @click.stop=\"handleClear\"\n            >\n              <circle-close />\n            </el-icon>\n            <el-icon\n              v-else\n              key=\"arrow-down\"\n              :class=\"cascaderIconKls\"\n              @click.stop=\"togglePopperVisible()\"\n            >\n              <arrow-down />\n            </el-icon>\n          </template>\n        </el-input>\n\n        <div v-if=\"multiple\" ref=\"tagWrapper\" :class=\"nsCascader.e('tags')\">\n          <el-tag\n            v-for=\"tag in presentTags\"\n            :key=\"tag.key\"\n            :type=\"tagType\"\n            :size=\"tagSize\"\n            :hit=\"tag.hitState\"\n            :closable=\"tag.closable\"\n            disable-transitions\n            @close=\"deleteTag(tag)\"\n          >\n            <template v-if=\"tag.isCollapseTag === false\">\n              <span>{{ tag.text }}</span>\n            </template>\n            <template v-else>\n              <el-tooltip\n                :disabled=\"popperVisible || !collapseTagsTooltip\"\n                :fallback-placements=\"['bottom', 'top', 'right', 'left']\"\n                placement=\"bottom\"\n                effect=\"light\"\n              >\n                <template #default>\n                  <span>{{ tag.text }}</span>\n                </template>\n                <template #content>\n                  <div :class=\"nsCascader.e('collapse-tags')\">\n                    <div\n                      v-for=\"(tag2, idx) in allPresentTags.slice(1)\"\n                      :key=\"idx\"\n                      :class=\"nsCascader.e('collapse-tag')\"\n                    >\n                      <el-tag\n                        :key=\"tag2.key\"\n                        class=\"in-tooltip\"\n                        :type=\"tagType\"\n                        :size=\"tagSize\"\n                        :hit=\"tag2.hitState\"\n                        :closable=\"tag2.closable\"\n                        disable-transitions\n                        @close=\"deleteTag(tag2)\"\n                      >\n                        <span>{{ tag2.text }}</span>\n                      </el-tag>\n                    </div>\n                  </div>\n                </template>\n              </el-tooltip>\n            </template>\n          </el-tag>\n          <input\n            v-if=\"filterable && !isDisabled\"\n            v-model=\"searchInputValue\"\n            type=\"text\"\n            :class=\"nsCascader.e('search-input')\"\n            :placeholder=\"presentText ? '' : inputPlaceholder\"\n            @input=\"(e) => handleInput(searchInputValue, e as KeyboardEvent)\"\n            @click.stop=\"togglePopperVisible(true)\"\n            @keydown.delete=\"handleDelete\"\n            @compositionstart=\"handleComposition\"\n            @compositionupdate=\"handleComposition\"\n            @compositionend=\"handleComposition\"\n            @focus=\"handleFocus\"\n            @blur=\"handleBlur\"\n          />\n        </div>\n      </div>\n    </template>\n\n    <template #content>\n      <el-cascader-panel\n        v-show=\"!filtering\"\n        ref=\"cascaderPanelRef\"\n        v-model=\"checkedValue\"\n        :options=\"options\"\n        :props=\"props.props\"\n        :border=\"false\"\n        :render-label=\"$slots.default\"\n        @expand-change=\"handleExpandChange\"\n        @close=\"$nextTick(() => togglePopperVisible(false))\"\n      />\n      <el-scrollbar\n        v-if=\"filterable\"\n        v-show=\"filtering\"\n        ref=\"suggestionPanel\"\n        tag=\"ul\"\n        :class=\"nsCascader.e('suggestion-panel')\"\n        :view-class=\"nsCascader.e('suggestion-list')\"\n        @keydown=\"handleSuggestionKeyDown\"\n      >\n        <template v-if=\"suggestions.length\">\n          <li\n            v-for=\"item in suggestions\"\n            :key=\"item.uid\"\n            :class=\"[\n              nsCascader.e('suggestion-item'),\n              nsCascader.is('checked', item.checked),\n            ]\"\n            :tabindex=\"-1\"\n            @click=\"handleSuggestionClick(item)\"\n          >\n            <span>{{ item.text }}</span>\n            <el-icon v-if=\"item.checked\">\n              <check />\n            </el-icon>\n          </li>\n        </template>\n        <slot v-else name=\"empty\">\n          <li :class=\"nsCascader.e('empty-text')\">\n            {{ t('el.cascader.noMatch') }}\n          </li>\n        </slot>\n      </el-scrollbar>\n    </template>\n  </el-tooltip>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, nextTick, onMounted, ref, useAttrs, watch } from 'vue'\nimport { isPromise } from '@vue/shared'\nimport { cloneDeep, debounce } from 'lodash-unified'\nimport { isClient, useCssVar, useResizeObserver } from '@vueuse/core'\nimport ElCascaderPanel from '@element-plus/components/cascader-panel'\nimport ElInput from '@element-plus/components/input'\nimport ElTooltip from '@element-plus/components/tooltip'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport ElTag from '@element-plus/components/tag'\nimport ElIcon from '@element-plus/components/icon'\nimport { useFormItem, useFormSize } from '@element-plus/components/form'\nimport { ClickOutside as vClickoutside } from '@element-plus/directives'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { debugWarn, focusNode, getSibling, isKorean } from '@element-plus/utils'\nimport {\n  CHANGE_EVENT,\n  EVENT_CODE,\n  UPDATE_MODEL_EVENT,\n} from '@element-plus/constants'\nimport { ArrowDown, Check, CircleClose } from '@element-plus/icons-vue'\nimport { cascaderEmits, cascaderProps } from './cascader'\n\nimport type { Options } from '@element-plus/components/popper'\nimport type { ComputedRef, Ref, StyleValue } from 'vue'\nimport type { TooltipInstance } from '@element-plus/components/tooltip'\nimport type { InputInstance } from '@element-plus/components/input'\nimport type { ScrollbarInstance } from '@element-plus/components/scrollbar'\nimport type {\n  CascaderNode,\n  CascaderPanelInstance,\n  CascaderValue,\n  Tag,\n} from '@element-plus/components/cascader-panel'\n\nconst popperOptions: Partial<Options> = {\n  modifiers: [\n    {\n      name: 'arrowPosition',\n      enabled: true,\n      phase: 'main',\n      fn: ({ state }) => {\n        const { modifiersData, placement } = state as any\n        if (['right', 'left', 'bottom', 'top'].includes(placement)) return\n        modifiersData.arrow.x = 35\n      },\n      requires: ['arrow'],\n    },\n  ],\n}\nconst COMPONENT_NAME = 'ElCascader'\n\ndefineOptions({\n  name: COMPONENT_NAME,\n})\n\nconst props = defineProps(cascaderProps)\nconst emit = defineEmits(cascaderEmits)\nconst attrs = useAttrs()\n\nlet inputInitialHeight = 0\nlet pressDeleteCount = 0\n\nconst nsCascader = useNamespace('cascader')\nconst nsInput = useNamespace('input')\n\nconst { t } = useLocale()\nconst { form, formItem } = useFormItem()\n\nconst tooltipRef: Ref<TooltipInstance | null> = ref(null)\nconst input: Ref<InputInstance | null> = ref(null)\nconst tagWrapper = ref(null)\nconst cascaderPanelRef: Ref<CascaderPanelInstance | null> = ref(null)\nconst suggestionPanel: Ref<ScrollbarInstance | null> = ref(null)\nconst popperVisible = ref(false)\nconst inputHover = ref(false)\nconst filtering = ref(false)\nconst filterFocus = ref(false)\nconst inputValue = ref('')\nconst searchInputValue = ref('')\nconst presentTags: Ref<Tag[]> = ref([])\nconst allPresentTags: Ref<Tag[]> = ref([])\nconst suggestions: Ref<CascaderNode[]> = ref([])\nconst isOnComposition = ref(false)\n\nconst cascaderStyle = computed<StyleValue>(() => {\n  return attrs.style as StyleValue\n})\n\nconst isDisabled = computed(() => props.disabled || form?.disabled)\nconst inputPlaceholder = computed(\n  () => props.placeholder || t('el.cascader.placeholder')\n)\nconst currentPlaceholder = computed(() =>\n  searchInputValue.value ||\n  presentTags.value.length > 0 ||\n  isOnComposition.value\n    ? ''\n    : inputPlaceholder.value\n)\nconst realSize = useFormSize()\nconst tagSize = computed(() =>\n  ['small'].includes(realSize.value) ? 'small' : 'default'\n)\nconst multiple = computed(() => !!props.props.multiple)\nconst readonly = computed(() => !props.filterable || multiple.value)\nconst searchKeyword = computed(() =>\n  multiple.value ? searchInputValue.value : inputValue.value\n)\nconst checkedNodes: ComputedRef<CascaderNode[]> = computed(\n  () => cascaderPanelRef.value?.checkedNodes || []\n)\nconst clearBtnVisible = computed(() => {\n  if (\n    !props.clearable ||\n    isDisabled.value ||\n    filtering.value ||\n    !inputHover.value\n  )\n    return false\n\n  return !!checkedNodes.value.length\n})\nconst presentText = computed(() => {\n  const { showAllLevels, separator } = props\n  const nodes = checkedNodes.value\n  return nodes.length\n    ? multiple.value\n      ? ''\n      : nodes[0].calcText(showAllLevels, separator)\n    : ''\n})\n\nconst checkedValue = computed<CascaderValue>({\n  get() {\n    return cloneDeep(props.modelValue) as CascaderValue\n  },\n  set(val) {\n    emit(UPDATE_MODEL_EVENT, val)\n    emit(CHANGE_EVENT, val)\n    if (props.validateEvent) {\n      formItem?.validate('change').catch((err) => debugWarn(err))\n    }\n  },\n})\n\nconst cascaderKls = computed(() => {\n  return [\n    nsCascader.b(),\n    nsCascader.m(realSize.value),\n    nsCascader.is('disabled', isDisabled.value),\n    attrs.class,\n  ]\n})\n\nconst cascaderIconKls = computed(() => {\n  return [\n    nsInput.e('icon'),\n    'icon-arrow-down',\n    nsCascader.is('reverse', popperVisible.value),\n  ]\n})\n\nconst inputClass = computed(() => {\n  return nsCascader.is('focus', popperVisible.value || filterFocus.value)\n})\n\nconst togglePopperVisible = (visible?: boolean) => {\n  if (isDisabled.value) return\n\n  visible = visible ?? !popperVisible.value\n\n  if (visible !== popperVisible.value) {\n    popperVisible.value = visible\n    input.value?.input?.setAttribute('aria-expanded', `${visible}`)\n\n    if (visible) {\n      updatePopperPosition()\n      nextTick(cascaderPanelRef.value?.scrollToExpandingNode)\n    } else if (props.filterable) {\n      syncPresentTextValue()\n    }\n\n    emit('visibleChange', visible)\n  }\n}\n\nconst updatePopperPosition = () => {\n  nextTick(() => {\n    tooltipRef.value?.updatePopper()\n  })\n}\n\nconst hideSuggestionPanel = () => {\n  filtering.value = false\n}\n\nconst genTag = (node: CascaderNode): Tag => {\n  const { showAllLevels, separator } = props\n  return {\n    node,\n    key: node.uid,\n    text: node.calcText(showAllLevels, separator),\n    hitState: false,\n    closable: !isDisabled.value && !node.isDisabled,\n    isCollapseTag: false,\n  }\n}\n\nconst deleteTag = (tag: Tag) => {\n  const node = tag.node as CascaderNode\n  node.doCheck(false)\n  cascaderPanelRef.value?.calculateCheckedValue()\n  emit('removeTag', node.valueByOption)\n}\n\nconst calculatePresentTags = () => {\n  if (!multiple.value) return\n\n  const nodes = checkedNodes.value\n  const tags: Tag[] = []\n\n  const allTags: Tag[] = []\n  nodes.forEach((node) => allTags.push(genTag(node)))\n  allPresentTags.value = allTags\n\n  if (nodes.length) {\n    const [first, ...rest] = nodes\n    const restCount = rest.length\n\n    tags.push(genTag(first))\n\n    if (restCount) {\n      if (props.collapseTags) {\n        tags.push({\n          key: -1,\n          text: `+ ${restCount}`,\n          closable: false,\n          isCollapseTag: true,\n        })\n      } else {\n        rest.forEach((node) => tags.push(genTag(node)))\n      }\n    }\n  }\n\n  presentTags.value = tags\n}\n\nconst calculateSuggestions = () => {\n  const { filterMethod, showAllLevels, separator } = props\n  const res = cascaderPanelRef.value\n    ?.getFlattedNodes(!props.props.checkStrictly)\n    ?.filter((node) => {\n      if (node.isDisabled) return false\n      node.calcText(showAllLevels, separator)\n      return filterMethod(node, searchKeyword.value)\n    })\n\n  if (multiple.value) {\n    presentTags.value.forEach((tag) => {\n      tag.hitState = false\n    })\n    allPresentTags.value.forEach((tag) => {\n      tag.hitState = false\n    })\n  }\n\n  filtering.value = true\n  suggestions.value = res!\n  updatePopperPosition()\n}\n\nconst focusFirstNode = () => {\n  let firstNode!: HTMLElement\n\n  if (filtering.value && suggestionPanel.value) {\n    firstNode = suggestionPanel.value.$el.querySelector(\n      `.${nsCascader.e('suggestion-item')}`\n    )\n  } else {\n    firstNode = cascaderPanelRef.value?.$el.querySelector(\n      `.${nsCascader.b('node')}[tabindex=\"-1\"]`\n    )\n  }\n\n  if (firstNode) {\n    firstNode.focus()\n    !filtering.value && firstNode.click()\n  }\n}\n\nconst updateStyle = () => {\n  const inputInner = input.value?.input\n  const tagWrapperEl = tagWrapper.value\n  const suggestionPanelEl = suggestionPanel.value?.$el\n\n  if (!isClient || !inputInner) return\n\n  if (suggestionPanelEl) {\n    const suggestionList = suggestionPanelEl.querySelector(\n      `.${nsCascader.e('suggestion-list')}`\n    )\n    suggestionList.style.minWidth = `${inputInner.offsetWidth}px`\n  }\n\n  if (tagWrapperEl) {\n    const { offsetHeight } = tagWrapperEl\n    const height =\n      presentTags.value.length > 0\n        ? `${Math.max(offsetHeight + 6, inputInitialHeight)}px`\n        : `${inputInitialHeight}px`\n    inputInner.style.height = height\n    updatePopperPosition()\n  }\n}\n\nconst getCheckedNodes = (leafOnly: boolean) => {\n  return cascaderPanelRef.value?.getCheckedNodes(leafOnly)\n}\n\nconst handleExpandChange = (value: CascaderValue) => {\n  updatePopperPosition()\n  emit('expandChange', value)\n}\n\nconst handleComposition = (event: CompositionEvent) => {\n  const text = (event.target as HTMLInputElement)?.value\n  if (event.type === 'compositionend') {\n    isOnComposition.value = false\n    nextTick(() => handleInput(text))\n  } else {\n    const lastCharacter = text[text.length - 1] || ''\n    isOnComposition.value = !isKorean(lastCharacter)\n  }\n}\n\nconst handleKeyDown = (e: KeyboardEvent) => {\n  if (isOnComposition.value) return\n\n  switch (e.code) {\n    case EVENT_CODE.enter:\n      togglePopperVisible()\n      break\n    case EVENT_CODE.down:\n      togglePopperVisible(true)\n      nextTick(focusFirstNode)\n      e.preventDefault()\n      break\n    case EVENT_CODE.esc:\n      if (popperVisible.value === true) {\n        e.preventDefault()\n        e.stopPropagation()\n        togglePopperVisible(false)\n      }\n      break\n    case EVENT_CODE.tab:\n      togglePopperVisible(false)\n      break\n  }\n}\n\nconst handleClear = () => {\n  cascaderPanelRef.value?.clearCheckedNodes()\n  if (!popperVisible.value && props.filterable) {\n    syncPresentTextValue()\n  }\n  togglePopperVisible(false)\n}\n\nconst syncPresentTextValue = () => {\n  const { value } = presentText\n  inputValue.value = value\n  searchInputValue.value = value\n}\n\nconst handleSuggestionClick = (node: CascaderNode) => {\n  const { checked } = node\n\n  if (multiple.value) {\n    cascaderPanelRef.value?.handleCheckChange(node, !checked, false)\n  } else {\n    !checked && cascaderPanelRef.value?.handleCheckChange(node, true, false)\n    togglePopperVisible(false)\n  }\n}\n\nconst handleSuggestionKeyDown = (e: KeyboardEvent) => {\n  const target = e.target as HTMLElement\n  const { code } = e\n\n  switch (code) {\n    case EVENT_CODE.up:\n    case EVENT_CODE.down: {\n      const distance = code === EVENT_CODE.up ? -1 : 1\n      focusNode(\n        getSibling(\n          target,\n          distance,\n          `.${nsCascader.e('suggestion-item')}[tabindex=\"-1\"]`\n        ) as HTMLElement\n      )\n      break\n    }\n    case EVENT_CODE.enter:\n      target.click()\n      break\n  }\n}\n\nconst handleDelete = () => {\n  const tags = presentTags.value\n  const lastTag = tags[tags.length - 1]\n  pressDeleteCount = searchInputValue.value ? 0 : pressDeleteCount + 1\n\n  if (!lastTag || !pressDeleteCount || (props.collapseTags && tags.length > 1))\n    return\n\n  if (lastTag.hitState) {\n    deleteTag(lastTag)\n  } else {\n    lastTag.hitState = true\n  }\n}\n\nconst handleFocus = (e: FocusEvent) => {\n  const el = e.target as HTMLInputElement\n  const name = nsCascader.e('search-input')\n  if (el.className === name) {\n    filterFocus.value = true\n  }\n  emit('focus', e)\n}\n\nconst handleBlur = (e: FocusEvent) => {\n  filterFocus.value = false\n  emit('blur', e)\n}\n\nconst handleFilter = debounce(() => {\n  const { value } = searchKeyword\n\n  if (!value) return\n\n  const passed = props.beforeFilter(value)\n\n  if (isPromise(passed)) {\n    passed.then(calculateSuggestions).catch(() => {\n      /* prevent log error */\n    })\n  } else if (passed !== false) {\n    calculateSuggestions()\n  } else {\n    hideSuggestionPanel()\n  }\n}, props.debounce)\n\nconst handleInput = (val: string, e?: KeyboardEvent) => {\n  !popperVisible.value && togglePopperVisible(true)\n\n  if (e?.isComposing) return\n\n  val ? handleFilter() : hideSuggestionPanel()\n}\n\nwatch(filtering, updatePopperPosition)\n\nwatch([checkedNodes, isDisabled], calculatePresentTags)\n\nwatch(presentTags, () => {\n  nextTick(() => updateStyle())\n})\n\nwatch(presentText, syncPresentTextValue, { immediate: true })\n\nonMounted(() => {\n  const inputInner = input.value!.input!\n\n  const inputInnerHeight =\n    Number.parseFloat(\n      useCssVar(nsInput.cssVarName('input-height'), inputInner).value\n    ) - 2\n\n  inputInitialHeight = inputInner.offsetHeight || inputInnerHeight\n  useResizeObserver(inputInner, updateStyle)\n})\n\ndefineExpose({\n  /**\n   * @description get an array of currently selected node,(leafOnly) whether only return the leaf checked nodes, default is `false`\n   */\n  getCheckedNodes,\n  /**\n   * @description cascader panel ref\n   */\n  cascaderPanelRef,\n  /**\n   * @description toggle the visible of popper\n   */\n  togglePopperVisible,\n})\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}