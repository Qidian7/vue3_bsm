{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nfunction normalize(a) {\n  if (!(a instanceof Array)) {\n    a = [a, a];\n  }\n  return a;\n}\nfunction _default(ecModel) {\n  ecModel.eachSeriesByType('graph', function (seriesModel) {\n    var graph = seriesModel.getGraph();\n    var edgeData = seriesModel.getEdgeData();\n    var symbolType = normalize(seriesModel.get('edgeSymbol'));\n    var symbolSize = normalize(seriesModel.get('edgeSymbolSize'));\n    var colorQuery = 'lineStyle.color'.split('.');\n    var opacityQuery = 'lineStyle.opacity'.split('.');\n    edgeData.setVisual('fromSymbol', symbolType && symbolType[0]);\n    edgeData.setVisual('toSymbol', symbolType && symbolType[1]);\n    edgeData.setVisual('fromSymbolSize', symbolSize && symbolSize[0]);\n    edgeData.setVisual('toSymbolSize', symbolSize && symbolSize[1]);\n    edgeData.setVisual('color', seriesModel.get(colorQuery));\n    edgeData.setVisual('opacity', seriesModel.get(opacityQuery));\n    edgeData.each(function (idx) {\n      var itemModel = edgeData.getItemModel(idx);\n      var edge = graph.getEdgeByIndex(idx);\n      var symbolType = normalize(itemModel.getShallow('symbol', true));\n      var symbolSize = normalize(itemModel.getShallow('symbolSize', true)); // Edge visual must after node visual\n\n      var color = itemModel.get(colorQuery);\n      var opacity = itemModel.get(opacityQuery);\n      switch (color) {\n        case 'source':\n          color = edge.node1.getVisual('color');\n          break;\n        case 'target':\n          color = edge.node2.getVisual('color');\n          break;\n      }\n      symbolType[0] && edge.setVisual('fromSymbol', symbolType[0]);\n      symbolType[1] && edge.setVisual('toSymbol', symbolType[1]);\n      symbolSize[0] && edge.setVisual('fromSymbolSize', symbolSize[0]);\n      symbolSize[1] && edge.setVisual('toSymbolSize', symbolSize[1]);\n      edge.setVisual('color', color);\n      edge.setVisual('opacity', opacity);\n    });\n  });\n}\nmodule.exports = _default;","map":{"version":3,"names":["normalize","a","Array","_default","ecModel","eachSeriesByType","seriesModel","graph","getGraph","edgeData","getEdgeData","symbolType","get","symbolSize","colorQuery","split","opacityQuery","setVisual","each","idx","itemModel","getItemModel","edge","getEdgeByIndex","getShallow","color","opacity","node1","getVisual","node2","module","exports"],"sources":["/Users/mac/Desktop/vue_bsm/vue3_bsm/node_modules/echarts/lib/chart/graph/edgeVisual.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nfunction normalize(a) {\n  if (!(a instanceof Array)) {\n    a = [a, a];\n  }\n\n  return a;\n}\n\nfunction _default(ecModel) {\n  ecModel.eachSeriesByType('graph', function (seriesModel) {\n    var graph = seriesModel.getGraph();\n    var edgeData = seriesModel.getEdgeData();\n    var symbolType = normalize(seriesModel.get('edgeSymbol'));\n    var symbolSize = normalize(seriesModel.get('edgeSymbolSize'));\n    var colorQuery = 'lineStyle.color'.split('.');\n    var opacityQuery = 'lineStyle.opacity'.split('.');\n    edgeData.setVisual('fromSymbol', symbolType && symbolType[0]);\n    edgeData.setVisual('toSymbol', symbolType && symbolType[1]);\n    edgeData.setVisual('fromSymbolSize', symbolSize && symbolSize[0]);\n    edgeData.setVisual('toSymbolSize', symbolSize && symbolSize[1]);\n    edgeData.setVisual('color', seriesModel.get(colorQuery));\n    edgeData.setVisual('opacity', seriesModel.get(opacityQuery));\n    edgeData.each(function (idx) {\n      var itemModel = edgeData.getItemModel(idx);\n      var edge = graph.getEdgeByIndex(idx);\n      var symbolType = normalize(itemModel.getShallow('symbol', true));\n      var symbolSize = normalize(itemModel.getShallow('symbolSize', true)); // Edge visual must after node visual\n\n      var color = itemModel.get(colorQuery);\n      var opacity = itemModel.get(opacityQuery);\n\n      switch (color) {\n        case 'source':\n          color = edge.node1.getVisual('color');\n          break;\n\n        case 'target':\n          color = edge.node2.getVisual('color');\n          break;\n      }\n\n      symbolType[0] && edge.setVisual('fromSymbol', symbolType[0]);\n      symbolType[1] && edge.setVisual('toSymbol', symbolType[1]);\n      symbolSize[0] && edge.setVisual('fromSymbolSize', symbolSize[0]);\n      symbolSize[1] && edge.setVisual('toSymbolSize', symbolSize[1]);\n      edge.setVisual('color', color);\n      edge.setVisual('opacity', opacity);\n    });\n  });\n}\n\nmodule.exports = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}