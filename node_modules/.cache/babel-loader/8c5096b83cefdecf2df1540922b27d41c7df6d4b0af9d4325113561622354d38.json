{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/*\n* A third-party license is embeded for some of the code in this file:\n* The method \"quantile\" was copied from \"d3.js\".\n* (See more details in the comment of the method below.)\n* The use of the source code of this file is also subject to the terms\n* and consitions of the license of \"d3.js\" (BSD-3Clause, see\n* </licenses/LICENSE-d3>).\n*/\nvar RADIAN_EPSILON = 1e-4;\nfunction _trim(str) {\n  return str.replace(/^\\s+|\\s+$/g, '');\n}\n/**\n * Linear mapping a value from domain to range\n * @memberOf module:echarts/util/number\n * @param  {(number|Array.<number>)} val\n * @param  {Array.<number>} domain Domain extent domain[0] can be bigger than domain[1]\n * @param  {Array.<number>} range  Range extent range[0] can be bigger than range[1]\n * @param  {boolean} clamp\n * @return {(number|Array.<number>}\n */\n\nfunction linearMap(val, domain, range, clamp) {\n  var subDomain = domain[1] - domain[0];\n  var subRange = range[1] - range[0];\n  if (subDomain === 0) {\n    return subRange === 0 ? range[0] : (range[0] + range[1]) / 2;\n  } // Avoid accuracy problem in edge, such as\n  // 146.39 - 62.83 === 83.55999999999999.\n  // See echarts/test/ut/spec/util/number.js#linearMap#accuracyError\n  // It is a little verbose for efficiency considering this method\n  // is a hotspot.\n\n  if (clamp) {\n    if (subDomain > 0) {\n      if (val <= domain[0]) {\n        return range[0];\n      } else if (val >= domain[1]) {\n        return range[1];\n      }\n    } else {\n      if (val >= domain[0]) {\n        return range[0];\n      } else if (val <= domain[1]) {\n        return range[1];\n      }\n    }\n  } else {\n    if (val === domain[0]) {\n      return range[0];\n    }\n    if (val === domain[1]) {\n      return range[1];\n    }\n  }\n  return (val - domain[0]) / subDomain * subRange + range[0];\n}\n/**\n * Convert a percent string to absolute number.\n * Returns NaN if percent is not a valid string or number\n * @memberOf module:echarts/util/number\n * @param {string|number} percent\n * @param {number} all\n * @return {number}\n */\n\nfunction parsePercent(percent, all) {\n  switch (percent) {\n    case 'center':\n    case 'middle':\n      percent = '50%';\n      break;\n    case 'left':\n    case 'top':\n      percent = '0%';\n      break;\n    case 'right':\n    case 'bottom':\n      percent = '100%';\n      break;\n  }\n  if (typeof percent === 'string') {\n    if (_trim(percent).match(/%$/)) {\n      return parseFloat(percent) / 100 * all;\n    }\n    return parseFloat(percent);\n  }\n  return percent == null ? NaN : +percent;\n}\n/**\n * (1) Fix rounding error of float numbers.\n * (2) Support return string to avoid scientific notation like '3.5e-7'.\n *\n * @param {number} x\n * @param {number} [precision]\n * @param {boolean} [returnStr]\n * @return {number|string}\n */\n\nfunction round(x, precision, returnStr) {\n  if (precision == null) {\n    precision = 10;\n  } // Avoid range error\n\n  precision = Math.min(Math.max(0, precision), 20);\n  x = (+x).toFixed(precision);\n  return returnStr ? x : +x;\n}\n/**\n * asc sort arr.\n * The input arr will be modified.\n *\n * @param {Array} arr\n * @return {Array} The input arr.\n */\n\nfunction asc(arr) {\n  arr.sort(function (a, b) {\n    return a - b;\n  });\n  return arr;\n}\n/**\n * Get precision\n * @param {number} val\n */\n\nfunction getPrecision(val) {\n  val = +val;\n  if (isNaN(val)) {\n    return 0;\n  } // It is much faster than methods converting number to string as follows\n  //      var tmp = val.toString();\n  //      return tmp.length - 1 - tmp.indexOf('.');\n  // especially when precision is low\n\n  var e = 1;\n  var count = 0;\n  while (Math.round(val * e) / e !== val) {\n    e *= 10;\n    count++;\n  }\n  return count;\n}\n/**\n * @param {string|number} val\n * @return {number}\n */\n\nfunction getPrecisionSafe(val) {\n  var str = val.toString(); // Consider scientific notation: '3.4e-12' '3.4e+12'\n\n  var eIndex = str.indexOf('e');\n  if (eIndex > 0) {\n    var precision = +str.slice(eIndex + 1);\n    return precision < 0 ? -precision : 0;\n  } else {\n    var dotIndex = str.indexOf('.');\n    return dotIndex < 0 ? 0 : str.length - 1 - dotIndex;\n  }\n}\n/**\n * Minimal dicernible data precisioin according to a single pixel.\n *\n * @param {Array.<number>} dataExtent\n * @param {Array.<number>} pixelExtent\n * @return {number} precision\n */\n\nfunction getPixelPrecision(dataExtent, pixelExtent) {\n  var log = Math.log;\n  var LN10 = Math.LN10;\n  var dataQuantity = Math.floor(log(dataExtent[1] - dataExtent[0]) / LN10);\n  var sizeQuantity = Math.round(log(Math.abs(pixelExtent[1] - pixelExtent[0])) / LN10); // toFixed() digits argument must be between 0 and 20.\n\n  var precision = Math.min(Math.max(-dataQuantity + sizeQuantity, 0), 20);\n  return !isFinite(precision) ? 20 : precision;\n}\n/**\n * Get a data of given precision, assuring the sum of percentages\n * in valueList is 1.\n * The largest remainer method is used.\n * https://en.wikipedia.org/wiki/Largest_remainder_method\n *\n * @param {Array.<number>} valueList a list of all data\n * @param {number} idx index of the data to be processed in valueList\n * @param {number} precision integer number showing digits of precision\n * @return {number} percent ranging from 0 to 100\n */\n\nfunction getPercentWithPrecision(valueList, idx, precision) {\n  if (!valueList[idx]) {\n    return 0;\n  }\n  var sum = zrUtil.reduce(valueList, function (acc, val) {\n    return acc + (isNaN(val) ? 0 : val);\n  }, 0);\n  if (sum === 0) {\n    return 0;\n  }\n  var digits = Math.pow(10, precision);\n  var votesPerQuota = zrUtil.map(valueList, function (val) {\n    return (isNaN(val) ? 0 : val) / sum * digits * 100;\n  });\n  var targetSeats = digits * 100;\n  var seats = zrUtil.map(votesPerQuota, function (votes) {\n    // Assign automatic seats.\n    return Math.floor(votes);\n  });\n  var currentSum = zrUtil.reduce(seats, function (acc, val) {\n    return acc + val;\n  }, 0);\n  var remainder = zrUtil.map(votesPerQuota, function (votes, idx) {\n    return votes - seats[idx];\n  }); // Has remainding votes.\n\n  while (currentSum < targetSeats) {\n    // Find next largest remainder.\n    var max = Number.NEGATIVE_INFINITY;\n    var maxId = null;\n    for (var i = 0, len = remainder.length; i < len; ++i) {\n      if (remainder[i] > max) {\n        max = remainder[i];\n        maxId = i;\n      }\n    } // Add a vote to max remainder.\n\n    ++seats[maxId];\n    remainder[maxId] = 0;\n    ++currentSum;\n  }\n  return seats[idx] / digits;\n} // Number.MAX_SAFE_INTEGER, ie do not support.\n\nvar MAX_SAFE_INTEGER = 9007199254740991;\n/**\n * To 0 - 2 * PI, considering negative radian.\n * @param {number} radian\n * @return {number}\n */\n\nfunction remRadian(radian) {\n  var pi2 = Math.PI * 2;\n  return (radian % pi2 + pi2) % pi2;\n}\n/**\n * @param {type} radian\n * @return {boolean}\n */\n\nfunction isRadianAroundZero(val) {\n  return val > -RADIAN_EPSILON && val < RADIAN_EPSILON;\n}\n/* eslint-disable */\n\nvar TIME_REG = /^(?:(\\d{4})(?:[-\\/](\\d{1,2})(?:[-\\/](\\d{1,2})(?:[T ](\\d{1,2})(?::(\\d\\d)(?::(\\d\\d)(?:[.,](\\d+))?)?)?(Z|[\\+\\-]\\d\\d:?\\d\\d)?)?)?)?)?$/; // jshint ignore:line\n\n/* eslint-enable */\n\n/**\n * @param {string|Date|number} value These values can be accepted:\n *   + An instance of Date, represent a time in its own time zone.\n *   + Or string in a subset of ISO 8601, only including:\n *     + only year, month, date: '2012-03', '2012-03-01', '2012-03-01 05', '2012-03-01 05:06',\n *     + separated with T or space: '2012-03-01T12:22:33.123', '2012-03-01 12:22:33.123',\n *     + time zone: '2012-03-01T12:22:33Z', '2012-03-01T12:22:33+8000', '2012-03-01T12:22:33-05:00',\n *     all of which will be treated as local time if time zone is not specified\n *     (see <https://momentjs.com/>).\n *   + Or other string format, including (all of which will be treated as loacal time):\n *     '2012', '2012-3-1', '2012/3/1', '2012/03/01',\n *     '2009/6/12 2:00', '2009/6/12 2:05:08', '2009/6/12 2:05:08.123'\n *   + a timestamp, which represent a time in UTC.\n * @return {Date} date\n */\n\nfunction parseDate(value) {\n  if (value instanceof Date) {\n    return value;\n  } else if (typeof value === 'string') {\n    // Different browsers parse date in different way, so we parse it manually.\n    // Some other issues:\n    // new Date('1970-01-01') is UTC,\n    // new Date('1970/01/01') and new Date('1970-1-01') is local.\n    // See issue #3623\n    var match = TIME_REG.exec(value);\n    if (!match) {\n      // return Invalid Date.\n      return new Date(NaN);\n    } // Use local time when no timezone offset specifed.\n\n    if (!match[8]) {\n      // match[n] can only be string or undefined.\n      // But take care of '12' + 1 => '121'.\n      return new Date(+match[1], +(match[2] || 1) - 1, +match[3] || 1, +match[4] || 0, +(match[5] || 0), +match[6] || 0, +match[7] || 0);\n    } // Timezoneoffset of Javascript Date has considered DST (Daylight Saving Time,\n    // https://tc39.github.io/ecma262/#sec-daylight-saving-time-adjustment).\n    // For example, system timezone is set as \"Time Zone: America/Toronto\",\n    // then these code will get different result:\n    // `new Date(1478411999999).getTimezoneOffset();  // get 240`\n    // `new Date(1478412000000).getTimezoneOffset();  // get 300`\n    // So we should not use `new Date`, but use `Date.UTC`.\n    else {\n      var hour = +match[4] || 0;\n      if (match[8].toUpperCase() !== 'Z') {\n        hour -= match[8].slice(0, 3);\n      }\n      return new Date(Date.UTC(+match[1], +(match[2] || 1) - 1, +match[3] || 1, hour, +(match[5] || 0), +match[6] || 0, +match[7] || 0));\n    }\n  } else if (value == null) {\n    return new Date(NaN);\n  }\n  return new Date(Math.round(value));\n}\n/**\n * Quantity of a number. e.g. 0.1, 1, 10, 100\n *\n * @param  {number} val\n * @return {number}\n */\n\nfunction quantity(val) {\n  return Math.pow(10, quantityExponent(val));\n}\n/**\n * Exponent of the quantity of a number\n * e.g., 1234 equals to 1.234*10^3, so quantityExponent(1234) is 3\n *\n * @param  {number} val non-negative value\n * @return {number}\n */\n\nfunction quantityExponent(val) {\n  if (val === 0) {\n    return 0;\n  }\n  var exp = Math.floor(Math.log(val) / Math.LN10);\n  /**\n   * exp is expected to be the rounded-down result of the base-10 log of val.\n   * But due to the precision loss with Math.log(val), we need to restore it\n   * using 10^exp to make sure we can get val back from exp. #11249\n   */\n\n  if (val / Math.pow(10, exp) >= 10) {\n    exp++;\n  }\n  return exp;\n}\n/**\n * find a “nice” number approximately equal to x. Round the number if round = true,\n * take ceiling if round = false. The primary observation is that the “nicest”\n * numbers in decimal are 1, 2, and 5, and all power-of-ten multiples of these numbers.\n *\n * See \"Nice Numbers for Graph Labels\" of Graphic Gems.\n *\n * @param  {number} val Non-negative value.\n * @param  {boolean} round\n * @return {number}\n */\n\nfunction nice(val, round) {\n  var exponent = quantityExponent(val);\n  var exp10 = Math.pow(10, exponent);\n  var f = val / exp10; // 1 <= f < 10\n\n  var nf;\n  if (round) {\n    if (f < 1.5) {\n      nf = 1;\n    } else if (f < 2.5) {\n      nf = 2;\n    } else if (f < 4) {\n      nf = 3;\n    } else if (f < 7) {\n      nf = 5;\n    } else {\n      nf = 10;\n    }\n  } else {\n    if (f < 1) {\n      nf = 1;\n    } else if (f < 2) {\n      nf = 2;\n    } else if (f < 3) {\n      nf = 3;\n    } else if (f < 5) {\n      nf = 5;\n    } else {\n      nf = 10;\n    }\n  }\n  val = nf * exp10; // Fix 3 * 0.1 === 0.30000000000000004 issue (see IEEE 754).\n  // 20 is the uppper bound of toFixed.\n\n  return exponent >= -20 ? +val.toFixed(exponent < 0 ? -exponent : 0) : val;\n}\n/**\n * This code was copied from \"d3.js\"\n * <https://github.com/d3/d3/blob/9cc9a875e636a1dcf36cc1e07bdf77e1ad6e2c74/src/arrays/quantile.js>.\n * See the license statement at the head of this file.\n * @param {Array.<number>} ascArr\n */\n\nfunction quantile(ascArr, p) {\n  var H = (ascArr.length - 1) * p + 1;\n  var h = Math.floor(H);\n  var v = +ascArr[h - 1];\n  var e = H - h;\n  return e ? v + e * (ascArr[h] - v) : v;\n}\n/**\n * Order intervals asc, and split them when overlap.\n * expect(numberUtil.reformIntervals([\n *     {interval: [18, 62], close: [1, 1]},\n *     {interval: [-Infinity, -70], close: [0, 0]},\n *     {interval: [-70, -26], close: [1, 1]},\n *     {interval: [-26, 18], close: [1, 1]},\n *     {interval: [62, 150], close: [1, 1]},\n *     {interval: [106, 150], close: [1, 1]},\n *     {interval: [150, Infinity], close: [0, 0]}\n * ])).toEqual([\n *     {interval: [-Infinity, -70], close: [0, 0]},\n *     {interval: [-70, -26], close: [1, 1]},\n *     {interval: [-26, 18], close: [0, 1]},\n *     {interval: [18, 62], close: [0, 1]},\n *     {interval: [62, 150], close: [0, 1]},\n *     {interval: [150, Infinity], close: [0, 0]}\n * ]);\n * @param {Array.<Object>} list, where `close` mean open or close\n *        of the interval, and Infinity can be used.\n * @return {Array.<Object>} The origin list, which has been reformed.\n */\n\nfunction reformIntervals(list) {\n  list.sort(function (a, b) {\n    return littleThan(a, b, 0) ? -1 : 1;\n  });\n  var curr = -Infinity;\n  var currClose = 1;\n  for (var i = 0; i < list.length;) {\n    var interval = list[i].interval;\n    var close = list[i].close;\n    for (var lg = 0; lg < 2; lg++) {\n      if (interval[lg] <= curr) {\n        interval[lg] = curr;\n        close[lg] = !lg ? 1 - currClose : 1;\n      }\n      curr = interval[lg];\n      currClose = close[lg];\n    }\n    if (interval[0] === interval[1] && close[0] * close[1] !== 1) {\n      list.splice(i, 1);\n    } else {\n      i++;\n    }\n  }\n  return list;\n  function littleThan(a, b, lg) {\n    return a.interval[lg] < b.interval[lg] || a.interval[lg] === b.interval[lg] && (a.close[lg] - b.close[lg] === (!lg ? 1 : -1) || !lg && littleThan(a, b, 1));\n  }\n}\n/**\n * parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n * ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n * subtraction forces infinities to NaN\n *\n * @param {*} v\n * @return {boolean}\n */\n\nfunction isNumeric(v) {\n  return v - parseFloat(v) >= 0;\n}\nexports.linearMap = linearMap;\nexports.parsePercent = parsePercent;\nexports.round = round;\nexports.asc = asc;\nexports.getPrecision = getPrecision;\nexports.getPrecisionSafe = getPrecisionSafe;\nexports.getPixelPrecision = getPixelPrecision;\nexports.getPercentWithPrecision = getPercentWithPrecision;\nexports.MAX_SAFE_INTEGER = MAX_SAFE_INTEGER;\nexports.remRadian = remRadian;\nexports.isRadianAroundZero = isRadianAroundZero;\nexports.parseDate = parseDate;\nexports.quantity = quantity;\nexports.quantityExponent = quantityExponent;\nexports.nice = nice;\nexports.quantile = quantile;\nexports.reformIntervals = reformIntervals;\nexports.isNumeric = isNumeric;","map":{"version":3,"names":["zrUtil","require","RADIAN_EPSILON","_trim","str","replace","linearMap","val","domain","range","clamp","subDomain","subRange","parsePercent","percent","all","match","parseFloat","NaN","round","x","precision","returnStr","Math","min","max","toFixed","asc","arr","sort","a","b","getPrecision","isNaN","e","count","getPrecisionSafe","toString","eIndex","indexOf","slice","dotIndex","length","getPixelPrecision","dataExtent","pixelExtent","log","LN10","dataQuantity","floor","sizeQuantity","abs","isFinite","getPercentWithPrecision","valueList","idx","sum","reduce","acc","digits","pow","votesPerQuota","map","targetSeats","seats","votes","currentSum","remainder","Number","NEGATIVE_INFINITY","maxId","i","len","MAX_SAFE_INTEGER","remRadian","radian","pi2","PI","isRadianAroundZero","TIME_REG","parseDate","value","Date","exec","hour","toUpperCase","UTC","quantity","quantityExponent","exp","nice","exponent","exp10","f","nf","quantile","ascArr","p","H","h","v","reformIntervals","list","littleThan","curr","Infinity","currClose","interval","close","lg","splice","isNumeric","exports"],"sources":["/Users/mac/Desktop/vue_bsm/vue3_bsm/node_modules/echarts/lib/util/number.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/*\n* A third-party license is embeded for some of the code in this file:\n* The method \"quantile\" was copied from \"d3.js\".\n* (See more details in the comment of the method below.)\n* The use of the source code of this file is also subject to the terms\n* and consitions of the license of \"d3.js\" (BSD-3Clause, see\n* </licenses/LICENSE-d3>).\n*/\nvar RADIAN_EPSILON = 1e-4;\n\nfunction _trim(str) {\n  return str.replace(/^\\s+|\\s+$/g, '');\n}\n/**\n * Linear mapping a value from domain to range\n * @memberOf module:echarts/util/number\n * @param  {(number|Array.<number>)} val\n * @param  {Array.<number>} domain Domain extent domain[0] can be bigger than domain[1]\n * @param  {Array.<number>} range  Range extent range[0] can be bigger than range[1]\n * @param  {boolean} clamp\n * @return {(number|Array.<number>}\n */\n\n\nfunction linearMap(val, domain, range, clamp) {\n  var subDomain = domain[1] - domain[0];\n  var subRange = range[1] - range[0];\n\n  if (subDomain === 0) {\n    return subRange === 0 ? range[0] : (range[0] + range[1]) / 2;\n  } // Avoid accuracy problem in edge, such as\n  // 146.39 - 62.83 === 83.55999999999999.\n  // See echarts/test/ut/spec/util/number.js#linearMap#accuracyError\n  // It is a little verbose for efficiency considering this method\n  // is a hotspot.\n\n\n  if (clamp) {\n    if (subDomain > 0) {\n      if (val <= domain[0]) {\n        return range[0];\n      } else if (val >= domain[1]) {\n        return range[1];\n      }\n    } else {\n      if (val >= domain[0]) {\n        return range[0];\n      } else if (val <= domain[1]) {\n        return range[1];\n      }\n    }\n  } else {\n    if (val === domain[0]) {\n      return range[0];\n    }\n\n    if (val === domain[1]) {\n      return range[1];\n    }\n  }\n\n  return (val - domain[0]) / subDomain * subRange + range[0];\n}\n/**\n * Convert a percent string to absolute number.\n * Returns NaN if percent is not a valid string or number\n * @memberOf module:echarts/util/number\n * @param {string|number} percent\n * @param {number} all\n * @return {number}\n */\n\n\nfunction parsePercent(percent, all) {\n  switch (percent) {\n    case 'center':\n    case 'middle':\n      percent = '50%';\n      break;\n\n    case 'left':\n    case 'top':\n      percent = '0%';\n      break;\n\n    case 'right':\n    case 'bottom':\n      percent = '100%';\n      break;\n  }\n\n  if (typeof percent === 'string') {\n    if (_trim(percent).match(/%$/)) {\n      return parseFloat(percent) / 100 * all;\n    }\n\n    return parseFloat(percent);\n  }\n\n  return percent == null ? NaN : +percent;\n}\n/**\n * (1) Fix rounding error of float numbers.\n * (2) Support return string to avoid scientific notation like '3.5e-7'.\n *\n * @param {number} x\n * @param {number} [precision]\n * @param {boolean} [returnStr]\n * @return {number|string}\n */\n\n\nfunction round(x, precision, returnStr) {\n  if (precision == null) {\n    precision = 10;\n  } // Avoid range error\n\n\n  precision = Math.min(Math.max(0, precision), 20);\n  x = (+x).toFixed(precision);\n  return returnStr ? x : +x;\n}\n/**\n * asc sort arr.\n * The input arr will be modified.\n *\n * @param {Array} arr\n * @return {Array} The input arr.\n */\n\n\nfunction asc(arr) {\n  arr.sort(function (a, b) {\n    return a - b;\n  });\n  return arr;\n}\n/**\n * Get precision\n * @param {number} val\n */\n\n\nfunction getPrecision(val) {\n  val = +val;\n\n  if (isNaN(val)) {\n    return 0;\n  } // It is much faster than methods converting number to string as follows\n  //      var tmp = val.toString();\n  //      return tmp.length - 1 - tmp.indexOf('.');\n  // especially when precision is low\n\n\n  var e = 1;\n  var count = 0;\n\n  while (Math.round(val * e) / e !== val) {\n    e *= 10;\n    count++;\n  }\n\n  return count;\n}\n/**\n * @param {string|number} val\n * @return {number}\n */\n\n\nfunction getPrecisionSafe(val) {\n  var str = val.toString(); // Consider scientific notation: '3.4e-12' '3.4e+12'\n\n  var eIndex = str.indexOf('e');\n\n  if (eIndex > 0) {\n    var precision = +str.slice(eIndex + 1);\n    return precision < 0 ? -precision : 0;\n  } else {\n    var dotIndex = str.indexOf('.');\n    return dotIndex < 0 ? 0 : str.length - 1 - dotIndex;\n  }\n}\n/**\n * Minimal dicernible data precisioin according to a single pixel.\n *\n * @param {Array.<number>} dataExtent\n * @param {Array.<number>} pixelExtent\n * @return {number} precision\n */\n\n\nfunction getPixelPrecision(dataExtent, pixelExtent) {\n  var log = Math.log;\n  var LN10 = Math.LN10;\n  var dataQuantity = Math.floor(log(dataExtent[1] - dataExtent[0]) / LN10);\n  var sizeQuantity = Math.round(log(Math.abs(pixelExtent[1] - pixelExtent[0])) / LN10); // toFixed() digits argument must be between 0 and 20.\n\n  var precision = Math.min(Math.max(-dataQuantity + sizeQuantity, 0), 20);\n  return !isFinite(precision) ? 20 : precision;\n}\n/**\n * Get a data of given precision, assuring the sum of percentages\n * in valueList is 1.\n * The largest remainer method is used.\n * https://en.wikipedia.org/wiki/Largest_remainder_method\n *\n * @param {Array.<number>} valueList a list of all data\n * @param {number} idx index of the data to be processed in valueList\n * @param {number} precision integer number showing digits of precision\n * @return {number} percent ranging from 0 to 100\n */\n\n\nfunction getPercentWithPrecision(valueList, idx, precision) {\n  if (!valueList[idx]) {\n    return 0;\n  }\n\n  var sum = zrUtil.reduce(valueList, function (acc, val) {\n    return acc + (isNaN(val) ? 0 : val);\n  }, 0);\n\n  if (sum === 0) {\n    return 0;\n  }\n\n  var digits = Math.pow(10, precision);\n  var votesPerQuota = zrUtil.map(valueList, function (val) {\n    return (isNaN(val) ? 0 : val) / sum * digits * 100;\n  });\n  var targetSeats = digits * 100;\n  var seats = zrUtil.map(votesPerQuota, function (votes) {\n    // Assign automatic seats.\n    return Math.floor(votes);\n  });\n  var currentSum = zrUtil.reduce(seats, function (acc, val) {\n    return acc + val;\n  }, 0);\n  var remainder = zrUtil.map(votesPerQuota, function (votes, idx) {\n    return votes - seats[idx];\n  }); // Has remainding votes.\n\n  while (currentSum < targetSeats) {\n    // Find next largest remainder.\n    var max = Number.NEGATIVE_INFINITY;\n    var maxId = null;\n\n    for (var i = 0, len = remainder.length; i < len; ++i) {\n      if (remainder[i] > max) {\n        max = remainder[i];\n        maxId = i;\n      }\n    } // Add a vote to max remainder.\n\n\n    ++seats[maxId];\n    remainder[maxId] = 0;\n    ++currentSum;\n  }\n\n  return seats[idx] / digits;\n} // Number.MAX_SAFE_INTEGER, ie do not support.\n\n\nvar MAX_SAFE_INTEGER = 9007199254740991;\n/**\n * To 0 - 2 * PI, considering negative radian.\n * @param {number} radian\n * @return {number}\n */\n\nfunction remRadian(radian) {\n  var pi2 = Math.PI * 2;\n  return (radian % pi2 + pi2) % pi2;\n}\n/**\n * @param {type} radian\n * @return {boolean}\n */\n\n\nfunction isRadianAroundZero(val) {\n  return val > -RADIAN_EPSILON && val < RADIAN_EPSILON;\n}\n/* eslint-disable */\n\n\nvar TIME_REG = /^(?:(\\d{4})(?:[-\\/](\\d{1,2})(?:[-\\/](\\d{1,2})(?:[T ](\\d{1,2})(?::(\\d\\d)(?::(\\d\\d)(?:[.,](\\d+))?)?)?(Z|[\\+\\-]\\d\\d:?\\d\\d)?)?)?)?)?$/; // jshint ignore:line\n\n/* eslint-enable */\n\n/**\n * @param {string|Date|number} value These values can be accepted:\n *   + An instance of Date, represent a time in its own time zone.\n *   + Or string in a subset of ISO 8601, only including:\n *     + only year, month, date: '2012-03', '2012-03-01', '2012-03-01 05', '2012-03-01 05:06',\n *     + separated with T or space: '2012-03-01T12:22:33.123', '2012-03-01 12:22:33.123',\n *     + time zone: '2012-03-01T12:22:33Z', '2012-03-01T12:22:33+8000', '2012-03-01T12:22:33-05:00',\n *     all of which will be treated as local time if time zone is not specified\n *     (see <https://momentjs.com/>).\n *   + Or other string format, including (all of which will be treated as loacal time):\n *     '2012', '2012-3-1', '2012/3/1', '2012/03/01',\n *     '2009/6/12 2:00', '2009/6/12 2:05:08', '2009/6/12 2:05:08.123'\n *   + a timestamp, which represent a time in UTC.\n * @return {Date} date\n */\n\nfunction parseDate(value) {\n  if (value instanceof Date) {\n    return value;\n  } else if (typeof value === 'string') {\n    // Different browsers parse date in different way, so we parse it manually.\n    // Some other issues:\n    // new Date('1970-01-01') is UTC,\n    // new Date('1970/01/01') and new Date('1970-1-01') is local.\n    // See issue #3623\n    var match = TIME_REG.exec(value);\n\n    if (!match) {\n      // return Invalid Date.\n      return new Date(NaN);\n    } // Use local time when no timezone offset specifed.\n\n\n    if (!match[8]) {\n      // match[n] can only be string or undefined.\n      // But take care of '12' + 1 => '121'.\n      return new Date(+match[1], +(match[2] || 1) - 1, +match[3] || 1, +match[4] || 0, +(match[5] || 0), +match[6] || 0, +match[7] || 0);\n    } // Timezoneoffset of Javascript Date has considered DST (Daylight Saving Time,\n    // https://tc39.github.io/ecma262/#sec-daylight-saving-time-adjustment).\n    // For example, system timezone is set as \"Time Zone: America/Toronto\",\n    // then these code will get different result:\n    // `new Date(1478411999999).getTimezoneOffset();  // get 240`\n    // `new Date(1478412000000).getTimezoneOffset();  // get 300`\n    // So we should not use `new Date`, but use `Date.UTC`.\n    else {\n        var hour = +match[4] || 0;\n\n        if (match[8].toUpperCase() !== 'Z') {\n          hour -= match[8].slice(0, 3);\n        }\n\n        return new Date(Date.UTC(+match[1], +(match[2] || 1) - 1, +match[3] || 1, hour, +(match[5] || 0), +match[6] || 0, +match[7] || 0));\n      }\n  } else if (value == null) {\n    return new Date(NaN);\n  }\n\n  return new Date(Math.round(value));\n}\n/**\n * Quantity of a number. e.g. 0.1, 1, 10, 100\n *\n * @param  {number} val\n * @return {number}\n */\n\n\nfunction quantity(val) {\n  return Math.pow(10, quantityExponent(val));\n}\n/**\n * Exponent of the quantity of a number\n * e.g., 1234 equals to 1.234*10^3, so quantityExponent(1234) is 3\n *\n * @param  {number} val non-negative value\n * @return {number}\n */\n\n\nfunction quantityExponent(val) {\n  if (val === 0) {\n    return 0;\n  }\n\n  var exp = Math.floor(Math.log(val) / Math.LN10);\n  /**\n   * exp is expected to be the rounded-down result of the base-10 log of val.\n   * But due to the precision loss with Math.log(val), we need to restore it\n   * using 10^exp to make sure we can get val back from exp. #11249\n   */\n\n  if (val / Math.pow(10, exp) >= 10) {\n    exp++;\n  }\n\n  return exp;\n}\n/**\n * find a “nice” number approximately equal to x. Round the number if round = true,\n * take ceiling if round = false. The primary observation is that the “nicest”\n * numbers in decimal are 1, 2, and 5, and all power-of-ten multiples of these numbers.\n *\n * See \"Nice Numbers for Graph Labels\" of Graphic Gems.\n *\n * @param  {number} val Non-negative value.\n * @param  {boolean} round\n * @return {number}\n */\n\n\nfunction nice(val, round) {\n  var exponent = quantityExponent(val);\n  var exp10 = Math.pow(10, exponent);\n  var f = val / exp10; // 1 <= f < 10\n\n  var nf;\n\n  if (round) {\n    if (f < 1.5) {\n      nf = 1;\n    } else if (f < 2.5) {\n      nf = 2;\n    } else if (f < 4) {\n      nf = 3;\n    } else if (f < 7) {\n      nf = 5;\n    } else {\n      nf = 10;\n    }\n  } else {\n    if (f < 1) {\n      nf = 1;\n    } else if (f < 2) {\n      nf = 2;\n    } else if (f < 3) {\n      nf = 3;\n    } else if (f < 5) {\n      nf = 5;\n    } else {\n      nf = 10;\n    }\n  }\n\n  val = nf * exp10; // Fix 3 * 0.1 === 0.30000000000000004 issue (see IEEE 754).\n  // 20 is the uppper bound of toFixed.\n\n  return exponent >= -20 ? +val.toFixed(exponent < 0 ? -exponent : 0) : val;\n}\n/**\n * This code was copied from \"d3.js\"\n * <https://github.com/d3/d3/blob/9cc9a875e636a1dcf36cc1e07bdf77e1ad6e2c74/src/arrays/quantile.js>.\n * See the license statement at the head of this file.\n * @param {Array.<number>} ascArr\n */\n\n\nfunction quantile(ascArr, p) {\n  var H = (ascArr.length - 1) * p + 1;\n  var h = Math.floor(H);\n  var v = +ascArr[h - 1];\n  var e = H - h;\n  return e ? v + e * (ascArr[h] - v) : v;\n}\n/**\n * Order intervals asc, and split them when overlap.\n * expect(numberUtil.reformIntervals([\n *     {interval: [18, 62], close: [1, 1]},\n *     {interval: [-Infinity, -70], close: [0, 0]},\n *     {interval: [-70, -26], close: [1, 1]},\n *     {interval: [-26, 18], close: [1, 1]},\n *     {interval: [62, 150], close: [1, 1]},\n *     {interval: [106, 150], close: [1, 1]},\n *     {interval: [150, Infinity], close: [0, 0]}\n * ])).toEqual([\n *     {interval: [-Infinity, -70], close: [0, 0]},\n *     {interval: [-70, -26], close: [1, 1]},\n *     {interval: [-26, 18], close: [0, 1]},\n *     {interval: [18, 62], close: [0, 1]},\n *     {interval: [62, 150], close: [0, 1]},\n *     {interval: [150, Infinity], close: [0, 0]}\n * ]);\n * @param {Array.<Object>} list, where `close` mean open or close\n *        of the interval, and Infinity can be used.\n * @return {Array.<Object>} The origin list, which has been reformed.\n */\n\n\nfunction reformIntervals(list) {\n  list.sort(function (a, b) {\n    return littleThan(a, b, 0) ? -1 : 1;\n  });\n  var curr = -Infinity;\n  var currClose = 1;\n\n  for (var i = 0; i < list.length;) {\n    var interval = list[i].interval;\n    var close = list[i].close;\n\n    for (var lg = 0; lg < 2; lg++) {\n      if (interval[lg] <= curr) {\n        interval[lg] = curr;\n        close[lg] = !lg ? 1 - currClose : 1;\n      }\n\n      curr = interval[lg];\n      currClose = close[lg];\n    }\n\n    if (interval[0] === interval[1] && close[0] * close[1] !== 1) {\n      list.splice(i, 1);\n    } else {\n      i++;\n    }\n  }\n\n  return list;\n\n  function littleThan(a, b, lg) {\n    return a.interval[lg] < b.interval[lg] || a.interval[lg] === b.interval[lg] && (a.close[lg] - b.close[lg] === (!lg ? 1 : -1) || !lg && littleThan(a, b, 1));\n  }\n}\n/**\n * parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n * ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n * subtraction forces infinities to NaN\n *\n * @param {*} v\n * @return {boolean}\n */\n\n\nfunction isNumeric(v) {\n  return v - parseFloat(v) >= 0;\n}\n\nexports.linearMap = linearMap;\nexports.parsePercent = parsePercent;\nexports.round = round;\nexports.asc = asc;\nexports.getPrecision = getPrecision;\nexports.getPrecisionSafe = getPrecisionSafe;\nexports.getPixelPrecision = getPixelPrecision;\nexports.getPercentWithPrecision = getPercentWithPrecision;\nexports.MAX_SAFE_INTEGER = MAX_SAFE_INTEGER;\nexports.remRadian = remRadian;\nexports.isRadianAroundZero = isRadianAroundZero;\nexports.parseDate = parseDate;\nexports.quantity = quantity;\nexports.quantityExponent = quantityExponent;\nexports.nice = nice;\nexports.quantile = quantile;\nexports.reformIntervals = reformIntervals;\nexports.isNumeric = isNumeric;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}