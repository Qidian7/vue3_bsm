{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar zrUtil = require(\"zrender/lib/core/util\");\nvar modelUtil = require(\"../util/model\");\nvar ComponentModel = require(\"./Component\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * ECharts option manager\n *\n * @module {echarts/model/OptionManager}\n */\nvar each = zrUtil.each;\nvar clone = zrUtil.clone;\nvar map = zrUtil.map;\nvar merge = zrUtil.merge;\nvar QUERY_REG = /^(min|max)?(.+)$/;\n/**\n * TERM EXPLANATIONS:\n *\n * [option]:\n *\n *     An object that contains definitions of components. For example:\n *     var option = {\n *         title: {...},\n *         legend: {...},\n *         visualMap: {...},\n *         series: [\n *             {data: [...]},\n *             {data: [...]},\n *             ...\n *         ]\n *     };\n *\n * [rawOption]:\n *\n *     An object input to echarts.setOption. 'rawOption' may be an\n *     'option', or may be an object contains multi-options. For example:\n *     var option = {\n *         baseOption: {\n *             title: {...},\n *             legend: {...},\n *             series: [\n *                 {data: [...]},\n *                 {data: [...]},\n *                 ...\n *             ]\n *         },\n *         timeline: {...},\n *         options: [\n *             {title: {...}, series: {data: [...]}},\n *             {title: {...}, series: {data: [...]}},\n *             ...\n *         ],\n *         media: [\n *             {\n *                 query: {maxWidth: 320},\n *                 option: {series: {x: 20}, visualMap: {show: false}}\n *             },\n *             {\n *                 query: {minWidth: 320, maxWidth: 720},\n *                 option: {series: {x: 500}, visualMap: {show: true}}\n *             },\n *             {\n *                 option: {series: {x: 1200}, visualMap: {show: true}}\n *             }\n *         ]\n *     };\n *\n * @alias module:echarts/model/OptionManager\n * @param {module:echarts/ExtensionAPI} api\n */\n\nfunction OptionManager(api) {\n  /**\n   * @private\n   * @type {module:echarts/ExtensionAPI}\n   */\n  this._api = api;\n  /**\n   * @private\n   * @type {Array.<number>}\n   */\n\n  this._timelineOptions = [];\n  /**\n   * @private\n   * @type {Array.<Object>}\n   */\n\n  this._mediaList = [];\n  /**\n   * @private\n   * @type {Object}\n   */\n\n  this._mediaDefault;\n  /**\n   * -1, means default.\n   * empty means no media.\n   * @private\n   * @type {Array.<number>}\n   */\n\n  this._currentMediaIndices = [];\n  /**\n   * @private\n   * @type {Object}\n   */\n\n  this._optionBackup;\n  /**\n   * @private\n   * @type {Object}\n   */\n\n  this._newBaseOption;\n} // timeline.notMerge is not supported in ec3. Firstly there is rearly\n// case that notMerge is needed. Secondly supporting 'notMerge' requires\n// rawOption cloned and backuped when timeline changed, which does no\n// good to performance. What's more, that both timeline and setOption\n// method supply 'notMerge' brings complex and some problems.\n// Consider this case:\n// (step1) chart.setOption({timeline: {notMerge: false}, ...}, false);\n// (step2) chart.setOption({timeline: {notMerge: true}, ...}, false);\n\nOptionManager.prototype = {\n  constructor: OptionManager,\n  /**\n   * @public\n   * @param {Object} rawOption Raw option.\n   * @param {module:echarts/model/Global} ecModel\n   * @param {Array.<Function>} optionPreprocessorFuncs\n   * @return {Object} Init option\n   */\n  setOption: function (rawOption, optionPreprocessorFuncs) {\n    if (rawOption) {\n      // That set dat primitive is dangerous if user reuse the data when setOption again.\n      zrUtil.each(modelUtil.normalizeToArray(rawOption.series), function (series) {\n        series && series.data && zrUtil.isTypedArray(series.data) && zrUtil.setAsPrimitive(series.data);\n      });\n    } // Caution: some series modify option data, if do not clone,\n    // it should ensure that the repeat modify correctly\n    // (create a new object when modify itself).\n\n    rawOption = clone(rawOption); // FIXME\n    // 如果 timeline options 或者 media 中设置了某个属性，而baseOption中没有设置，则进行警告。\n\n    var oldOptionBackup = this._optionBackup;\n    var newParsedOption = parseRawOption.call(this, rawOption, optionPreprocessorFuncs, !oldOptionBackup);\n    this._newBaseOption = newParsedOption.baseOption; // For setOption at second time (using merge mode);\n\n    if (oldOptionBackup) {\n      // Only baseOption can be merged.\n      mergeOption(oldOptionBackup.baseOption, newParsedOption.baseOption); // For simplicity, timeline options and media options do not support merge,\n      // that is, if you `setOption` twice and both has timeline options, the latter\n      // timeline opitons will not be merged to the formers, but just substitude them.\n\n      if (newParsedOption.timelineOptions.length) {\n        oldOptionBackup.timelineOptions = newParsedOption.timelineOptions;\n      }\n      if (newParsedOption.mediaList.length) {\n        oldOptionBackup.mediaList = newParsedOption.mediaList;\n      }\n      if (newParsedOption.mediaDefault) {\n        oldOptionBackup.mediaDefault = newParsedOption.mediaDefault;\n      }\n    } else {\n      this._optionBackup = newParsedOption;\n    }\n  },\n  /**\n   * @param {boolean} isRecreate\n   * @return {Object}\n   */\n  mountOption: function (isRecreate) {\n    var optionBackup = this._optionBackup; // TODO\n    // 如果没有reset功能则不clone。\n\n    this._timelineOptions = map(optionBackup.timelineOptions, clone);\n    this._mediaList = map(optionBackup.mediaList, clone);\n    this._mediaDefault = clone(optionBackup.mediaDefault);\n    this._currentMediaIndices = [];\n    return clone(isRecreate // this._optionBackup.baseOption, which is created at the first `setOption`\n    // called, and is merged into every new option by inner method `mergeOption`\n    // each time `setOption` called, can be only used in `isRecreate`, because\n    // its reliability is under suspicion. In other cases option merge is\n    // performed by `model.mergeOption`.\n    ? optionBackup.baseOption : this._newBaseOption);\n  },\n  /**\n   * @param {module:echarts/model/Global} ecModel\n   * @return {Object}\n   */\n  getTimelineOption: function (ecModel) {\n    var option;\n    var timelineOptions = this._timelineOptions;\n    if (timelineOptions.length) {\n      // getTimelineOption can only be called after ecModel inited,\n      // so we can get currentIndex from timelineModel.\n      var timelineModel = ecModel.getComponent('timeline');\n      if (timelineModel) {\n        option = clone(timelineOptions[timelineModel.getCurrentIndex()], true);\n      }\n    }\n    return option;\n  },\n  /**\n   * @param {module:echarts/model/Global} ecModel\n   * @return {Array.<Object>}\n   */\n  getMediaOption: function (ecModel) {\n    var ecWidth = this._api.getWidth();\n    var ecHeight = this._api.getHeight();\n    var mediaList = this._mediaList;\n    var mediaDefault = this._mediaDefault;\n    var indices = [];\n    var result = []; // No media defined.\n\n    if (!mediaList.length && !mediaDefault) {\n      return result;\n    } // Multi media may be applied, the latter defined media has higher priority.\n\n    for (var i = 0, len = mediaList.length; i < len; i++) {\n      if (applyMediaQuery(mediaList[i].query, ecWidth, ecHeight)) {\n        indices.push(i);\n      }\n    } // FIXME\n    // 是否mediaDefault应该强制用户设置，否则可能修改不能回归。\n\n    if (!indices.length && mediaDefault) {\n      indices = [-1];\n    }\n    if (indices.length && !indicesEquals(indices, this._currentMediaIndices)) {\n      result = map(indices, function (index) {\n        return clone(index === -1 ? mediaDefault.option : mediaList[index].option);\n      });\n    } // Otherwise return nothing.\n\n    this._currentMediaIndices = indices;\n    return result;\n  }\n};\nfunction parseRawOption(rawOption, optionPreprocessorFuncs, isNew) {\n  var timelineOptions = [];\n  var mediaList = [];\n  var mediaDefault;\n  var baseOption; // Compatible with ec2.\n\n  var timelineOpt = rawOption.timeline;\n  if (rawOption.baseOption) {\n    baseOption = rawOption.baseOption;\n  } // For timeline\n\n  if (timelineOpt || rawOption.options) {\n    baseOption = baseOption || {};\n    timelineOptions = (rawOption.options || []).slice();\n  } // For media query\n\n  if (rawOption.media) {\n    baseOption = baseOption || {};\n    var media = rawOption.media;\n    each(media, function (singleMedia) {\n      if (singleMedia && singleMedia.option) {\n        if (singleMedia.query) {\n          mediaList.push(singleMedia);\n        } else if (!mediaDefault) {\n          // Use the first media default.\n          mediaDefault = singleMedia;\n        }\n      }\n    });\n  } // For normal option\n\n  if (!baseOption) {\n    baseOption = rawOption;\n  } // Set timelineOpt to baseOption in ec3,\n  // which is convenient for merge option.\n\n  if (!baseOption.timeline) {\n    baseOption.timeline = timelineOpt;\n  } // Preprocess.\n\n  each([baseOption].concat(timelineOptions).concat(zrUtil.map(mediaList, function (media) {\n    return media.option;\n  })), function (option) {\n    each(optionPreprocessorFuncs, function (preProcess) {\n      preProcess(option, isNew);\n    });\n  });\n  return {\n    baseOption: baseOption,\n    timelineOptions: timelineOptions,\n    mediaDefault: mediaDefault,\n    mediaList: mediaList\n  };\n}\n/**\n * @see <http://www.w3.org/TR/css3-mediaqueries/#media1>\n * Support: width, height, aspectRatio\n * Can use max or min as prefix.\n */\n\nfunction applyMediaQuery(query, ecWidth, ecHeight) {\n  var realMap = {\n    width: ecWidth,\n    height: ecHeight,\n    aspectratio: ecWidth / ecHeight // lowser case for convenientce.\n  };\n\n  var applicatable = true;\n  zrUtil.each(query, function (value, attr) {\n    var matched = attr.match(QUERY_REG);\n    if (!matched || !matched[1] || !matched[2]) {\n      return;\n    }\n    var operator = matched[1];\n    var realAttr = matched[2].toLowerCase();\n    if (!compare(realMap[realAttr], value, operator)) {\n      applicatable = false;\n    }\n  });\n  return applicatable;\n}\nfunction compare(real, expect, operator) {\n  if (operator === 'min') {\n    return real >= expect;\n  } else if (operator === 'max') {\n    return real <= expect;\n  } else {\n    // Equals\n    return real === expect;\n  }\n}\nfunction indicesEquals(indices1, indices2) {\n  // indices is always order by asc and has only finite number.\n  return indices1.join(',') === indices2.join(',');\n}\n/**\n * Consider case:\n * `chart.setOption(opt1);`\n * Then user do some interaction like dataZoom, dataView changing.\n * `chart.setOption(opt2);`\n * Then user press 'reset button' in toolbox.\n *\n * After doing that all of the interaction effects should be reset, the\n * chart should be the same as the result of invoke\n * `chart.setOption(opt1); chart.setOption(opt2);`.\n *\n * Although it is not able ensure that\n * `chart.setOption(opt1); chart.setOption(opt2);` is equivalents to\n * `chart.setOption(merge(opt1, opt2));` exactly,\n * this might be the only simple way to implement that feature.\n *\n * MEMO: We've considered some other approaches:\n * 1. Each model handle its self restoration but not uniform treatment.\n *     (Too complex in logic and error-prone)\n * 2. Use a shadow ecModel. (Performace expensive)\n */\n\nfunction mergeOption(oldOption, newOption) {\n  newOption = newOption || {};\n  each(newOption, function (newCptOpt, mainType) {\n    if (newCptOpt == null) {\n      return;\n    }\n    var oldCptOpt = oldOption[mainType];\n    if (!ComponentModel.hasClass(mainType)) {\n      oldOption[mainType] = merge(oldCptOpt, newCptOpt, true);\n    } else {\n      newCptOpt = modelUtil.normalizeToArray(newCptOpt);\n      oldCptOpt = modelUtil.normalizeToArray(oldCptOpt);\n      var mapResult = modelUtil.mappingToExists(oldCptOpt, newCptOpt);\n      oldOption[mainType] = map(mapResult, function (item) {\n        return item.option && item.exist ? merge(item.exist, item.option, true) : item.exist || item.option;\n      });\n    }\n  });\n}\nvar _default = OptionManager;\nmodule.exports = _default;","map":{"version":3,"names":["zrUtil","require","modelUtil","ComponentModel","each","clone","map","merge","QUERY_REG","OptionManager","api","_api","_timelineOptions","_mediaList","_mediaDefault","_currentMediaIndices","_optionBackup","_newBaseOption","prototype","constructor","setOption","rawOption","optionPreprocessorFuncs","normalizeToArray","series","data","isTypedArray","setAsPrimitive","oldOptionBackup","newParsedOption","parseRawOption","call","baseOption","mergeOption","timelineOptions","length","mediaList","mediaDefault","mountOption","isRecreate","optionBackup","getTimelineOption","ecModel","option","timelineModel","getComponent","getCurrentIndex","getMediaOption","ecWidth","getWidth","ecHeight","getHeight","indices","result","i","len","applyMediaQuery","query","push","indicesEquals","index","isNew","timelineOpt","timeline","options","slice","media","singleMedia","concat","preProcess","realMap","width","height","aspectratio","applicatable","value","attr","matched","match","operator","realAttr","toLowerCase","compare","real","expect","indices1","indices2","join","oldOption","newOption","newCptOpt","mainType","oldCptOpt","hasClass","mapResult","mappingToExists","item","exist","_default","module","exports"],"sources":["/Users/mac/Desktop/vue_bsm/vue3_bsm/node_modules/echarts/lib/model/OptionManager.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar modelUtil = require(\"../util/model\");\n\nvar ComponentModel = require(\"./Component\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * ECharts option manager\n *\n * @module {echarts/model/OptionManager}\n */\nvar each = zrUtil.each;\nvar clone = zrUtil.clone;\nvar map = zrUtil.map;\nvar merge = zrUtil.merge;\nvar QUERY_REG = /^(min|max)?(.+)$/;\n/**\n * TERM EXPLANATIONS:\n *\n * [option]:\n *\n *     An object that contains definitions of components. For example:\n *     var option = {\n *         title: {...},\n *         legend: {...},\n *         visualMap: {...},\n *         series: [\n *             {data: [...]},\n *             {data: [...]},\n *             ...\n *         ]\n *     };\n *\n * [rawOption]:\n *\n *     An object input to echarts.setOption. 'rawOption' may be an\n *     'option', or may be an object contains multi-options. For example:\n *     var option = {\n *         baseOption: {\n *             title: {...},\n *             legend: {...},\n *             series: [\n *                 {data: [...]},\n *                 {data: [...]},\n *                 ...\n *             ]\n *         },\n *         timeline: {...},\n *         options: [\n *             {title: {...}, series: {data: [...]}},\n *             {title: {...}, series: {data: [...]}},\n *             ...\n *         ],\n *         media: [\n *             {\n *                 query: {maxWidth: 320},\n *                 option: {series: {x: 20}, visualMap: {show: false}}\n *             },\n *             {\n *                 query: {minWidth: 320, maxWidth: 720},\n *                 option: {series: {x: 500}, visualMap: {show: true}}\n *             },\n *             {\n *                 option: {series: {x: 1200}, visualMap: {show: true}}\n *             }\n *         ]\n *     };\n *\n * @alias module:echarts/model/OptionManager\n * @param {module:echarts/ExtensionAPI} api\n */\n\nfunction OptionManager(api) {\n  /**\n   * @private\n   * @type {module:echarts/ExtensionAPI}\n   */\n  this._api = api;\n  /**\n   * @private\n   * @type {Array.<number>}\n   */\n\n  this._timelineOptions = [];\n  /**\n   * @private\n   * @type {Array.<Object>}\n   */\n\n  this._mediaList = [];\n  /**\n   * @private\n   * @type {Object}\n   */\n\n  this._mediaDefault;\n  /**\n   * -1, means default.\n   * empty means no media.\n   * @private\n   * @type {Array.<number>}\n   */\n\n  this._currentMediaIndices = [];\n  /**\n   * @private\n   * @type {Object}\n   */\n\n  this._optionBackup;\n  /**\n   * @private\n   * @type {Object}\n   */\n\n  this._newBaseOption;\n} // timeline.notMerge is not supported in ec3. Firstly there is rearly\n// case that notMerge is needed. Secondly supporting 'notMerge' requires\n// rawOption cloned and backuped when timeline changed, which does no\n// good to performance. What's more, that both timeline and setOption\n// method supply 'notMerge' brings complex and some problems.\n// Consider this case:\n// (step1) chart.setOption({timeline: {notMerge: false}, ...}, false);\n// (step2) chart.setOption({timeline: {notMerge: true}, ...}, false);\n\n\nOptionManager.prototype = {\n  constructor: OptionManager,\n\n  /**\n   * @public\n   * @param {Object} rawOption Raw option.\n   * @param {module:echarts/model/Global} ecModel\n   * @param {Array.<Function>} optionPreprocessorFuncs\n   * @return {Object} Init option\n   */\n  setOption: function (rawOption, optionPreprocessorFuncs) {\n    if (rawOption) {\n      // That set dat primitive is dangerous if user reuse the data when setOption again.\n      zrUtil.each(modelUtil.normalizeToArray(rawOption.series), function (series) {\n        series && series.data && zrUtil.isTypedArray(series.data) && zrUtil.setAsPrimitive(series.data);\n      });\n    } // Caution: some series modify option data, if do not clone,\n    // it should ensure that the repeat modify correctly\n    // (create a new object when modify itself).\n\n\n    rawOption = clone(rawOption); // FIXME\n    // 如果 timeline options 或者 media 中设置了某个属性，而baseOption中没有设置，则进行警告。\n\n    var oldOptionBackup = this._optionBackup;\n    var newParsedOption = parseRawOption.call(this, rawOption, optionPreprocessorFuncs, !oldOptionBackup);\n    this._newBaseOption = newParsedOption.baseOption; // For setOption at second time (using merge mode);\n\n    if (oldOptionBackup) {\n      // Only baseOption can be merged.\n      mergeOption(oldOptionBackup.baseOption, newParsedOption.baseOption); // For simplicity, timeline options and media options do not support merge,\n      // that is, if you `setOption` twice and both has timeline options, the latter\n      // timeline opitons will not be merged to the formers, but just substitude them.\n\n      if (newParsedOption.timelineOptions.length) {\n        oldOptionBackup.timelineOptions = newParsedOption.timelineOptions;\n      }\n\n      if (newParsedOption.mediaList.length) {\n        oldOptionBackup.mediaList = newParsedOption.mediaList;\n      }\n\n      if (newParsedOption.mediaDefault) {\n        oldOptionBackup.mediaDefault = newParsedOption.mediaDefault;\n      }\n    } else {\n      this._optionBackup = newParsedOption;\n    }\n  },\n\n  /**\n   * @param {boolean} isRecreate\n   * @return {Object}\n   */\n  mountOption: function (isRecreate) {\n    var optionBackup = this._optionBackup; // TODO\n    // 如果没有reset功能则不clone。\n\n    this._timelineOptions = map(optionBackup.timelineOptions, clone);\n    this._mediaList = map(optionBackup.mediaList, clone);\n    this._mediaDefault = clone(optionBackup.mediaDefault);\n    this._currentMediaIndices = [];\n    return clone(isRecreate // this._optionBackup.baseOption, which is created at the first `setOption`\n    // called, and is merged into every new option by inner method `mergeOption`\n    // each time `setOption` called, can be only used in `isRecreate`, because\n    // its reliability is under suspicion. In other cases option merge is\n    // performed by `model.mergeOption`.\n    ? optionBackup.baseOption : this._newBaseOption);\n  },\n\n  /**\n   * @param {module:echarts/model/Global} ecModel\n   * @return {Object}\n   */\n  getTimelineOption: function (ecModel) {\n    var option;\n    var timelineOptions = this._timelineOptions;\n\n    if (timelineOptions.length) {\n      // getTimelineOption can only be called after ecModel inited,\n      // so we can get currentIndex from timelineModel.\n      var timelineModel = ecModel.getComponent('timeline');\n\n      if (timelineModel) {\n        option = clone(timelineOptions[timelineModel.getCurrentIndex()], true);\n      }\n    }\n\n    return option;\n  },\n\n  /**\n   * @param {module:echarts/model/Global} ecModel\n   * @return {Array.<Object>}\n   */\n  getMediaOption: function (ecModel) {\n    var ecWidth = this._api.getWidth();\n\n    var ecHeight = this._api.getHeight();\n\n    var mediaList = this._mediaList;\n    var mediaDefault = this._mediaDefault;\n    var indices = [];\n    var result = []; // No media defined.\n\n    if (!mediaList.length && !mediaDefault) {\n      return result;\n    } // Multi media may be applied, the latter defined media has higher priority.\n\n\n    for (var i = 0, len = mediaList.length; i < len; i++) {\n      if (applyMediaQuery(mediaList[i].query, ecWidth, ecHeight)) {\n        indices.push(i);\n      }\n    } // FIXME\n    // 是否mediaDefault应该强制用户设置，否则可能修改不能回归。\n\n\n    if (!indices.length && mediaDefault) {\n      indices = [-1];\n    }\n\n    if (indices.length && !indicesEquals(indices, this._currentMediaIndices)) {\n      result = map(indices, function (index) {\n        return clone(index === -1 ? mediaDefault.option : mediaList[index].option);\n      });\n    } // Otherwise return nothing.\n\n\n    this._currentMediaIndices = indices;\n    return result;\n  }\n};\n\nfunction parseRawOption(rawOption, optionPreprocessorFuncs, isNew) {\n  var timelineOptions = [];\n  var mediaList = [];\n  var mediaDefault;\n  var baseOption; // Compatible with ec2.\n\n  var timelineOpt = rawOption.timeline;\n\n  if (rawOption.baseOption) {\n    baseOption = rawOption.baseOption;\n  } // For timeline\n\n\n  if (timelineOpt || rawOption.options) {\n    baseOption = baseOption || {};\n    timelineOptions = (rawOption.options || []).slice();\n  } // For media query\n\n\n  if (rawOption.media) {\n    baseOption = baseOption || {};\n    var media = rawOption.media;\n    each(media, function (singleMedia) {\n      if (singleMedia && singleMedia.option) {\n        if (singleMedia.query) {\n          mediaList.push(singleMedia);\n        } else if (!mediaDefault) {\n          // Use the first media default.\n          mediaDefault = singleMedia;\n        }\n      }\n    });\n  } // For normal option\n\n\n  if (!baseOption) {\n    baseOption = rawOption;\n  } // Set timelineOpt to baseOption in ec3,\n  // which is convenient for merge option.\n\n\n  if (!baseOption.timeline) {\n    baseOption.timeline = timelineOpt;\n  } // Preprocess.\n\n\n  each([baseOption].concat(timelineOptions).concat(zrUtil.map(mediaList, function (media) {\n    return media.option;\n  })), function (option) {\n    each(optionPreprocessorFuncs, function (preProcess) {\n      preProcess(option, isNew);\n    });\n  });\n  return {\n    baseOption: baseOption,\n    timelineOptions: timelineOptions,\n    mediaDefault: mediaDefault,\n    mediaList: mediaList\n  };\n}\n/**\n * @see <http://www.w3.org/TR/css3-mediaqueries/#media1>\n * Support: width, height, aspectRatio\n * Can use max or min as prefix.\n */\n\n\nfunction applyMediaQuery(query, ecWidth, ecHeight) {\n  var realMap = {\n    width: ecWidth,\n    height: ecHeight,\n    aspectratio: ecWidth / ecHeight // lowser case for convenientce.\n\n  };\n  var applicatable = true;\n  zrUtil.each(query, function (value, attr) {\n    var matched = attr.match(QUERY_REG);\n\n    if (!matched || !matched[1] || !matched[2]) {\n      return;\n    }\n\n    var operator = matched[1];\n    var realAttr = matched[2].toLowerCase();\n\n    if (!compare(realMap[realAttr], value, operator)) {\n      applicatable = false;\n    }\n  });\n  return applicatable;\n}\n\nfunction compare(real, expect, operator) {\n  if (operator === 'min') {\n    return real >= expect;\n  } else if (operator === 'max') {\n    return real <= expect;\n  } else {\n    // Equals\n    return real === expect;\n  }\n}\n\nfunction indicesEquals(indices1, indices2) {\n  // indices is always order by asc and has only finite number.\n  return indices1.join(',') === indices2.join(',');\n}\n/**\n * Consider case:\n * `chart.setOption(opt1);`\n * Then user do some interaction like dataZoom, dataView changing.\n * `chart.setOption(opt2);`\n * Then user press 'reset button' in toolbox.\n *\n * After doing that all of the interaction effects should be reset, the\n * chart should be the same as the result of invoke\n * `chart.setOption(opt1); chart.setOption(opt2);`.\n *\n * Although it is not able ensure that\n * `chart.setOption(opt1); chart.setOption(opt2);` is equivalents to\n * `chart.setOption(merge(opt1, opt2));` exactly,\n * this might be the only simple way to implement that feature.\n *\n * MEMO: We've considered some other approaches:\n * 1. Each model handle its self restoration but not uniform treatment.\n *     (Too complex in logic and error-prone)\n * 2. Use a shadow ecModel. (Performace expensive)\n */\n\n\nfunction mergeOption(oldOption, newOption) {\n  newOption = newOption || {};\n  each(newOption, function (newCptOpt, mainType) {\n    if (newCptOpt == null) {\n      return;\n    }\n\n    var oldCptOpt = oldOption[mainType];\n\n    if (!ComponentModel.hasClass(mainType)) {\n      oldOption[mainType] = merge(oldCptOpt, newCptOpt, true);\n    } else {\n      newCptOpt = modelUtil.normalizeToArray(newCptOpt);\n      oldCptOpt = modelUtil.normalizeToArray(oldCptOpt);\n      var mapResult = modelUtil.mappingToExists(oldCptOpt, newCptOpt);\n      oldOption[mainType] = map(mapResult, function (item) {\n        return item.option && item.exist ? merge(item.exist, item.option, true) : item.exist || item.option;\n      });\n    }\n  });\n}\n\nvar _default = OptionManager;\nmodule.exports = _default;"],"mappings":";AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AAE7C,IAAIC,SAAS,GAAGD,OAAO,CAAC,eAAe,CAAC;AAExC,IAAIE,cAAc,GAAGF,OAAO,CAAC,aAAa,CAAC;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAIG,IAAI,GAAGJ,MAAM,CAACI,IAAI;AACtB,IAAIC,KAAK,GAAGL,MAAM,CAACK,KAAK;AACxB,IAAIC,GAAG,GAAGN,MAAM,CAACM,GAAG;AACpB,IAAIC,KAAK,GAAGP,MAAM,CAACO,KAAK;AACxB,IAAIC,SAAS,GAAG,kBAAkB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,aAAaA,CAACC,GAAG,EAAE;EAC1B;AACF;AACA;AACA;EACE,IAAI,CAACC,IAAI,GAAGD,GAAG;EACf;AACF;AACA;AACA;;EAEE,IAAI,CAACE,gBAAgB,GAAG,EAAE;EAC1B;AACF;AACA;AACA;;EAEE,IAAI,CAACC,UAAU,GAAG,EAAE;EACpB;AACF;AACA;AACA;;EAEE,IAAI,CAACC,aAAa;EAClB;AACF;AACA;AACA;AACA;AACA;;EAEE,IAAI,CAACC,oBAAoB,GAAG,EAAE;EAC9B;AACF;AACA;AACA;;EAEE,IAAI,CAACC,aAAa;EAClB;AACF;AACA;AACA;;EAEE,IAAI,CAACC,cAAc;AACrB,CAAC,C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"},"metadata":{},"sourceType":"script","externalDependencies":[]}