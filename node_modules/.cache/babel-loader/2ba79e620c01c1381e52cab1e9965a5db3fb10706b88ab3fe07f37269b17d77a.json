{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar graphic = require(\"../../util/graphic\");\nvar vec2 = require(\"zrender/lib/core/vector\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Line path for bezier and straight line draw\n */\nvar straightLineProto = graphic.Line.prototype;\nvar bezierCurveProto = graphic.BezierCurve.prototype;\nfunction isLine(shape) {\n  return isNaN(+shape.cpx1) || isNaN(+shape.cpy1);\n}\nvar _default = graphic.extendShape({\n  type: 'ec-line',\n  style: {\n    stroke: '#000',\n    fill: null\n  },\n  shape: {\n    x1: 0,\n    y1: 0,\n    x2: 0,\n    y2: 0,\n    percent: 1,\n    cpx1: null,\n    cpy1: null\n  },\n  buildPath: function (ctx, shape) {\n    this[isLine(shape) ? '_buildPathLine' : '_buildPathCurve'](ctx, shape);\n  },\n  _buildPathLine: straightLineProto.buildPath,\n  _buildPathCurve: bezierCurveProto.buildPath,\n  pointAt: function (t) {\n    return this[isLine(this.shape) ? '_pointAtLine' : '_pointAtCurve'](t);\n  },\n  _pointAtLine: straightLineProto.pointAt,\n  _pointAtCurve: bezierCurveProto.pointAt,\n  tangentAt: function (t) {\n    var shape = this.shape;\n    var p = isLine(shape) ? [shape.x2 - shape.x1, shape.y2 - shape.y1] : this._tangentAtCurve(t);\n    return vec2.normalize(p, p);\n  },\n  _tangentAtCurve: bezierCurveProto.tangentAt\n});\nmodule.exports = _default;","map":{"version":3,"names":["graphic","require","vec2","straightLineProto","Line","prototype","bezierCurveProto","BezierCurve","isLine","shape","isNaN","cpx1","cpy1","_default","extendShape","type","style","stroke","fill","x1","y1","x2","y2","percent","buildPath","ctx","_buildPathLine","_buildPathCurve","pointAt","t","_pointAtLine","_pointAtCurve","tangentAt","p","_tangentAtCurve","normalize","module","exports"],"sources":["/Users/mac/Desktop/vue_bsm/vue3_bsm/node_modules/echarts/lib/chart/helper/LinePath.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar graphic = require(\"../../util/graphic\");\n\nvar vec2 = require(\"zrender/lib/core/vector\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Line path for bezier and straight line draw\n */\nvar straightLineProto = graphic.Line.prototype;\nvar bezierCurveProto = graphic.BezierCurve.prototype;\n\nfunction isLine(shape) {\n  return isNaN(+shape.cpx1) || isNaN(+shape.cpy1);\n}\n\nvar _default = graphic.extendShape({\n  type: 'ec-line',\n  style: {\n    stroke: '#000',\n    fill: null\n  },\n  shape: {\n    x1: 0,\n    y1: 0,\n    x2: 0,\n    y2: 0,\n    percent: 1,\n    cpx1: null,\n    cpy1: null\n  },\n  buildPath: function (ctx, shape) {\n    this[isLine(shape) ? '_buildPathLine' : '_buildPathCurve'](ctx, shape);\n  },\n  _buildPathLine: straightLineProto.buildPath,\n  _buildPathCurve: bezierCurveProto.buildPath,\n  pointAt: function (t) {\n    return this[isLine(this.shape) ? '_pointAtLine' : '_pointAtCurve'](t);\n  },\n  _pointAtLine: straightLineProto.pointAt,\n  _pointAtCurve: bezierCurveProto.pointAt,\n  tangentAt: function (t) {\n    var shape = this.shape;\n    var p = isLine(shape) ? [shape.x2 - shape.x1, shape.y2 - shape.y1] : this._tangentAtCurve(t);\n    return vec2.normalize(p, p);\n  },\n  _tangentAtCurve: bezierCurveProto.tangentAt\n});\n\nmodule.exports = _default;"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AAE3C,IAAIC,IAAI,GAAGD,OAAO,CAAC,yBAAyB,CAAC;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAIE,iBAAiB,GAAGH,OAAO,CAACI,IAAI,CAACC,SAAS;AAC9C,IAAIC,gBAAgB,GAAGN,OAAO,CAACO,WAAW,CAACF,SAAS;AAEpD,SAASG,MAAMA,CAACC,KAAK,EAAE;EACrB,OAAOC,KAAK,CAAC,CAACD,KAAK,CAACE,IAAI,CAAC,IAAID,KAAK,CAAC,CAACD,KAAK,CAACG,IAAI,CAAC;AACjD;AAEA,IAAIC,QAAQ,GAAGb,OAAO,CAACc,WAAW,CAAC;EACjCC,IAAI,EAAE,SAAS;EACfC,KAAK,EAAE;IACLC,MAAM,EAAE,MAAM;IACdC,IAAI,EAAE;EACR,CAAC;EACDT,KAAK,EAAE;IACLU,EAAE,EAAE,CAAC;IACLC,EAAE,EAAE,CAAC;IACLC,EAAE,EAAE,CAAC;IACLC,EAAE,EAAE,CAAC;IACLC,OAAO,EAAE,CAAC;IACVZ,IAAI,EAAE,IAAI;IACVC,IAAI,EAAE;EACR,CAAC;EACDY,SAAS,EAAE,SAAAA,CAAUC,GAAG,EAAEhB,KAAK,EAAE;IAC/B,IAAI,CAACD,MAAM,CAACC,KAAK,CAAC,GAAG,gBAAgB,GAAG,iBAAiB,CAAC,CAACgB,GAAG,EAAEhB,KAAK,CAAC;EACxE,CAAC;EACDiB,cAAc,EAAEvB,iBAAiB,CAACqB,SAAS;EAC3CG,eAAe,EAAErB,gBAAgB,CAACkB,SAAS;EAC3CI,OAAO,EAAE,SAAAA,CAAUC,CAAC,EAAE;IACpB,OAAO,IAAI,CAACrB,MAAM,CAAC,IAAI,CAACC,KAAK,CAAC,GAAG,cAAc,GAAG,eAAe,CAAC,CAACoB,CAAC,CAAC;EACvE,CAAC;EACDC,YAAY,EAAE3B,iBAAiB,CAACyB,OAAO;EACvCG,aAAa,EAAEzB,gBAAgB,CAACsB,OAAO;EACvCI,SAAS,EAAE,SAAAA,CAAUH,CAAC,EAAE;IACtB,IAAIpB,KAAK,GAAG,IAAI,CAACA,KAAK;IACtB,IAAIwB,CAAC,GAAGzB,MAAM,CAACC,KAAK,CAAC,GAAG,CAACA,KAAK,CAACY,EAAE,GAAGZ,KAAK,CAACU,EAAE,EAAEV,KAAK,CAACa,EAAE,GAAGb,KAAK,CAACW,EAAE,CAAC,GAAG,IAAI,CAACc,eAAe,CAACL,CAAC,CAAC;IAC5F,OAAO3B,IAAI,CAACiC,SAAS,CAACF,CAAC,EAAEA,CAAC,CAAC;EAC7B,CAAC;EACDC,eAAe,EAAE5B,gBAAgB,CAAC0B;AACpC,CAAC,CAAC;AAEFI,MAAM,CAACC,OAAO,GAAGxB,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}